{"version":3,"sources":["Contexts/AllPlayersContext.tsx","Util.ts","Contexts/TeamListContext.tsx","Contexts/AppStatsContext.tsx","Contexts/SettingsContext.tsx","components/AddTeamButton/AddTeamButton.tsx","components/Team/RosterTable.styles.ts","components/Team/PlayerSelect.tsx","SharedStyles/SharedStyles.ts","components/Team/UndraftedRow.style.ts","components/Team/UndraftedRow.tsx","components/Team/RosterTable.tsx","components/Team/TeamStatsTable.styles.ts","components/Team/TeamStatsTable.tsx","components/Team/Team.styles.ts","components/Team/Team.tsx","components/AllTeamsContainer/AllTeamsContainer.tsx","App.styles.ts","components/SettingsButton/SettingsPane.styles.ts","components/SettingsButton/SettingsPanel.tsx","components/SettingsButton/SettingsButton.tsx","components/BarChart/BarChart.styles.ts","components/BarChart/StackedBarChart.tsx","components/Visualizations/Visualizations.tsx","components/SeasonSelect/SeasonSelect.style.ts","components/SeasonSelect/SeasonSelect.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allPlayersContext","React","createContext","AllPlayersContextProvider","props","useState","allPlayers","setAllPlayers","Provider","value","children","statCategories","calculatedCategories","invertedCategories","excludeCategories","defaultCategories","nbaRed","nbaBlue","getAllPlayers","a","year","Date","getFullYear","fetch","playerListResponse","json","playerList","console","log","league","standard","getPlayerStats","personId","currentYear","playerStatsResponse","ok","playerStatsJson","stats","regularSeason","season","total","min","calcTotalStats","roster","selectedYear","result","filter","category","includes","forEach","player","selectedSeasonStats","getSeasonStats","calcTotalStatsArray","statsObject","selectedStats","key","push","label","calcAllTotalStats","teamList","categories","team","teamStats","calcMin","arr","reduce","acc","cur","calcMax","calcMedian","sort","b","length","calcMean","isBestInCategory","best","max","find","seasonYear","teamListContext","TeamListContextProvider","initialTeamList","id","setTeamList","addTeam","removeTeam","appStatsContext","AppStatsContextProvider","median","appStats","setAppStats","settingsContext","SettingsContextProvider","defaultSelectedStats","allCategories","index","indexOf","setSelectedStats","setSelectedYear","useEffect","response","AddTeamButton","useContext","IconButton","onClick","style","color","useTableContainerStyles","makeStyles","root","height","width","marginRight","overflowY","overflowX","display","flexWrap","maxWidth","opacity","backgroundColor","fill","borderRadius","paddingLeft","lineHeight","flex","overflow","textOverflow","whiteSpace","PlayerSelect","teamId","addPlayer","searchString","setSearchString","isFocused","setHasFocus","searchResults","setSearchResults","selectedIndex","setSelectedIndex","rosterIds","map","resultsContainerRef","useRef","firstName","lastName","isActive","isMatchingSearchString","handleClick","currentTarget","dataset","searchStringLower","toLowerCase","startsWith","TextField","type","variant","onChange","target","onKeyDown","current","scrollTop","autoFocus","focused","List","disablePadding","className","ref","i","offsetTop","ListItem","button","data-person-id","data-first-name","data-last-name","selected","disabled","getScrollBarStyles","selector","scrollBarWidth","usePopover","paper","UndraftedRow","popoverClasses","anchorEl","setAnchorEl","open","Boolean","undefined","TableRow","TableCell","size","event","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","classes","onBackdropClick","clientX","clientY","document","elementsFromPoint","element","HTMLButtonElement","click","RosterTable","removePlayer","tableContainerClasses","playerRows","component","Avatar","src","undraftedRows","TableContainer","Table","padding","TableBody","marginLeft","minWidth","textTransform","textAlign","paddingRight","TeamStatsTable","teamStatsArray","toFixed","useAccordionStyles","isExpanded","marginTop","marginBottom","paddingTop","paddingBottom","useAccordionSummaryStyles","minHeight","cursor","expanded","content","justifyContent","margin","flexGrow","useAccordionDetailStyles","flexDirection","useGridStyles","alignItems","Team","setIsExpanded","accordionClasses","accordionSummaryClasses","accordionDetailClasses","gridClasses","findIndex","totalStatsArray","relativeStats","allTotalStats","calcRelativeStatsV2","stat","latest","parseFloat","Accordion","AccordionSummary","aria-label","aria-controls","AccordionDetails","Grid","container","direction","AllTeamsContainer","teamProps","useAppGridStyles","useSettingsPanelStyles","SettingsPanel","settingsArray","show","stopPropagation","dense","data-value","Checkbox","checked","SettingsButton","settingsClasses","PaperProps","useBarChartStyles","chartCardMargin","chartCardPadding","StackedBarChart","statCategory","barChartClasses","barHeight","svgHeight","svgWidth","querySelector","clientWidth","xScale","d3","domain","range","xAxis","barWidths","individualBars","statValue","xPos","idx","barWidth","teamTotal","svg","attr","selectAll","data","enter","append","d","classed","text","call","html","Card","Visualizations","showStatsArray","Object","keys","useSeasonSelectStyles","borderColor","SeasonSelect","seasonSelectClasses","FormControl","InputLabel","Select","autoWidth","MenuItem","App","appGridClasses","item","md","justify","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c35255a.chunk.js","sourcesContent":["import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tDispatch,\r\n\tSetStateAction\r\n} from 'react';\r\nimport { IPlayerSearchResult } from '../Types/types';\r\n\r\nconst allPlayersContext = React.createContext({} as IAllPlayersContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface IAllPlayersContext {\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n\tsetAllPlayers: Dispatch<SetStateAction<Array<IPlayerSearchResult>>>\r\n}\r\n\r\nconst AllPlayersContextProvider = (props: ContextProviderProps): JSX.Element => {\r\n\tconst [allPlayers, setAllPlayers] = useState([] as Array<IPlayerSearchResult>);\r\n\r\n\treturn (\r\n\t\t<allPlayersContext.Provider value={{allPlayers,  setAllPlayers}}>\r\n\t\t\t{props.children}\r\n\t\t</allPlayersContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {AllPlayersContextProvider, allPlayersContext}","import {\r\n\tITeamStats,\r\n\tIStatCategory,\r\n\tIRelativeStats,\r\n\tIRelativeStatsV2,\r\n\tITeam,\r\n\tIPlayerSearchResult,\r\n\tIStatSearchResult,\r\n\tPlayer\r\n} from './Types/types';\r\n\r\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport const maxTeamSize = 15;\r\n\r\nexport const statCategories: Array<string> = [\r\n\t/** points per game */\r\n\t'ppg',\r\n\t/** rebounds per game */\r\n\t'rpg',\r\n\t/** assists per game */\r\n\t'apg', \r\n\t/** minutes per game */\r\n\t'mpg', \r\n\t/** turnovers per game */\r\n\t'topg', \r\n\t/** steals per game */\r\n\t'spg', \r\n\t/** blocks per game */\r\n\t'bpg',\r\n\t\t/** three point percentage */\r\n\t'tpp', \r\n\t/** free throw percentage */\r\n\t'ftp', \r\n\t/** field goal percentage */\r\n\t'fgp', \r\n\r\n\t'assists',\r\n\r\n\t'blocks',\r\n\r\n\t'steals',\r\n\r\n\t'turnovers',\r\n\r\n\t'offReb',\r\n\r\n\t'defReb',\r\n\r\n\t'totReb',\r\n\r\n\t/** field goals made */\r\n\t'fgm',\r\n\t/** field goals attempted */\r\n\t'fga',\r\n\t/** three pointers made */ \r\n\t'tpm',\r\n\t/** three pointers attemped */\r\n\t'tpa',\r\n\t/** free throws made */\r\n\t'ftm',\r\n\t/** free throws attempted */\r\n\t'fta',\r\n\t/** personal fouls */\r\n\t'pFouls',\r\n\r\n\t'points',\r\n\r\n\t'gamesPlayed',\r\n\r\n\t'gamesStarted',\r\n\r\n\t'plusMinus',\r\n\r\n\t'min',\r\n\r\n\t'dd2',\r\n\r\n\t'td3',\r\n\r\n\t'seasonYear',\r\n\r\n\t'seasonStageId'\r\n];\r\n\r\nexport const percentageCategories = [\r\n\t/** three point percentage */\r\n\t'tpp',\r\n\t/** free throw percentage */\r\n\t'ftp',\r\n\t/** field goal percentage */\r\n\t'fgp'\r\n];\r\n\r\nexport const calculatedCategories = [\r\n\t/** field goals made per game */\r\n\t'fgmpg',\r\n\t/** field goals attempted per game */\r\n\t'fgapg',\r\n\t/** three pointers made per game */\r\n\t'tpmpg',\r\n\t/** three pointers attempted per game */\r\n\t'tpapg',\r\n\t/** free throws made per game */\r\n\t'ftmpg',\r\n\t/** free throws attempted per game */\r\n\t'ftapg',\r\n\t/** personal fouls per game */\r\n\t'pfpg'\r\n];\r\n\r\nexport const invertedCategories = [\r\n\t'topg',\r\n\t'turnovers',\r\n\t'pFouls',\r\n\t'pfpg',\r\n];\r\n\r\nexport const excludeCategories = [\r\n\t'seasonStageId',\r\n\t'seasonYear',\r\n];\r\n\r\nexport const defaultCategories = [\r\n\t'ppg',\r\n\t'rpg',\r\n\t'apg',\r\n\t'topg',\r\n\t'bpg',\r\n\t'spg',\r\n\t'fgm',\r\n\t'tpm',\r\n\t'ftm'\r\n];\r\n\r\nexport const nbaRed = '#c8102e';\r\nexport const nbaBlue = '#1d428a';\r\n\r\nexport const getAllPlayers = async (year: number = (new Date()).getFullYear()): Promise<Array<IPlayerSearchResult>> => {\r\n\tlet playerListResponse = await fetch(`https://data.nba.net/prod/v1/${year}/players.json`);\r\n\tlet playerList = await playerListResponse.json();\r\n\tconsole.log(playerList.league.standard);\r\n\treturn playerList.league.standard;\r\n}\r\n\r\nexport const getPlayerStats = async (personId: string): Promise<IStatSearchResult | any> => {\r\n\tlet currentYear = (new Date()).getFullYear();\r\n\tlet playerStatsResponse;\r\n\r\n\twhile (!playerStatsResponse || !playerStatsResponse.ok) {\r\n\t\tplayerStatsResponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players/${personId}_profile.json`)\r\n\t\tif (!playerStatsResponse.ok) {\r\n\t\t\tcurrentYear--;\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst playerStatsJson = await playerStatsResponse.json();\r\n\treturn playerStatsJson.league.standard ??\r\n\t{\r\n\t\tstats: {\r\n\t\t\tregularSeason: {\r\n\t\t\t\tseason: [{\r\n\t\t\t\t\ttotal: { min: 0 }\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport const calcTotalStats = (roster: Array<Player>, selectedYear: number = 2019): ITeamStats => {\r\n\tconst result: ITeamStats = {};\r\n\tstatCategories\r\n\t\t.filter(category => !excludeCategories.includes(category))\r\n\t\t.forEach(category => result[category] = 0);\r\n\troster.forEach((player): void => {\r\n\t\tconst selectedSeasonStats = getSeasonStats(player, selectedYear)\r\n\t\tfor(let category in result) {\r\n\t\t\tresult[category] += selectedSeasonStats![category] as number >= 0 ? selectedSeasonStats![category] as number : 0;\r\n\t\t}\r\n\t})\r\n\treturn result;\r\n}\r\n\r\nexport const calcTotalStatsArray = (statsObject: ITeamStats, selectedStats?: any): Array<IStatCategory> => {\r\n\tconst result: Array<IStatCategory> = [];\r\n\tfor (let key in statsObject) {\r\n\t\tif(selectedStats && !selectedStats[key]) { continue }\r\n\t\tresult.push({label: key, total: statsObject[key]})\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const calcRelativeStats = (teamList: Array<ITeam>, categories: Array<string> = statCategories): IRelativeStats => {\r\n\tconst result: IRelativeStats = {};\r\n\tconst allTotalStats = calcAllTotalStats(teamList, categories);\r\n\t\r\n\tcategories.forEach(category => {\r\n\t\tresult[category] = {\r\n\t\t\tmin: 0,\r\n\t\t\tmedian: 0,\r\n\t\t\tmax: 0\r\n\t\t}\r\n\t});\r\n\t\r\n\tfor(let category in allTotalStats) {\r\n\t\tresult[category].min = calcMin(allTotalStats[category])\r\n\t\tresult[category].max = calcMax(allTotalStats[category])\r\n\t\tresult[category].median = calcMedian(allTotalStats[category])\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const calcRelativeStatsV2 = (teamList: Array<ITeam>, categories: Array<string> = statCategories): IRelativeStatsV2 => {\r\n\tconst result: IRelativeStatsV2 = {\r\n\t\tmin: {},\r\n\t\tmedian: {},\r\n\t\tmax: {}\r\n\t};\r\n\tconst allTotalStats: {[key: string]: Array<number>} = calcAllTotalStats(teamList, categories);\r\n\r\n\tfor(let category in allTotalStats) {\r\n\t\tresult.min[category] = calcMin(allTotalStats[category])\r\n\t\tresult.median[category] = calcMedian(allTotalStats[category])\r\n\t\tresult.max[category] = calcMax(allTotalStats[category])\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nexport const calcAllTotalStats = (teamList: Array<ITeam>, categories: Array<string>): {[key: string]: Array<number>} => {\r\n\tconst result: {[key: string]: Array<number>} = {};\r\n\r\n\tcategories.forEach(category => {\r\n\t\tresult[category] = [];\r\n\t});\r\n\r\n\tfor(let category in result) {\r\n\t\tteamList.forEach(team => result[category].push(team.teamStats[category]))\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport const calcMin = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc < cur ? acc : cur);\r\n}\r\n\r\nexport const calcMax = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) =>  acc > cur ? acc : cur);\r\n}\r\n\r\nexport const calcMedian = (arr: Array<number>): number => {\r\n\tarr.sort((a, b) => a - b);\r\n\treturn (\r\n\t\tarr.length % 2 ?\r\n\t\tarr[(arr.length - 1) / 2] :\r\n\t\tcalcMean([arr[arr.length / 2], arr[(arr.length / 2) - 1]])\r\n\t);\r\n}\r\n\r\nexport const calcMean = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc + cur) / arr.length ;\r\n}\r\n\r\nexport const isBestInCategory = (value: number, category: string, best: IRelativeStatsV2): boolean => {\r\n\tif (value === 0 && !invertedCategories.includes(category)) {\r\n\t\treturn false\r\n\t}\r\n\telse if (invertedCategories.includes(category)) {\r\n\t\treturn value === best.min[category];\r\n\t} else {\r\n\t\treturn value === best.max[category];\r\n\t}\r\n}\r\n\r\nexport const getSeasonStats = (player: Player, selectedYear: number = 2019): {[key: string]: number} => {\r\n\tconst selectedStats = player.stats.regularSeason.season\r\n\t\t.find((season) => season.seasonYear === selectedYear)?.total;\r\n\treturn selectedStats ?? { min: 0 };\r\n}\r\n\r\nexport const convertStatsToNumbers = (input: any): IStatSearchResult => {\r\n\tconst { latest, regularSeason } = input\r\n\tconst result = {}\r\n\tfor (const stat in latest) {\r\n\t\tif (typeof latest[stat] === 'string') {\r\n\t\t\tlatest[stat] = latest[stat] !== '-1' ? parseFloat(latest[stat] as string) : 0\r\n\t\t} \r\n\t}\r\n\r\n\tconst { season } = regularSeason;\r\n\tfor (const year in season) {\r\n\t\tfor (const category in season[year].total) {\r\n\t\t\tconst stat = season[year].total[category];\r\n\t\t\tif (typeof stat === 'string') {\r\n\t\t\t\tseason[year].total[category] = stat !== '-1' ? parseFloat(stat) : 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result as any;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { ITeam } from '../Types/types';\r\nimport { calcTotalStats } from '../Util';\r\n\r\nconst teamListContext = React.createContext({} as ITeamContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface ITeamContext {\r\n\tteamList: Array<ITeam>;\r\n\tsetTeamList: React.Dispatch<React.SetStateAction<ITeam[]>>;\r\n\taddTeam: () => void;\r\n\tremoveTeam: (id: number) => void;\r\n}\r\n\r\nconst TeamListContextProvider = (props: ContextProviderProps) => {\r\n\tconst initialTeamList: Array<ITeam> = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\troster: [],\r\n\t\t\tteamStats: calcTotalStats([]),\r\n\t\t\tallPlayers: []\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\troster: [],\r\n\t\t\tteamStats: calcTotalStats([]),\r\n\t\t\tallPlayers: []\r\n\t\t}\r\n\t]\r\n\r\n\tconst [teamList, setTeamList] = useState(initialTeamList);\r\n\t\r\n\tconst addTeam = () => {\r\n\t\tsetTeamList([\r\n\t\t\t...teamList,\r\n\t\t\t{\r\n\t\t\t\tid: (teamList[teamList.length - 1]?.id ?? 0) + 1,\r\n\t\t\t\troster: [],\r\n\t\t\t\tteamStats: calcTotalStats([]),\r\n\t\t\t\tallPlayers: []\r\n\t\t\t}\r\n\t\t])\r\n\t}\r\n\r\n\tconst removeTeam = (id: number) => {\r\n\t\tsetTeamList(teamList.filter(team => team.id !== id))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<teamListContext.Provider value={{ teamList, addTeam, removeTeam, setTeamList }}>\r\n\t\t\t{props.children}\r\n\t\t</teamListContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { TeamListContextProvider, teamListContext }","import React, {Dispatch, SetStateAction} from 'react';\r\nimport { IRelativeStatsV2 } from '../Types/types';\r\n\r\nconst appStatsContext = React.createContext({} as IAppStatsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface IAppStatsContext {\r\n\tappStats: IRelativeStatsV2;\r\n\tsetAppStats: Dispatch<SetStateAction<IRelativeStatsV2>>;\r\n}\r\n\r\nconst AppStatsContextProvider = (props: ContextProviderProps) => {\r\n\tconst initialAppStats = { min: {}, median: {}, max: {} };\r\n\tconst [appStats, setAppStats] = React.useState(initialAppStats);\r\n\t\r\n\treturn (\r\n\t\t<appStatsContext.Provider value={{appStats, setAppStats}}>\r\n\t\t\t{props.children}\r\n\t\t</appStatsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {AppStatsContextProvider, appStatsContext}","import React, {\r\n\tDispatch, SetStateAction, useEffect } from 'react';\r\nimport {\r\n\tstatCategories,\r\n\tcalculatedCategories,\r\n\texcludeCategories,\r\n\tdefaultCategories\r\n } from '../Util'\r\n\r\nconst settingsContext = React.createContext({} as ISettingsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n\r\ninterface ISettingsContext {\r\n\tselectedStats: { [key: string]: boolean };\r\n\tsetSelectedStats:  Dispatch<SetStateAction<{ [key: string]: boolean }>>;\r\n\tselectedYear?: number | Promise<number>;\r\n\tsetSelectedYear: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst SettingsContextProvider = (props: ContextProviderProps) => {\r\n\tconst defaultSelectedStats: any = {};\r\n\tconst allCategories = [\r\n\t\t...defaultCategories,\r\n\t\t...statCategories,\r\n\t\t...calculatedCategories,\r\n\t];\r\n\tallCategories\r\n\t\t/** remove duplicates, seasonStageId, and seasonYear */ \r\n\t\t.filter((category, index) => (\r\n\t\t\tallCategories.indexOf(category) === index && !excludeCategories.includes(category)\r\n\t\t))\r\n\t\t.forEach(category => (\r\n\t\t\tdefaultSelectedStats[category] = defaultCategories.includes(category)\r\n\t\t));\r\n\r\n\tconst [ selectedStats, setSelectedStats ] = React.useState(defaultSelectedStats);\r\n\r\n\tconst [ selectedYear, setSelectedYear ] = React.useState((new Date()).getFullYear());\r\n\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tlet currentYear = (new Date()).getFullYear();\r\n\t\t\tlet response;\r\n\t\t\twhile (!response || !response.ok) {\r\n\t\t\t\tresponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players.json`);\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tcurrentYear--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetSelectedYear(2019);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<settingsContext.Provider value={{selectedStats, selectedYear, setSelectedYear, setSelectedStats}}>\r\n\t\t\t{props.children}\r\n\t\t</settingsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { SettingsContextProvider, settingsContext }","import React from 'react';\r\nimport { IconButton } from '@material-ui/core'\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\n\r\nexport const AddTeamButton = () => {\r\n\tconst { addTeam } = React.useContext(teamListContext);\r\n\t\r\n\tconst handleClick = () => {\r\n\t\taddTeam()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tonClick={handleClick}\r\n\t\t\tstyle={{color: '#666666'}}\r\n\t\t>\r\n\t\t\t<GroupAddIcon />\r\n\t\t</IconButton>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Block } from '@material-ui/icons';\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n\troot: {\r\n\t\theight: 'calc(20vh - 16px) !important',\r\n\t\twidth: '60%',\r\n\t\tmarginRight: 3,\r\n\t\toverflowY: 'scroll',\r\n\t\toverflowX: 'hidden',\r\n\t\t'& .table': {\r\n\t\t\tdisplay: 'inline-block'\r\n\t\t},\r\n\t\t'& .tbody': {\r\n\t\t\t// maxWidth: '100%',\r\n\t\t\twidth: '100%',\r\n\t\t\tdisplay: 'inline-block'\r\n\t\t},\r\n\t\t'& .trow': {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexWrap: 'nowrap',\r\n\t\t\tmaxWidth: '100%',\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\t'& .cell': {\r\n\t\t\tdisplay: 'inline-block',\r\n\t\t\twidth: 30,\r\n\t\t\theight: 30,\r\n\t\t},\r\n\t\t'& .button-cell' : {\r\n\t\t\twidth: 30,\r\n\t\t},\r\n\t\t'& .no-stats ': {\r\n\t\t\topacity: .25\r\n\t\t},\r\n\t\t'& .headshot-cell' : {\r\n\t\t\twidth: 30\r\n\t\t},\r\n\t\t'& .headshot' : {\r\n\t\t\theight: 30,\r\n\t\t\twidth: 30,\r\n\t\t\tbackgroundColor: 'lightgray'\r\n\t\t},\r\n\t\t'& .mock-player-icon': {\r\n\t\t\theight: '30px',\r\n\t\t\twidth: '30px',\r\n\t\t\tfill: 'white',\r\n\t\t\tbackgroundColor: 'black',\r\n\t\t\tborderRadius: '15px',\r\n\t\t\tdisplay: 'flex'\r\n\t\t},\r\n\t\t'& .name-cell' : {\r\n\t\t\tpaddingLeft: 6,\r\n\t\t\tlineHeight: '30px',\r\n\t\t\t// width: 'calc(100% - 60px)',\r\n\t\t\t// maxWidth: 'calc(100% - 60px)',\r\n\r\n\t\t\tflex:' 1 0 auto',\r\n\t\t\toverflow: 'hidden',\r\n\t\t\ttextOverflow: 'ellipsis',\r\n\t\t\twhiteSpace: 'nowrap',\r\n\t\t}\r\n\t}\r\n})","import React, {\r\n\tFocusEvent,\r\n\tuseState,\r\n\tChangeEvent,\r\n\tMouseEvent,\r\n\tKeyboardEvent,\r\n\tuseEffect,\r\n\tuseRef\r\n} from 'react';\r\nimport { List, ListItem, ListItemText, Popover, TextField, Card } from '@material-ui/core'\r\nimport { Player, IPlayerSearchResult } from '../../Types/types';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport LazyLoad from 'react-lazy-load';\r\nimport { maxTeamSize } from '../../Util'\r\n\r\nexport interface IPlayerSelectProps {\r\n\tteamId?: number;\r\n\troster?: Array<Player>;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tselectedYear: number;\r\n\tallPlayers: Array<IPlayerSearchResult>\r\n}\r\n\r\nexport const PlayerSelect = (props: IPlayerSelectProps): JSX.Element => {\r\n\tconst { teamId, roster, addPlayer, allPlayers } = props;\r\n\t\r\n\tconst [ searchString, setSearchString ] = useState('');\r\n\tconst [ isFocused, setHasFocus ] = useState(false);\r\n\tconst [ searchResults, setSearchResults ] = useState(allPlayers)\r\n\tconst [ selectedIndex, setSelectedIndex ] = useState(0);\r\n\r\n\tconst rosterIds: Array<string> | undefined = roster?.map(player => player.personId);\r\n\r\n\tconst resultsContainerRef = useRef<HTMLUListElement>(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSearchResults(allPlayers.filter(({firstName, lastName, isActive}) => {\r\n\t\t\treturn isMatchingSearchString(firstName, lastName) && isActive !== false\r\n\t\t}));\r\n\t\tsetSelectedIndex(0);\r\n\t}, [searchString])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSelectedIndex(0);\r\n\t}, [isFocused])\r\n\r\n\tconst handleChange = ({target}: ChangeEvent<{value: string}>) => {\r\n\t\tconst { value } = target;\r\n\t\tvalue.length > 0 && setHasFocus(true);\r\n\t\tsetSearchString(value);\r\n\t}\r\n\r\n\tconst handleClick = ({currentTarget}: MouseEvent<HTMLElement>): void => {\r\n\t\tconst { personId } = currentTarget.dataset;\r\n\t\taddPlayer(personId!, allPlayers);\r\n\t\tsetSearchString('');\r\n\t}\r\n\r\n\tconst handleKeyDown = ({key}: KeyboardEvent<HTMLDivElement>): void => {\r\n\t\tif (key === 'Enter' && searchResults.length) {\r\n\t\t\tconst { personId } = searchResults[selectedIndex];\r\n\t\t\tif (!rosterIds?.includes(personId)) {\r\n\t\t\t\taddPlayer(personId, allPlayers);\r\n\t\t\t\tsetSearchString('');\r\n\t\t\t\tsetHasFocus(false);\r\n\t\t\t}\r\n\t\t} else if (key === 'ArrowDown') {\r\n\t\t\tsetSelectedIndex(selectedIndex < searchResults.length - 1 ? selectedIndex + 1 : searchResults.length - 1);\r\n\t\t\tresultsContainerRef.current!.scrollTop = selectedIndex * 40 + 40\r\n\t\t} else if (key === 'ArrowUp') {\r\n\t\t\tsetSelectedIndex(selectedIndex > 0 ? selectedIndex - 1 : 0);\r\n\t\t\tresultsContainerRef.current!.scrollTop = selectedIndex * 40 - 40\r\n\t\t}\r\n\t}\r\n\r\n\tconst isMatchingSearchString = (firstName: string, lastName: string): boolean => {\r\n\t\tconst searchStringLower = searchString.toLowerCase()\r\n\t\treturn (\r\n\t\t\tfirstName.toLowerCase().startsWith(searchStringLower) ||\r\n\t\t\tlastName.toLowerCase().startsWith(searchStringLower) ||\r\n\t\t\t`${firstName.toLowerCase()} ${lastName.toLowerCase()}`.startsWith(searchStringLower)\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tlabel=\"Draft Player\"\r\n\t\t\t\tvalue={searchString}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\t\tautoFocus\r\n\t\t\t\tfocused\r\n\t\t\t/>\r\n\t\t\t<List\r\n\t\t\t\tdisablePadding={true}\r\n\t\t\t\tclassName='resultsList'\r\n\t\t\t\tref={resultsContainerRef}\r\n\t\t\t>\r\n\t\t\t\t{searchResults.map(({ personId, firstName, lastName }, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<LazyLoad height={40} offsetTop={40 * i}>\r\n\t\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\t\t\t\tbutton\r\n\t\t\t\t\t\t\t\tdata-person-id={personId}\r\n\t\t\t\t\t\t\t\tdata-first-name={firstName}\r\n\t\t\t\t\t\t\t\tdata-last-name={lastName}\r\n\t\t\t\t\t\t\t\tselected={selectedIndex === i && !rosterIds?.includes(personId)}\r\n\t\t\t\t\t\t\t\tdisabled={rosterIds?.includes(personId) || roster!.length >= maxTeamSize}\r\n\t\t\t\t\t\t\t\tkey={`select-${teamId}-${personId}`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{firstName} {lastName}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t</LazyLoad>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</List>\r\n\t\t</div>\r\n\t)\r\n}","export const getScrollBarStyles = (selector: string, scrollBarWidth?: number, height?: number) => {\r\n  return {\r\n    [`& ${selector}`]: {\r\n      overflowY: 'scroll',\r\n      height: height ?? 'auto'\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar`]: {\r\n      width: scrollBarWidth ?? 4\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-track`]: {\r\n      backgroundColor: '#0004',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-thumb`]: {\r\n      backgroundColor: '#FFFA',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    }\r\n  }\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const usePopover = makeStyles({\r\n    paper: {\r\n        overflow: 'visible',\r\n        ...getScrollBarStyles('.resultsList', 4, 200),\r\n    }\r\n})\r\n","import React, { useEffect, useContext } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTableRow,\r\n\tTableCell,\r\n\tPopover\r\n} from '@material-ui/core'\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { usePopover } from './UndraftedRow.style'\r\n\r\n\r\nexport interface IUndraftedRowProps {\r\n\tteamId: number;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\troster: Array<Player>;\r\n\tselectedYear: number;\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n}\r\n\t\r\nexport const UndraftedRow = (props: IUndraftedRowProps): JSX.Element => {\r\n\tconst { addPlayer, teamId, roster, selectedYear, allPlayers } = props;\r\n\r\n\tconst popoverClasses = usePopover();\r\n\t\r\n\tconst [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\tconst id = open ? 'simple-popover' : undefined;\r\n\r\n\tconst handleBackdropClick = ({ clientX, clientY }: React.MouseEvent) => {\r\n\t\tconst elementsAtCoordinates = document.elementsFromPoint(clientX, clientY) as Array<HTMLElement>;\r\n\t\telementsAtCoordinates.find((element) => element instanceof HTMLButtonElement)?.click();\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<TableRow className='trow'>\r\n\t\t\t<TableCell className='cell button-cell'>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tsize='small'\r\n\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t\t<Popover\r\n\t\t\t\t\tid={id}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tanchorEl={anchorEl}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttransformOrigin={{\r\n\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tclasses={popoverClasses}\r\n\t\t\t\t\tonBackdropClick={handleBackdropClick}\r\n\t\t\t\t>\r\n        \t<PlayerSelect \r\n\t\t\t\t\t\tteamId={teamId}\r\n\t\t\t\t\t\troster={roster}\r\n\t\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\t\tkey={`player-select-${id}`}\r\n\t\t\t\t\t\tselectedYear={selectedYear}\r\n\t\t\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t\t\t/>\r\n      \t</Popover>\r\n\t\t\t</TableCell>\r\n\t\t\t<TableCell className='cell headshot-cell no-stats'>\r\n\t\t\t\t\t<AccountCircleIcon className='mock-player-icon' />\r\n\t\t\t</TableCell>\r\n\t\t\t<TableCell className='cell name-cell no-stats'>\r\n\t\t\t\tUndrafted\r\n\t\t\t</TableCell>\r\n\t\t</TableRow>\r\n\t)\r\n}\r\n","import React, { useContext, useEffect } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tAvatar\r\n} from '@material-ui/core'\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\nimport { useTableContainerStyles } from './RosterTable.styles';\r\nimport { maxTeamSize, getSeasonStats } from '../../Util';\r\nimport { UndraftedRow } from './UndraftedRow'\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\n\r\n\r\nexport interface IRosterTableProps {\r\n\tteamId: number;\r\n\troster: Array<Player>;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tremovePlayer: (personId: string) => void;\r\n\tselectedYear: number;\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n}\r\n\r\nexport const RosterTable = (props: IRosterTableProps): JSX.Element => {\r\n\tconst { teamId, roster, removePlayer, addPlayer, selectedYear, allPlayers } = props;\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\r\n\tconst truncatePlayerName = (firstName: string, lastName: string): string => {\r\n\t\t// to do\r\n\t\t// http://www.java2s.com/Tutorials/Javascript/Javascript_Style_How_to/Text/Detect_text_overflow.htm\r\n\t\tconst maxLength = \"Giannis Antetokounmpo\".length\r\n\t\treturn `${firstName} ${lastName}`.length >= maxLength ? `${firstName[0]}. ${lastName}` : `${firstName} ${lastName}`;\r\n\t}\r\n\r\n\tconst playerRows = roster.map((player: Player, i) => {\r\n\t\tconst { personId, firstName, lastName } = player;\r\n\t\treturn (\r\n\t\t\t<TableRow component='div' className='trow' key={`roster-table-row-${teamId}-${personId}`}>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName='cell button-cell'\r\n\t\t\t\t>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={() => removePlayer(personId)}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName={`cell headshot-cell ${getSeasonStats(player, selectedYear).min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\tsrc={`https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/${personId}.png`}\r\n\t\t\t\t\t\tclassName='headshot'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName={`cell name-cell ${getSeasonStats(player, selectedYear).min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{firstName} {lastName}\r\n\t\t\t\t\t{/* {truncatePlayerName(firstName, lastName)} */}\r\n\t\t\t\t</TableCell>\r\n\t\t\t</TableRow>\r\n\t\t)\r\n\t})\r\n\r\n\tconst undraftedRows: Array<JSX.Element> = [];\r\n\r\n\twhile (roster.length + undraftedRows.length < maxTeamSize) {\r\n\t\tundraftedRows.push(\r\n\t\t\t<UndraftedRow\r\n\t\t\t\tkey={`undrafted-table-row-${undraftedRows.length}`}\r\n\t\t\t\tteamId={teamId}\r\n\t\t\t\troster={roster}\r\n\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\tselectedYear={selectedYear}\r\n\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\t\r\n\t\t\t<Table padding='none' size='small' className='table'>\r\n\t\t\t\t<TableBody className='tbody'>\r\n\t\t\t\t\t{playerRows}\r\n\t\t\t\t\t{undraftedRows}\r\n\t\t\t\t</TableBody>\t\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util'\r\n\r\n\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n    root: {\r\n        height: 'calc(20vh - 16px) !important',\r\n        width: '40%',\r\n        marginLeft: 3,\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n        'table': {\r\n            width: '100%',\r\n            minWidth: '100%'\r\n        },\r\n        '& td': {\r\n            textTransform: 'uppercase',\r\n            height: 30,\r\n            lineHeight: '30px'\r\n        },\r\n        '& td.stat-label' : {\r\n            \r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            textAlign: 'left',\r\n            paddingLeft: 6,\r\n        },\r\n        '& td.stat-value' : {\r\n            minWidth: 50,\r\n            paddingRight: 6,\r\n            textAlign: 'right'\r\n        },\r\n        '& td.best' : {\r\n            backgroundColor: nbaBlue,\r\n            color: 'white'\r\n        }\r\n    }\r\n})\r\n","import React, { useContext } from 'react';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport {\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer\r\n} from '@material-ui/core'\r\nimport { useTableContainerStyles } from './TeamStatsTable.styles';\r\nimport { calcTotalStatsArray, isBestInCategory } from '../../Util';\r\nimport { IStatCategory, ITeamStats } from '../../Types/types';\r\nimport { select } from 'd3';\r\n\r\nexport interface ITeamStatsTableProps {\r\n\tteamId: number;\r\n\tteamStats: ITeamStats;\r\n}\r\n\r\nexport const TeamStatsTable = (props: ITeamStatsTableProps): JSX.Element => {\r\n\tconst { teamId, teamStats } = props;\r\n\r\n\tconst { appStats } = useContext(appStatsContext);\r\n\tconst { selectedStats } = useContext(settingsContext);\r\n\r\n\tconst teamStatsArray: Array<IStatCategory> = calcTotalStatsArray(teamStats)\r\n    .filter(({label}: IStatCategory) => selectedStats[label]);\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\r\n\t\t\t<Table padding='none' size='small'>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{teamStatsArray.map(({ label, total }: IStatCategory) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableRow key={`total-stats-row-${teamId}-${label}`}>\r\n\t\t\t\t\t\t\t\t<TableCell className='stat-label'>\r\n\t\t\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\tclassName={`stat-value ${isBestInCategory(total, label, appStats) ? 'best' : ''}`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{total.toFixed(1)}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const useAccordionStyles = makeStyles({\r\n\troot: {\r\n\t\twidth: 'calc(100% - 24px)',\r\n\t\theight: isExpanded => isExpanded ? 'calc(22.5vh - 12px)' : 'auto',\r\n\t\tmarginTop: '0px !important',\r\n\t\tmarginRight: '6px !important',\r\n\t\tmarginBottom: '6px !important',\r\n\t\tmarginLeft: '6px !important',\r\n\t\tpaddingTop: 0,\r\n\t\tpaddingRight: 6,\r\n\t\tpaddingBottom:6,\r\n\t\tpaddingLeft: 6,\r\n\t}\r\n})\r\n\r\nexport const useAccordionSummaryStyles = makeStyles({\r\n\troot: {\r\n\t\tminHeight: '0px',\r\n\t\tpadding: '0px',\r\n\t\toverflow: 'hidden',\r\n\t\t'& :hover': {\r\n\t\t\t\tcursor: 'default'\r\n\t\t},\r\n\t},\r\n\texpanded: {\r\n\t\tminHeight: 'fit-content !important',\r\n\t},\r\n\tcontent: {\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tmargin: '0px !important',\r\n\t\t'& .teamLabel': {\r\n\t\t\tflexGrow: 2,\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tpaddingLeft: '6px'\r\n\t\t},\r\n\t\t'& button' : {\r\n\t\t\tpadding: 0\r\n\t\t}\r\n\t},\r\n});\r\n\r\nexport const useAccordionDetailStyles = makeStyles({\r\n\troot: {\r\n\t\tflexDirection: 'column',\r\n\t\tpadding: '0px'\r\n\t}\r\n})\r\n\r\nexport const useGridStyles = makeStyles({\r\n\troot: {\r\n\t\tflexWrap: 'nowrap',\r\n\t\talignItems: 'stretch',\r\n\t\t'& tr:nth-child(odd)' : {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& tr:nth-child(even)' : {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n\t\t...getScrollBarStyles('.MuiTableContainer-root')\r\n\t}\r\n})","import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseContext,\r\n\tMouseEvent,\r\n\tChangeEvent\r\n} from 'react';\r\nimport {\r\n\tAccordion,\r\n\tAccordionSummary,\r\n\tAccordionDetails,\r\n\tGrid,\r\n\tIconButton,\r\n} from '@material-ui/core'\r\nimport { IStatCategory, ITeam, ITeamStats } from '../../Types/types';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { \r\n\tcalcTotalStats,\r\n\tgetPlayerStats,\r\n\tmaxTeamSize,\r\n\tcalcRelativeStatsV2,\r\n\tcalcTotalStatsArray,\r\n} from '../../Util';\r\nimport { RosterTable } from './RosterTable'\r\nimport { TeamStatsTable } from './TeamStatsTable';\r\nimport { \r\n\tuseAccordionStyles,\r\n\tuseAccordionSummaryStyles,\r\n\tuseAccordionDetailStyles,\r\n\tuseGridStyles\r\n} from './Team.styles';\r\n\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport CropDinIcon from '@material-ui/icons/CropDin';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\n\r\nexport const Team = (props: ITeam) => {\r\n\tconst { id, allPlayers } = props;\r\n\tconst [ isExpanded, setIsExpanded ] = useState(true);\r\n\r\n\tconst { teamList, removeTeam, setTeamList } = useContext(teamListContext);\r\n\tconst { setAppStats } = useContext(appStatsContext);\r\n\tconst { selectedYear } = useContext(settingsContext);\r\n\r\n\tconst accordionClasses = useAccordionStyles(isExpanded);\r\n\tconst accordionSummaryClasses = useAccordionSummaryStyles();\r\n\tconst accordionDetailClasses = useAccordionDetailStyles();\r\n\tconst gridClasses = useGridStyles();\r\n\t\r\n\tconst index = teamList.findIndex(team => team.id === id);\r\n\tconst roster = teamList[index].roster;\r\n\tconst color = teamList[index].color;\r\n\tconst teamStats: ITeamStats = calcTotalStats(roster, selectedYear as number);\r\n\tconst totalStatsArray: Array<number> = calcTotalStatsArray(teamStats).map(({ total }: IStatCategory) => total);\r\n\r\n\tuseEffect(() => {\r\n\t\tteamList[index].teamStats = calcTotalStats(roster, selectedYear as number);\r\n\t\tsetTeamList([...teamList]);\r\n\t}, [roster.length, selectedYear])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst relativeStats = calcRelativeStatsV2(teamList)\r\n\t\tsetAppStats(relativeStats);\r\n\t}, [...totalStatsArray, teamList.length, selectedYear])\r\n\r\n\t// const [ localRoster, setLocalRoster ] = useState({});\r\n\r\n\tconst minimize = (event: MouseEvent) => {\r\n\t\tsetIsExpanded(!isExpanded);\r\n\t}\r\n\r\n\tconst maximize = (event: MouseEvent) => {\r\n\t\t// stub\r\n\t}\r\n\r\n\tconst close = (event: MouseEvent) => {\r\n\t\tremoveTeam(id)\r\n\t}\r\n\r\n\tconst addPlayer = async (personId: string, allPlayers: Array<IPlayerSearchResult>): Promise<void> => {\r\n\t\tconst { firstName, lastName } = allPlayers.find(player => player.personId === personId)!;\r\n\t\tconst { latest, regularSeason } = (await getPlayerStats(personId)).stats;\r\n\t\t\r\n\t\tfor (const stat in latest) {\r\n\t\t\tif (typeof latest[stat] === 'string') {\r\n\t\t\t\tlatest[stat] = latest[stat] !== '-1' ? parseFloat(latest[stat] as string) : 0\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tconst { season } = regularSeason;\r\n\t\tfor (const year in season) {\r\n\t\t\tfor (const category in season[year].total) {\r\n\t\t\t\tconst stat = season[year].total[category];\r\n\t\t\t\tif (typeof stat === 'string') {\r\n\t\t\t\t\tseason[year].total[category] = stat !== '-1' ? parseFloat(stat) : 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst stats = {\r\n\t\t\tlatest,\r\n\t\t\tregularSeason: {\r\n\t\t\t\tseason\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst player: Player = {\r\n\t\t\tpersonId,\r\n\t\t\tfirstName,\r\n\t\t\tlastName,\r\n\t\t\tstats\r\n\t\t};\r\n\t\troster.push(player);\r\n\t\tteamList[index].roster = roster;\r\n\t\tsetTeamList([...teamList]);\r\n\t\tconsole.log(player)\r\n\t}\r\n\r\n\tconst removePlayer = (personId: string): void => {\r\n\t\tteamList[index].roster = roster.filter(player => player.personId !== personId);\r\n\t\tsetTeamList([...teamList]);\r\n\t}\r\n\r\n\t// PersonAdd icon\r\n\t// FilterNone (for copy)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Accordion\r\n\t\t\t\tclasses={accordionClasses}\r\n\t\t\t\t// square\r\n\t\t\t\texpanded={isExpanded}\r\n\t\t\t>\r\n\t\t\t\t<AccordionSummary\r\n\t\t\t\t\taria-label=\"Expand\"\r\n\t\t\t\t\taria-controls=\"additional-actions1-content\"\r\n\t\t\t\t\tclasses={accordionSummaryClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className='teamLabel'>\r\n\t\t\t\t\t\t{/* <RadioButtonUncheckedIcon\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundColor: color,\r\n\t\t\t\t\t\t\t\tfill: 'white',\r\n\t\t\t\t\t\t\t\tborderRadius: '20px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t<span>Team {id} ({roster.length}{roster.length >= maxTeamSize && '*'})</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={minimize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{ isExpanded ? <MinimizeIcon /> : <CropDinIcon /> }\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={maximize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<LaunchIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={close}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</AccordionSummary>\r\n\t\t\t\t<AccordionDetails\r\n\t\t\t\t\tclasses={accordionDetailClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tdirection='row'\r\n\t\t\t\t\t\tclasses={gridClasses}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RosterTable\r\n\t\t\t\t\t\t\tteamId={id} \r\n\t\t\t\t\t\t\troster={roster}\r\n\t\t\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\t\t\tremovePlayer={removePlayer}\r\n\t\t\t\t\t\t\tselectedYear={selectedYear as number}\r\n\t\t\t\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TeamStatsTable\r\n\t\t\t\t\t\t\tteamId={id}\r\n\t\t\t\t\t\t\tteamStats={teamStats ?? {}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</AccordionDetails>\r\n\t\t\t</Accordion>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useEffect, useContext } from 'react';\r\nimport { Team } from '../Team/Team';\r\nimport { ITeam } from '../../Types/types';\r\nimport { getAllPlayers } from '../../Util';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { allPlayersContext } from '../../Contexts/AllPlayersContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\n\r\nexport const AllTeamsContainer = (): JSX.Element => {\r\n\tconst { teamList } = useContext(teamListContext)\r\n\tconst { allPlayers, setAllPlayers } = useContext(allPlayersContext);\r\n\tconst { selectedYear } = useContext(settingsContext)\r\n\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tsetAllPlayers(await getAllPlayers(selectedYear as number));\r\n\t\t})();\r\n\t}, [selectedYear])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{teamList.map((teamProps: ITeam): React.ReactNode => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Team\r\n\t\t\t\t\t\t{...teamProps}\r\n\t\t\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t\t\t\tkey={teamProps.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from './SharedStyles/SharedStyles';\r\nimport { nbaBlue } from './Util';\r\n\r\nexport const useAppGridStyles = makeStyles({\r\n\troot: {\r\n\t\tbackgroundColor: 'lightgray',\r\n\t\t...getScrollBarStyles('.sidebar-scrollbar', 8),\r\n\t\t...getScrollBarStyles('.visualizations-container', 8),\r\n\t}\r\n})","import { makeStyles } from '@material-ui/core';\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles'\r\n\r\nexport const useSettingsPanelStyles = makeStyles({\r\n  root: {\r\n    '& .MuiCheckbox-root.Mui-checked': {\r\n      color: nbaRed\r\n    },\r\n    ...getScrollBarStyles('.stat-select-container', 8)\r\n  }\r\n})","import React, { useContext, useEffect } from 'react';\r\nimport { List, ListItem, Checkbox } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsPanel = () => {\r\n  const { selectedStats, setSelectedStats } = useContext(settingsContext);\r\n  const settingsArray: Array<{label: string, show: boolean}> = [];\r\n  \r\n  for (const key in selectedStats) {\r\n    settingsArray.push({label: key, show: selectedStats[key]})\r\n  }\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation();\r\n    const { value } = event.currentTarget.dataset\r\n    selectedStats[value!] = !selectedStats[value!]\r\n    setSelectedStats({...selectedStats})\r\n  };\r\n\r\n  const settingsClasses = useSettingsPanelStyles()\r\n\r\n  return (\r\n    <List\r\n      dense\r\n    >\r\n      {settingsArray.map(({ label, show }) => {\r\n        return (\r\n          <ListItem\r\n            button\r\n            data-value={label}\r\n            onClick={handleClick}\r\n            key={`setting-${label}`}\r\n          >\r\n            <Checkbox checked={show} />\r\n            <span style={{textTransform: 'uppercase'}}>{label}</span>\r\n          </ListItem>\r\n        )\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { IconButton, Popover } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { SettingsPanel } from './SettingsPanel';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsButton = () => {\r\n  const settingsClasses = useSettingsPanelStyles();\r\n  \r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        onClick={handleClick}\r\n      >\r\n\t\t\t  <VisibilityIcon style={{color: '#666666'}} />\r\n\t\t  </IconButton>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n        classes={settingsClasses}\r\n        PaperProps={{ className: 'stat-select-container' }}\r\n      >\r\n        <SettingsPanel />\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util';\r\n\r\nexport const chartCardPadding = 6\r\nexport const chartCardMargin = 6;\r\n\r\nexport const useBarChartStyles = makeStyles({\r\n  root: {\r\n    width: `calc(100% - ${chartCardMargin * 2}px - ${chartCardPadding * 2}px)`,\r\n    marginTop: 0,\r\n    marginRight: chartCardMargin,\r\n    marginBottom: chartCardMargin,\r\n    marginLeft: chartCardMargin,\r\n    padding: chartCardPadding,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    '& h4': {\r\n      textTransform: 'uppercase',\r\n      margin: 0\r\n    },\r\n    '& svg' : {\r\n      overflow: 'visible',\r\n      marginBottom: 20,\r\n      backgroundColor: '#dddddd'\r\n    },\r\n    '& rect:nth-child(odd)': {\r\n      fill: '#444444',\r\n    },\r\n    '& rect:nth-child(even)': {\r\n      fill: '#666666',\r\n    },\r\n    '& rect:hover': {\r\n      opacity: 1 \r\n    },\r\n    '& .player-name-label': {\r\n      opacity: .25,\r\n      fill: '#fff'\r\n    },\r\n    '& .player-name-label:hover': {\r\n      opacity: 1,\r\n      cursor: 'default'\r\n    },\r\n    '& .best rect:nth-child(odd)': {\r\n      fill: nbaBlue\r\n    },\r\n    '& .best rect:nth-child(even)' : {\r\n      fill: '#3560b3'\r\n    }\r\n  }\r\n})\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Card } from '@material-ui/core';\r\nimport * as d3 from 'd3';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useBarChartStyles } from './BarChart.styles';\r\nimport { isBestInCategory, getSeasonStats } from '../../Util'\r\n\r\nexport interface IStackedBarChartProps {\r\n  statCategory: string\r\n}\r\n\r\ninterface ITeamBar {\r\n  teamId: number;\r\n  teamTotal: number;\r\n  individualBars: Array<IIndividualBar>;\r\n}\r\n\r\ninterface IIndividualBar {\r\n  personId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  statValue: number;\r\n  xPos: number;\r\n  barWidth: number;\r\n}\r\n\r\nexport const StackedBarChart = (props: IStackedBarChartProps) => {\r\n  const { statCategory } = props;\r\n  const { appStats } = useContext(appStatsContext);\r\n  const { teamList } = useContext(teamListContext);\r\n  const { selectedYear } = useContext(settingsContext);\r\n  const barChartClasses = useBarChartStyles();\r\n\r\n  const { [statCategory]: min } = appStats.min;\r\n  const { [statCategory]: median } = appStats.median;\r\n  const { [statCategory]: max } = appStats.max;\r\n\r\n  useEffect(() => {\r\n    const barPadding = 2;\r\n    const barHeight = 30;\r\n    const svgHeight = teamList.length * barHeight;\r\n    const svgWidth = (document.querySelector('.bar-chart-container')!.clientWidth) - 160\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, max || 100])\r\n      .range([0, svgWidth]);\r\n    const xAxis = d3.axisBottom(xScale);\r\n        \r\n    const dataset: Array<ITeamBar> = teamList.map((team) => {\r\n      const barWidths: Array<number> = team.roster.map((player) => {\r\n        const selectedSeasonStats = getSeasonStats(player, selectedYear as number)\r\n        return xScale(selectedSeasonStats[statCategory] ?? 0);\r\n      })\r\n\r\n      const individualBars = team.roster\r\n        .map((player, i) => {\r\n          const { personId, firstName, lastName } = player\r\n          const selectedSeasonStats = getSeasonStats(player, selectedYear as number);\r\n          const statValue = selectedSeasonStats[statCategory] ?? 0;\r\n          const xPos = i === 0 ? 0 : barWidths.reduce((acc, cur, idx) => idx < i ? acc + cur : acc); \r\n          const barWidth = barWidths[i];\r\n          return { personId, firstName, lastName, statValue, xPos, barWidth };\r\n        })\r\n        .filter(({barWidth}) => barWidth > 0);\r\n\r\n      return {\r\n        teamId: team.id,\r\n        teamTotal: team.teamStats[statCategory],\r\n        individualBars\r\n      };\r\n    });\r\n\r\n    const svg = d3.select(`.bar-chart-container.${statCategory} svg`)\r\n      .attr('width', svgWidth)\r\n      .attr('height', svgHeight);\r\n\r\n    // bar\r\n    svg.selectAll(`.bar-chart-container.${statCategory}`)\r\n      .data(dataset)\r\n      .enter()\r\n      .append('g')\r\n        .attr('transform', (d, i) => `translate(0, ${barHeight * i})`)\r\n        .attr('data-team-id', (d) => d.teamId)\r\n        .classed('best', (d) => isBestInCategory(d.teamTotal, statCategory, appStats))\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d) => d.individualBars)\r\n      .enter()\r\n      .append('rect')\r\n        .attr('x', (d) => d.xPos)\r\n        .attr('width', (d) => d.barWidth)\r\n        .attr('height', barHeight - barPadding)\r\n        \r\n    // team label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => `Team ${d.teamId}`)\r\n        .attr('x', -6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'end')\r\n        .attr('alignment-baseline', 'middle')\r\n\r\n    // total stat label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => d.teamTotal ? d.teamTotal.toFixed(1) : '')\r\n        .attr('x', (d: any) => xScale(d.teamTotal) + 6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('alignment-baseline', 'middle')\r\n      \r\n    // player name label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d: any) => d.individualBars)\r\n      .enter()\r\n      .append('text')\r\n        .text((d: any) => d.statValue ? `${d.firstName[0]}. ${d.lastName} ${d.statValue.toFixed(1)}` : '')\r\n        .attr('x', (d: any) => d.xPos + (d.barWidth / 2))\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('alignment-baseline', 'middle')\r\n        .classed('player-name-label', true)\r\n\r\n    // x axis label\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${svgHeight})`)\r\n      .call(xAxis);\r\n  \r\n    return () => { svg.html(null) };\r\n  });\r\n\r\n  return (\r\n    <Card\r\n      classes={barChartClasses}\r\n      className={`bar-chart-container ${statCategory}`}\r\n    >\r\n      <h4>{statCategory}</h4>\r\n      <svg />\r\n    </Card>\r\n  )\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { StackedBarChart } from '../BarChart/StackedBarChart';\r\n\r\nexport const Visualizations = () => {\r\n  const { selectedStats } = useContext(settingsContext);\r\n\r\n  const showStatsArray: Array<string> = Object.keys(selectedStats)\r\n    .filter(category => selectedStats[category]);\r\n\r\n  return (\r\n    <div style={{width: '100%'}}>\r\n      {showStatsArray.map(category => {\r\n        return (\r\n          <StackedBarChart\r\n            key={`bar-chart-${category}`}\r\n            statCategory={category}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import { makeStyles } from '@material-ui/core'\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\n\r\nexport const useSeasonSelectStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 4,\r\n    '& .MuiFormLabel-root.Mui-focused': {\r\n      color: nbaRed,\r\n    },\r\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline' : {\r\n      borderColor: nbaRed\r\n    }\r\n  }\r\n})","import React, { useContext } from 'react';\r\nimport { Select, FormControl, InputLabel, MenuItem } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSeasonSelectStyles } from './SeasonSelect.style'\r\n\r\n\r\nexport const SeasonSelect = () => {\r\n  const { selectedYear, setSelectedYear } = useContext(settingsContext);\r\n\r\n  const seasonSelectClasses = useSeasonSelectStyles();\r\n\r\n  const handleChange = ({ target }: React.ChangeEvent<{ value: unknown }>) => {\r\n    const { value } = target;\r\n    setSelectedYear(value as number);\r\n  };\r\n\r\n  return (\r\n    <FormControl\r\n      variant='outlined'\r\n      classes={seasonSelectClasses}\r\n    >\r\n      <InputLabel>Season</InputLabel>\r\n      <Select\r\n        value={selectedYear}\r\n        onChange={handleChange}\r\n        autoWidth\r\n      >\r\n        <MenuItem value={2020}>2020 - 2021</MenuItem>\r\n        <MenuItem value={2019}>2019 - 2020</MenuItem>\r\n        <MenuItem value={2018}>2018 - 2019</MenuItem>\r\n        <MenuItem value={2017}>2017 - 2018</MenuItem>\r\n        <MenuItem value={2016}>2016 - 2017</MenuItem>\r\n        <MenuItem value={2015}>2015 - 2016</MenuItem>\r\n        <MenuItem value={2014}>2014 - 2015</MenuItem>\r\n        <MenuItem value={2013}>2013 - 2014</MenuItem>\r\n        <MenuItem value={2012}>2012 - 2013</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { AllPlayersContextProvider } from './Contexts/AllPlayersContext'\r\nimport { TeamListContextProvider } from './Contexts/TeamListContext'\r\nimport { AppStatsContextProvider } from './Contexts/AppStatsContext'\r\nimport { SettingsContextProvider } from './Contexts/SettingsContext'\r\nimport { Grid } from '@material-ui/core';\r\nimport { AddTeamButton } from './components/AddTeamButton/AddTeamButton';\r\nimport { AllTeamsContainer } from './components/AllTeamsContainer/AllTeamsContainer';\r\nimport { useAppGridStyles } from './App.styles';\r\nimport { SettingsButton } from './components/SettingsButton/SettingsButton';\r\nimport { Visualizations } from './components/Visualizations/Visualizations';\r\nimport { SeasonSelect } from './components/SeasonSelect/SeasonSelect';\r\nimport { nbaBlue } from './Util'\r\n\r\nfunction App() {\r\n\r\n  const appGridClasses = useAppGridStyles();\r\n\r\n  return (\r\n    <AppStatsContextProvider>\r\n      <AllPlayersContextProvider>\r\n        <TeamListContextProvider>\r\n          <SettingsContextProvider>\r\n            <Grid\r\n              container\r\n              direction='column'\r\n              classes={appGridClasses}\r\n            >\r\n\r\n              {/* top 10% */}\r\n              <Grid\r\n                item\r\n                md={12}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                  style={{height: '10vh',}}\r\n                  alignItems='center'\r\n                  justify='space-between'\r\n                >\r\n                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                      <AddTeamButton />\r\n                      <SettingsButton />\r\n                      <SeasonSelect />\r\n                    </div>\r\n                    <h1 style={{color: nbaBlue, margin: '0px 12px 0px 0px'}}>www.leaguemaps.com</h1>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* bottom 90% */}\r\n              <Grid\r\n                item\r\n                md={12}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                >\r\n\r\n                  {/* left 25% */}\r\n                  <Grid\r\n                    item\r\n                    md={3}\r\n                    style={{height: '90vh', overflowY: 'scroll'}}\r\n                    className='sidebar-scrollbar scrollbar-padding-top'\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction='column'\r\n                     \r\n                    >\r\n                        <AllTeamsContainer />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* right 75% */}\r\n                  <Grid\r\n                    item\r\n                    md={9}\r\n                    style={{height: '90vh', overflowY: 'scroll'}}\r\n                    className='visualizations-container scrollbar-padding-top'\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction='column'\r\n                     \r\n                    >\r\n                      <Visualizations />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </SettingsContextProvider>\r\n        </TeamListContextProvider>\r\n      </AllPlayersContextProvider>\r\n    </AppStatsContextProvider>\r\n  );\r\n}\r\n\r\n// Did LeagueMaps help you win money in your fantasy league?\r\n// A modest $9 donation pays to keep LeagueMaps online for another 6 months...just in time for your draft next season\r\n\r\n// https://www.d3-graph-gallery.com/barplot.html\r\n// https://www.apollographql.com/blog/layering-graphql-on-top-of-rest-569c915083ad/\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}