{"version":3,"sources":["Contexts/AllPlayersContext.tsx","Util/StatCategories.ts","Util/Util.ts","Contexts/LeagueContext.tsx","Contexts/SettingsContext.tsx","components/AddTeamButton/AddTeamButton.tsx","components/Team/TeamLabel.tsx","SharedStyles/SharedStyles.ts","components/Team/RosterTable.styles.ts","components/Team/PlayerSelect.tsx","components/Team/UndraftedRow.tsx","components/Team/TeamStatsTable.styles.ts","components/Team/RosterTable.tsx","components/Team/TeamStatsTable.tsx","components/Team/Team.styles.ts","components/Team/Team.tsx","components/AllTeamsContainer/AllTeamsContainer.tsx","App.styles.ts","components/SettingsButton/SettingsPane.styles.ts","components/SettingsButton/SettingsPanel.tsx","components/SettingsButton/SettingsButton.tsx","components/Visualizations/BarChart/BarChart.styles.ts","components/Visualizations/BarChart/StackedBarChart.tsx","components/Visualizations/Visualizations.tsx","components/SeasonSelect/SeasonSelect.style.ts","components/SeasonSelect/SeasonSelect.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allPlayersContext","React","createContext","AllPlayersContextProvider","props","useState","allPlayers","setAllPlayers","Provider","value","children","invertedCategories","excludedCategories","defaultCategories","allStatCategories","filter","category","index","array","indexOf","includes","fullStatNameDictionary","ppg","rpg","apg","mpg","topg","spg","bpg","tpp","ftp","fgp","offReb","defReb","totReb","fgm","fga","tpm","tpa","ftm","fta","pFouls","min","dd2","td3","fgmpg","fgapg","tpmpg","tpapg","ftmpg","ftapg","pfpg","scl","nbaRed","nbaBlue","generateEmptyStats","result","forEach","getAllPlayers","a","year","Date","getFullYear","fetch","playerListResponse","json","playerList","console","log","league","standard","getPlayerStats","personId","currentYear","playerStatsResponse","ok","playerStatsJson","stats","regularSeason","season","total","getSeasonStats","player","selectedYear","selectedStats","find","seasonYear","calcTeamStats","roster","length","map","reduce","acc","cur","calcMin","arr","calcMax","calcMedian","sort","b","calcMean","isBestInCategory","best","max","convertStatStringsToNumbers","input","JSON","parse","stringify","latest","stat","parseFloat","addCalculatedStats","gamesPlayed","leagueContext","LeagueContextProvider","initialTeamList","id","initialLeagueStats","median","teamList","setTeamList","leagueStats","setLeagueStats","addTeam","removeTeam","team","updateLeagueStats","calcLeagueStats","updateTeam","findIndex","settingsContext","SettingsContextProvider","defaultSelectedStats","setSelectedStats","setSelectedYear","useEffect","response","AddTeamButton","useContext","IconButton","onClick","style","color","TeamLabel","thisTeam","defaultDisplayName","name","isEditing","setIsEditingName","displayName","setDisplayName","nameEditorRef","useRef","handleClick","handleChange","target","handleKeyDown","key","current","blur","handleBlur","trim","select","className","TextField","variant","autoFocus","onBlur","onChange","onKeyDown","inputProps","ref","getScrollBarStyles","selector","scrollBarWidth","height","overflowY","width","backgroundColor","borderRadius","useTableContainerStyles","makeStyles","root","marginRight","overflowX","display","border","paddingBottom","opacity","fill","lineHeight","cursor","overflow","textOverflow","paddingLeft","whiteSpace","usePopoverStyles","popper","padding","borderColor","PlayerSelect","teamId","addPlayer","searchString","setSearchString","searchResults","setSearchResults","selectedIndex","setSelectedIndex","rosterIds","resultsContainerRef","lazyLoadHeight","firstName","lastName","isActive","isMatching","currentTarget","dataset","searchStringLower","toLowerCase","firstNameLower","lastNameLower","startsWith","type","label","event","stopPropagation","scrollTop","focused","List","disablePadding","i","offsetTop","ListItem","button","data-person-id","selected","disabled","UndraftedRow","openTooltip","setOpenTooltip","popoverClasses","playerSelect","TableRow","ClickAwayListener","onClickAway","TableCell","Tooltip","title","disableFocusListener","disableHoverListener","disableTouchListener","open","interactive","classes","size","marginLeft","textTransform","textAlign","paddingRight","useTooltipStyles","tooltip","paddingTop","maxHeight","boxShadow","position","top","margin","fontSize","RosterTable","removePlayer","handleTooltipClose","handleTooltipOpen","parseInt","tableContainerClasses","tooltipClasses","document","querySelectorAll","nameCell","scrollWidth","clientWidth","fullName","innerHTML","split","join","toString","UndraftedRows","rows","push","TableContainer","Table","TableBody","playerSeasonStats","playerStatsArray","Object","entries","Avatar","src","toFixed","arrow","data-index","TeamStatsTable","teamStats","selectedTeamStats","placement","useAccordionStyles","maxWidth","minWidth","useAccordionSummaryStyles","minHeight","content","justifyContent","flexGrow","useAccordionDetailStyles","flexDirection","useGridStyles","flexWrap","alignItems","Team","isExpanded","setIsExpanded","accordionClasses","accordionSummaryClasses","accordionDetailClasses","gridClasses","values","calcCategoryLeads","statStringObj","Accordion","expanded","AccordionSummary","alert","AccordionDetails","Grid","container","direction","AllTeamsContainer","teamProps","useAppGridStyles","useSettingsPanelStyles","SettingsPanel","settingsArray","show","dense","data-value","Checkbox","checked","SettingsButton","settingsClasses","setIsOpen","useBarChartStyles","chartCardPadding","chartCardMargin","marginTop","marginBottom","StackedBarChart","statCategory","barChartClasses","barChartCard","querySelector","svgHeight","clientHeight","svgVerticalMargin","svgWidth","svgHorizontalMargin","barHeight","xScale","d3","domain","range","xAxis","barWidths","selectedSeasonStats","individualBars","statValue","xPos","idx","barWidth","teamTotal","svg","attr","selectAll","data","enter","append","d","classed","html","text","call","Card","Visualizations","showStatsArray","keys","useSeasonSelectStyles","SeasonSelect","seasonSelectClasses","FormControl","InputLabel","Select","autoWidth","MenuItem","App","appGridClasses","item","md","justify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9000f5e9.chunk.js","sourcesContent":["import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tDispatch,\r\n\tSetStateAction\r\n} from 'react';\r\nimport { IPlayerSearchResult } from '../Types/types';\r\n\r\nconst allPlayersContext = React.createContext({} as IAllPlayersContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface IAllPlayersContext {\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n\tsetAllPlayers: Dispatch<SetStateAction<Array<IPlayerSearchResult>>>\r\n}\r\n\r\nconst AllPlayersContextProvider = (props: ContextProviderProps): JSX.Element => {\r\n\tconst [allPlayers, setAllPlayers] = useState([] as Array<IPlayerSearchResult>);\r\n\r\n\treturn (\r\n\t\t<allPlayersContext.Provider value={{allPlayers,  setAllPlayers}}>\r\n\t\t\t{props.children}\r\n\t\t</allPlayersContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {AllPlayersContextProvider, allPlayersContext}","// stat categories provided by data.nba.net\r\nexport const providedCategories: Array<string> = [\r\n\t'ppg',\r\n\t'rpg',\r\n\t'apg', \r\n\t'mpg', \r\n\t'topg', \r\n\t'spg', \r\n\t'bpg',\r\n\t'tpp', \r\n\t'ftp', \r\n\t'fgp', \r\n\t'assists',\r\n\t'blocks',\r\n\t'steals',\r\n\t'turnovers',\r\n\t'offReb',\r\n\t'defReb',\r\n\t'totReb',\r\n\t'fgm',\r\n\t'fga',\r\n\t'tpm',\r\n\t'tpa',\r\n\t'ftm',\r\n\t'fta',\r\n\t'pFouls',\r\n\t'points',\r\n\t'gamesPlayed',\r\n\t'gamesStarted',\r\n\t'plusMinus',\r\n\t'min',\r\n\t'dd2',\r\n\t'td3',\r\n\t'seasonYear',\r\n\t'seasonStageId'\r\n];\r\n\r\n// categories not provided by data.nba.net\r\nexport const calculatedCategories = [\r\n\t'fgmpg',\r\n\t'fgapg',\r\n\t'tpmpg',\r\n\t'tpapg',\r\n\t'ftmpg',\r\n\t'ftapg',\r\n\t'pfpg',\r\n\t'scl' /** team stat only */\r\n];\r\n\r\nexport const percentageCategories = [\r\n\t'tpp',\r\n\t'ftp',\r\n\t'fgp'\r\n];\r\n\r\nexport const invertedCategories = [\r\n\t'topg',\r\n\t'turnovers',\r\n\t'pFouls',\r\n\t'pfpg',\r\n];\r\n\r\nexport const excludedCategories = [\r\n\t'seasonStageId',\r\n\t'seasonYear',\r\n];\r\n\r\nexport const defaultCategories = [\r\n\t'scl',\r\n\t'ppg',\r\n\t'rpg',\r\n\t'apg',\r\n\t'topg',\r\n\t'bpg',\r\n\t'spg',\r\n\t'fgmpg',\r\n\t'tpmpg',\r\n\t'ftmpg'\r\n];\r\n\r\nexport const allStatCategories = [...defaultCategories, ...providedCategories,...calculatedCategories]\r\n/** remove duplicates and excluded categories */\r\n.filter((category, index, array) => array.indexOf(category) === index && !excludedCategories.includes(category));\r\n\r\nexport const fullStatNameDictionary: { [key: string]: string } = {\r\n\tppg: 'points per game',\r\n\trpg: 'rebounds per game',\r\n\tapg: 'assists per game',\r\n\tmpg: 'minutes per game',\r\n\ttopg: 'turnovers per game',\r\n\tspg: 'steals per game',\r\n\tbpg: 'blocks per game',\r\n\ttpp: 'three point percentage',\r\n\tftp: 'free throw percentage',\r\n\tfgp: 'field goal percentage',\r\n\toffReb: 'offensive rebounds',\r\n\tdefReb: 'defensive rebounds',\r\n\ttotReb: 'total rebounds',\r\n\tfgm: 'field goals made',\r\n\tfga: 'field goals attempted',\r\n\ttpm: 'three points made',\r\n\ttpa: 'three points attempted',\r\n\tftm: 'free throws made',\r\n\tfta: 'free throws attempted',\r\n\tpFouls: 'personal fouls',\r\n\tmin: 'minutes',\r\n\tdd2: 'double doubles',\r\n\ttd3: 'triple doubles',\r\n\tfgmpg: 'field goals made per game',\r\n\tfgapg: 'field goals attempted per game',\r\n\ttpmpg: 'three points made per game',\r\n\ttpapg: 'three points attempted per game',\r\n\tftmpg: 'free throws made per game',\r\n\tftapg: 'free throws attempted per game',\r\n\tpfpg: 'personal fouls per game',\r\n\tscl: 'stat category leads'\r\n}","import {\r\n\tinvertedCategories,\r\n\tallStatCategories\r\n} from './StatCategories';\r\n\r\nimport {\r\n\tIStatDictionary,\r\n\tILeagueStats,\r\n\tITeam,\r\n\tIPlayerSearchResult,\r\n\tIStatSearchResult,\r\n\tPlayer\r\n} from '../Types/types';\r\n\r\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport const maxTeamSize = 15;\r\n\r\nexport const nbaRed = '#c8102e';\r\nexport const nbaBlue = '#1d428a';\r\n\r\nexport const generateEmptyStats = (): IStatDictionary => {\r\n\tconst result: IStatDictionary = {};\r\n\tallStatCategories.forEach(category => result[category] = 0);\r\n\treturn result;\r\n}\r\n\r\nexport const getAllPlayers = async (year: number = (new Date()).getFullYear()): Promise<Array<IPlayerSearchResult>> => {\r\n\tlet playerListResponse = await fetch(`https://data.nba.net/prod/v1/${year}/players.json`);\r\n\tlet playerList = await playerListResponse.json();\r\n\tconsole.log(playerList.league.standard);\r\n\treturn playerList.league.standard;\r\n}\r\n\r\nexport const getPlayerStats = async (personId: string): Promise<IStatSearchResult | any> => {\r\n\tlet currentYear = (new Date()).getFullYear();\r\n\tlet playerStatsResponse;\r\n\r\n\twhile (!playerStatsResponse || !playerStatsResponse.ok) {\r\n\t\tplayerStatsResponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players/${personId}_profile.json`)\r\n\t\tif (!playerStatsResponse.ok) {\r\n\t\t\tcurrentYear--;\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst playerStatsJson = await playerStatsResponse.json();\r\n\tconsole.log(playerStatsJson.league.standard)\r\n\treturn playerStatsJson.league.standard ??\r\n\t{\r\n\t\tstats: {\r\n\t\t\tregularSeason: {\r\n\t\t\t\tseason: [{\r\n\t\t\t\t\ttotal: generateEmptyStats()\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport const getSeasonStats = (player: Player, selectedYear: number | Promise<number>): IStatDictionary => {\r\n\tconst selectedStats = player.stats.regularSeason.season\r\n\t\t.find((season) => season.seasonYear === selectedYear)?.total;\r\n\treturn selectedStats ?? generateEmptyStats();\r\n}\r\n\r\nexport const calcTeamStats = (roster: Array<Player>, selectedYear: number | Promise<number>): IStatDictionary => {\r\n\tif (!roster.length) { return generateEmptyStats() };\r\n\tconst result: IStatDictionary = {};\r\n\tallStatCategories.forEach(category => {\r\n\t\tresult[category] = roster\r\n\t\t\t.map(player => getSeasonStats(player, selectedYear)[category])\r\n\t\t\t.reduce((acc, cur) => acc + cur);\r\n\t});\r\n\treturn result;\r\n}\r\n\r\nexport const calcLeagueStats = (teamList: Array<ITeam>): ILeagueStats => {\r\n\tconst result: ILeagueStats = {\r\n\t\tmin: {},\r\n\t\tmedian: {},\r\n\t\tmax: {}\r\n\t};\r\n\r\n\tallStatCategories.forEach(category => {\r\n\t\tresult.min[category] = calcMin(teamList.map(team => team.stats[category]));\r\n\t\tresult.median[category] = calcMedian(teamList.map(team => team.stats[category]));\r\n\t\tresult.max[category] = calcMax(teamList.map(team => team.stats[category]));\r\n\t})\r\n\r\n\treturn result;\r\n};\r\n\r\nexport const calcMin = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc < cur ? acc : cur);\r\n}\r\n\r\nexport const calcMax = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) =>  acc > cur ? acc : cur);\r\n}\r\n\r\nexport const calcMedian = (arr: Array<number>): number => {\r\n\tarr.sort((a, b) => a - b);\r\n\treturn (\r\n\t\tarr.length % 2 ?\r\n\t\tarr[(arr.length - 1) / 2] :\r\n\t\tcalcMean([arr[arr.length / 2], arr[(arr.length / 2) - 1]])\r\n\t);\r\n}\r\n\r\nexport const calcMean = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc + cur) / arr.length ;\r\n}\r\n\r\nexport const isBestInCategory = (value: number, category: string, best: ILeagueStats): boolean => {\r\n\tif (value === 0 && !invertedCategories.includes(category)) {\r\n\t\treturn false\r\n\t}\r\n\telse if (invertedCategories.includes(category)) {\r\n\t\treturn value === best.min[category];\r\n\t} else {\r\n\t\treturn value === best.max[category];\r\n\t}\r\n}\r\n\r\n/**\r\n * For whatever reason, data.nba.net provides statistics as strings instead of numbers.\r\n * This function takes a player's stat object, and returns a new object with all\r\n * strings converted into numbers. \r\n */ \r\nexport const convertStatStringsToNumbers = (input: any): any => {\r\n\tconst result = JSON.parse(JSON.stringify(input));\r\n\tconst { latest, regularSeason } = result;\r\n\tconst { season } = regularSeason;\r\n\r\n\tfor (const stat in latest) {\r\n\t\tif (typeof latest[stat] === 'string') {\r\n\t\t\tlatest[stat] = latest[stat] !== '-1' ? parseFloat(latest[stat]) : 0\r\n\t\t} \r\n\t}\r\n\t\r\n\tfor (const year in season) {\r\n\t\tfor (const category in season[year].total) {\r\n\t\t\tconst stat = season[year].total[category];\r\n\t\t\tif (typeof stat === 'string') {\r\n\t\t\t\tseason[year].total[category] = stat !== '-1' ? parseFloat(stat) : 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const addCalculatedStats = (input: IStatDictionary): IStatDictionary => {\r\n\treturn { \r\n\t\t...input,\r\n\t\tfgmpg: input.fgm / input.gamesPlayed,\r\n\t\tfgapg: input.fga / input.gamesPlayed,\r\n\t\ttpmpg: input.tpm / input.gamesPlayed,\r\n\t\ttpapg: input.tpa / input.gamesPlayed,\r\n\t\tftmpg: input.ftm / input.gamesPlayed,\r\n\t\tftapg: input.fta / input.gamesPlayed,\r\n\t\tpfpg: input.pFouls / input.gamesPlayed\r\n\t};\r\n}","import React, { useState } from 'react';\r\nimport { ILeagueStats, ITeam } from '../Types/types';\r\nimport { calcLeagueStats, generateEmptyStats } from '../Util/Util';\r\nimport { allStatCategories } from '../Util/StatCategories';\r\n\r\nconst leagueContext = React.createContext({} as ILeagueContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface ILeagueContext {\r\n\tteamList: Array<ITeam>;\r\n\tsetTeamList: React.Dispatch<React.SetStateAction<ITeam[]>>;\r\n\taddTeam: () => void;\r\n\tupdateTeam: (team: ITeam) => void;\r\n\tremoveTeam: (id: number) => void;\r\n\tleagueStats: ILeagueStats;\r\n\tupdateLeagueStats: () => void;\r\n}\r\n\r\nconst LeagueContextProvider = (props: ContextProviderProps) => {\r\n\r\n\tconst initialTeamList: Array<ITeam> = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\troster: [],\r\n\t\t\tstats: generateEmptyStats(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\troster: [],\r\n\t\t\tstats: generateEmptyStats(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\troster: [],\r\n\t\t\tstats: generateEmptyStats(),\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\troster: [],\r\n\t\t\tstats: generateEmptyStats(),\r\n\t\t}\r\n\t];\r\n\r\n\tconst initialLeagueStats: ILeagueStats  = { min: {}, median: {}, max: {} };\r\n\tallStatCategories.forEach(category => {\r\n\t\tinitialLeagueStats.min[category] = 0;\r\n\t\tinitialLeagueStats.median[category] = 0;\r\n\t\tinitialLeagueStats.max[category] = 0;\r\n\t})\r\n\r\n\tconst [ teamList, setTeamList ] = useState(initialTeamList);\r\n\tconst [ leagueStats, setLeagueStats ] = useState(initialLeagueStats);\r\n\t\r\n\tconst addTeam = () => {\r\n\t\tsetTeamList([\r\n\t\t\t...teamList,\r\n\t\t\t{\r\n\t\t\t\tid: (teamList[teamList.length - 1]?.id ?? 0) + 1,\r\n\t\t\t\troster: [],\r\n\t\t\t\tstats: generateEmptyStats()\r\n\t\t\t}\r\n\t\t])\r\n\t}\r\n\r\n\tconst removeTeam = (id: number) => {\r\n\t\tsetTeamList(teamList.filter(team => team.id !== id))\r\n\t}\r\n\r\n\tconst updateTeam = (team: ITeam) => {\r\n\t\tconst { id } = team;\r\n\t\tconst index = teamList.findIndex(team => team.id === id);\r\n\t\tteamList[index] = team;\r\n\t\tsetTeamList([...teamList]);\r\n\t}\r\n\r\n\tconst updateLeagueStats = () => {\r\n\t\tconst leagueStats = calcLeagueStats(teamList);\r\n\t\tsetLeagueStats(leagueStats);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<leagueContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tteamList,\r\n\t\t\t\taddTeam,\r\n\t\t\t\tremoveTeam,\r\n\t\t\t\tsetTeamList,\r\n\t\t\t\tleagueStats,\r\n\t\t\t\tupdateLeagueStats,\r\n\t\t\t\tupdateTeam\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</leagueContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { LeagueContextProvider, leagueContext }","import React, {\r\n\tDispatch,\r\n\tSetStateAction,\r\n\tuseEffect,\r\n\tuseState\r\n} from 'react';\r\nimport {\r\n\tdefaultCategories,\r\n\tallStatCategories\r\n } from '../Util/StatCategories'\r\n\r\nconst settingsContext = React.createContext({} as ISettingsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface ISettingsContext {\r\n\tselectedStats: { [key: string]: boolean };\r\n\tsetSelectedStats:  Dispatch<SetStateAction<{ [key: string]: boolean }>>;\r\n\tselectedYear: number | Promise<number>;\r\n\tsetSelectedYear: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst SettingsContextProvider = (props: ContextProviderProps) => {\r\n\tconst defaultSelectedStats: any = {};\r\n\tallStatCategories.forEach(category => (\r\n\t\tdefaultSelectedStats[category] = defaultCategories.includes(category)\r\n\t));\r\n\r\n\tconst [ selectedStats, setSelectedStats ] = useState(defaultSelectedStats);\r\n\r\n\tconst [ selectedYear, setSelectedYear ] = useState((new Date()).getFullYear());\r\n\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tlet currentYear = (new Date()).getFullYear();\r\n\t\t\tlet response;\r\n\t\t\twhile (!response || !response.ok) {\r\n\t\t\t\tresponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players.json`);\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tcurrentYear--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetSelectedYear(2019);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<settingsContext.Provider value={{selectedStats, selectedYear, setSelectedYear, setSelectedStats}}>\r\n\t\t\t{props.children}\r\n\t\t</settingsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { SettingsContextProvider, settingsContext }","import React from 'react';\r\nimport { IconButton } from '@material-ui/core'\r\nimport { leagueContext } from '../../Contexts/LeagueContext';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\n\r\nexport const AddTeamButton = () => {\r\n\tconst { addTeam } = React.useContext(leagueContext);\r\n\t\r\n\tconst handleClick = () => {\r\n\t\taddTeam()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tonClick={handleClick}\r\n\t\t\tstyle={{color: '#666666'}}\r\n\t\t>\r\n\t\t\t<GroupAddIcon />\r\n\t\t</IconButton>\r\n\t)\r\n}","import React, {\r\n  useState,\r\n  useContext,\r\n  useRef,\r\n  ChangeEvent,\r\n  KeyboardEvent,\r\n  useEffect\r\n} from 'react';\r\nimport { maxTeamSize, isBestInCategory } from '../../Util/Util'\r\nimport { TextField } from '@material-ui/core';\r\nimport { leagueContext } from '../../Contexts/LeagueContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\n\r\n\r\ninterface ITeamLabelProps {\r\n  id: number;\r\n}\r\n\r\nexport const TeamLabel = ({ id }: ITeamLabelProps): JSX.Element => {\r\n  const { teamList, setTeamList, leagueStats, updateTeam } = useContext(leagueContext);\r\n  const thisTeam = teamList.find(team => team.id === id)!;\r\n  const { stats: teamStats } = thisTeam;\r\n\r\n  const { selectedStats } = useContext(settingsContext);\r\n  \r\n  const defaultDisplayName = `Team ${id}`;\r\n\r\n  const { name = defaultDisplayName, roster } = thisTeam;\r\n  \r\n  const [ isEditing, setIsEditingName ] = useState(false);\r\n  const [ displayName, setDisplayName ] = useState(name);\r\n\r\n  const nameEditorRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    setIsEditingName(true);\r\n  }\r\n\r\n  const handleChange = ({ target }: ChangeEvent<{value: string}>) => {\r\n    setDisplayName(target.value);\r\n  }\r\n\r\n  const handleKeyDown = ({ key }: KeyboardEvent<HTMLInputElement>) => {\r\n    key === 'Enter' && nameEditorRef.current!.blur();\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    displayName.trim() || setDisplayName(defaultDisplayName);\r\n    setIsEditingName(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isEditing) {\r\n      nameEditorRef.current!.select();\r\n    } else {\r\n      thisTeam.name = displayName.trim();\r\n      updateTeam(thisTeam);\r\n    }\r\n  }, [isEditing]);\r\n\r\n  const label = (): JSX.Element => {\r\n    return (\r\n      <span\r\n        className='label'\r\n        onClick={handleClick}\r\n      >\r\n        {name}\r\n      </span>\r\n    )\r\n  }\r\n\r\n  const nameEditor = (): JSX.Element => {\r\n    return (\r\n      <TextField\r\n        variant='outlined'\r\n        value={displayName}\r\n        autoFocus\r\n        onBlur={handleBlur}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        inputProps={{ ref: nameEditorRef, /*maxLength: 12 */ }}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className='teamLabelContainer'\r\n    >\r\n      {/* <RadioButtonUncheckedIcon\r\n        style={{\r\n          backgroundColor: color,\r\n          fill: 'white',\r\n          borderRadius: '20px',\r\n        }}\r\n      /> */}\r\n      <span>({roster.length}{roster.length >= maxTeamSize && '*'})&nbsp;</span>\r\n      {isEditing ? nameEditor() : label()}\r\n      {/* <span>&nbsp; Leads {teamStats.cl} {teamStats.cl === 1 ? 'Category' : 'Categories'}</span> */}\r\n    </div>\r\n  )\r\n}","export const getScrollBarStyles = (selector: string, scrollBarWidth?: number, height?: number | string) => {\r\n  return {\r\n    [`& ${selector}`]: {\r\n      overflowY: 'scroll',\r\n      height: height ?? 'auto'\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar`]: {\r\n      width: scrollBarWidth ?? 4\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-track`]: {\r\n      backgroundColor: '#0004',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-thumb`]: {\r\n      backgroundColor: '#FFFA',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    }\r\n  }\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\nimport { nbaRed, nbaBlue } from '../../Util/Util';\r\n\r\nconst avatarSize = 28\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n\troot: {\r\n\t\t// to do: merge team table styles\r\n\t\theight: 'calc(22.5vh - 6px - 6px - 24px - 6px - 6px) !important',\r\n\t\twidth: '60%',\r\n\t\tmarginRight: 3,\r\n\t\toverflowY: 'scroll',\r\n\t\toverflowX: 'hidden',\r\n\t\t'& table': {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\t'& tbody': {\r\n\t\t\twidth: '100%',\r\n\t\t},\r\n\t\t'& tr': {\r\n\t\t\twidth: '100%',\r\n\t\t\t\r\n\t\t},\r\n\t\t'& td': {\r\n\t\t\tdisplay: 'inline-block',\r\n\t\t\theight: 28,\r\n\t\t\tborder: 'none',\r\n\t\t\tpaddingBottom: 1\r\n\t\t},\r\n\t\t'& .button-cell' : {\r\n\t\t\twidth: 28,\r\n\t\t},\r\n\t\t'& .no-stats ': {\r\n\t\t\topacity: .25\r\n\t\t},\r\n\t\t'& .headshot-cell' : {\r\n\t\t\twidth: 28\r\n\t\t},\r\n\t\t'& .headshot' : {\r\n\t\t\theight: avatarSize,\r\n\t\t\twidth: avatarSize,\r\n\t\t\tbackgroundColor: 'lightgray'\r\n\t\t},\r\n\t\t'& .mock-player-icon': {\r\n\t\t\theight: avatarSize,\r\n\t\t\twidth: avatarSize,\r\n\t\t\tfill: 'white',\r\n\t\t\tbackgroundColor: 'black',\r\n\t\t\tborderRadius: '15px',\r\n\t\t},\r\n\t\t'& .name-cell' : {\r\n\t\t\twidth: 'calc(100% - 30px - 30px - 6px)',\r\n\t\t\tlineHeight: '32px',\r\n\t\t\tcursor: 'default',\r\n\t\t\toverflow: 'hidden',\r\n\t\t\ttextOverflow: 'ellipsis',\r\n\t\t\tpaddingLeft: 6\r\n\t\t},\r\n\t\t'& .name-cell div' : {\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100%',\r\n\t\t\toverflow: 'inherit',\r\n\t\t\ttextOverflow: 'inherit',\r\n\t\t\twhiteSpace: 'nowrap',\r\n\t\t\tcursor: 'pointer',\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const usePopoverStyles = makeStyles({\r\n\tpopper: {\r\n\t\t'& .MuiTooltip-tooltip': {\r\n\t\t\tbackgroundColor: '#fff',\r\n\t\t\tpadding: 0,\r\n\t\t},\r\n\t\t'& .MuiFormLabel-root.Mui-focused': {\r\n      color: nbaBlue,\r\n    },\r\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline' : {\r\n      borderColor: nbaBlue\r\n    },\r\n\t\t...getScrollBarStyles('.MuiList-root', 8, 200),\r\n\t\t'& .LazyLoad.odd': {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n\t\t'& .LazyLoad.even': {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& .MuiListItem-root' : {\r\n\t\t\tcolor: '#000',\r\n\t\t\theight: 40\r\n\t\t},\r\n\t\t'& .MuiListItem-root:hover, & .Mui-selected' : {\r\n\t\t\t// MuiListItem-root.Mui-selected:hover will override this in production version without !improtant\r\n\t\t\tbackgroundColor: `${nbaBlue} !important`,\r\n\t\t\tcolor: '#fff'\r\n\t\t},\r\n\t}\r\n})","import React, {\r\n\tuseState,\r\n\tChangeEvent,\r\n\tMouseEvent,\r\n\tKeyboardEvent,\r\n\tuseEffect,\r\n\tuseRef,\r\n\tuseContext\r\n} from 'react';\r\nimport { List, ListItem, TextField} from '@material-ui/core'\r\nimport { Player, IPlayerSearchResult } from '../../Types/types';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport LazyLoad from 'react-lazy-load';\r\nimport { allPlayersContext } from '../../Contexts/AllPlayersContext';\r\n\r\n\r\nexport interface IPlayerSelectProps {\r\n\tteamId?: number;\r\n\troster?: Array<Player>;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tselectedYear: number;\r\n}\r\n\r\nexport const PlayerSelect = (props: IPlayerSelectProps): JSX.Element => {\r\n\tconst { teamId, roster, addPlayer } = props;\r\n\t\r\n\tconst { allPlayers } = useContext(allPlayersContext);\r\n\r\n\tconst [ searchString, setSearchString ] = useState('');\r\n\tconst [ searchResults, setSearchResults ] = useState(allPlayers);\r\n\tconst [ selectedIndex, setSelectedIndex ] = useState(0);\r\n\r\n\tconst rosterIds: Array<string> | undefined = roster?.map(player => player.personId);\r\n\r\n\tconst resultsContainerRef = useRef<HTMLUListElement>(null);\r\n\r\n\tconst lazyLoadHeight = 40;\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSearchResults(allPlayers.filter(({ firstName, lastName, isActive }) => isMatching(firstName, lastName) && isActive));\r\n\t\tsetSelectedIndex(0);\r\n\t}, [searchString])\r\n\r\n\tconst handleChange = ({target}: ChangeEvent<{value: string}>) => {\r\n\t\tconst { value } = target;\r\n\t\tsetSearchString(value);\r\n\t}\r\n\r\n\tconst handleClick = ({currentTarget}: MouseEvent<HTMLElement>): void => {\r\n\t\tconst { personId } = currentTarget.dataset;\r\n\t\taddPlayer(personId!, allPlayers);\r\n\t\tsetSearchString('');\r\n\t}\r\n\r\n\tconst handleKeyDown = (event: KeyboardEvent<HTMLDivElement>): void => {\r\n\t\tevent.stopPropagation();\r\n\t\tconst { key } = event;\r\n\t\tif (key === 'Enter' && searchResults.length) {\r\n\t\t\tconst { personId } = searchResults[selectedIndex];\r\n\t\t\tif (!rosterIds?.includes(personId)) {\r\n\t\t\t\taddPlayer(personId, allPlayers);\r\n\t\t\t\tsetSearchString('');\r\n\t\t\t}\r\n\t\t} else if (key === 'ArrowDown') {\r\n\t\t\tsetSelectedIndex(selectedIndex < searchResults.length - 1 ? selectedIndex + 1 : searchResults.length - 1);\r\n\t\t\tresultsContainerRef.current!.scrollTop = selectedIndex * lazyLoadHeight + lazyLoadHeight\r\n\t\t} else if (key === 'ArrowUp') {\r\n\t\t\tsetSelectedIndex(selectedIndex > 0 ? selectedIndex - 1 : 0);\r\n\t\t\tresultsContainerRef.current!.scrollTop = selectedIndex * lazyLoadHeight - lazyLoadHeight\r\n\t\t}\r\n\t}\r\n\r\n\tconst isMatching = (firstName: string, lastName: string): boolean => {\r\n\t\tconst searchStringLower = searchString.toLowerCase();\r\n\t\tconst firstNameLower = firstName.toLowerCase();\r\n\t\tconst lastNameLower = lastName.toLowerCase();\r\n\t\treturn (\r\n\t\t\tfirstNameLower.startsWith(searchStringLower) ||\r\n\t\t\tlastNameLower.startsWith(searchStringLower) ||\r\n\t\t\t`${firstNameLower} ${lastNameLower}`.startsWith(searchStringLower)\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tlabel=\"Draft Player\"\r\n\t\t\t\tvalue={searchString}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\t\tautoFocus\r\n\t\t\t\tfocused\r\n\t\t\t/>\r\n\t\t\t<List\r\n\t\t\t\tdisablePadding={true}\r\n\t\t\t\tref={resultsContainerRef}\r\n\t\t\t>\r\n\t\t\t\t{searchResults.map(({ personId, firstName, lastName }, i) => (\r\n\t\t\t\t\t<LazyLoad\r\n\t\t\t\t\t\tkey={`lazyload-${teamId}-${personId}`}\r\n\t\t\t\t\t\theight={lazyLoadHeight}\r\n\t\t\t\t\t\toffsetTop={lazyLoadHeight * i}\r\n\t\t\t\t\t\t/* way more performant than CSS nth-child selector */\r\n\t\t\t\t\t\tclassName={i % 2 ? 'odd' : 'even'}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tbutton\r\n\t\t\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\t\t\tdata-person-id={personId}\r\n\t\t\t\t\t\t\tselected={selectedIndex === i && !rosterIds?.includes(personId)}\r\n\t\t\t\t\t\t\tdisabled={rosterIds?.includes(personId)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{firstName} {lastName}\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t</LazyLoad>\r\n\t\t\t\t))}\r\n\t\t\t</List>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useEffect, useContext, useState } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTooltip,\r\n\tClickAwayListener,\r\n} from '@material-ui/core'\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { usePopoverStyles } from './RosterTable.styles';\r\nimport { mockComponent } from 'react-dom/test-utils';\r\n\r\nexport interface IUndraftedRowProps {\r\n\tteamId: number;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\troster: Array<Player>;\r\n\tselectedYear: number;\r\n}\r\n\t\r\nexport const UndraftedRow = (props: IUndraftedRowProps): JSX.Element => {\r\n\tconst { addPlayer, teamId, roster, selectedYear } = props;\r\n\t\r\n\tconst [ openTooltip, setOpenTooltip ] = useState(false);\r\n\t\r\n\tconst popoverClasses = usePopoverStyles();\r\n\r\n\tconst handleTooltipClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n\t\tsetOpenTooltip(false)\r\n\t};\r\n\t\r\n\tconst handleTooltipOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tevent?.stopPropagation();\r\n\t\tsetOpenTooltip(true);\r\n\t};\r\n\r\n\tconst playerSelect = <PlayerSelect \r\n\t\tteamId={teamId}\r\n\t\troster={roster}\r\n\t\taddPlayer={addPlayer}\r\n\t\tkey={`player-select-${teamId}`}\r\n\t\tselectedYear={selectedYear}\r\n\t/>\r\n\r\n\treturn (\r\n\t\t<TableRow className='undrafted-row'>\r\n\t\t\t<ClickAwayListener onClickAway={handleTooltipClose}>\r\n\t\t\t\t<TableCell className='button-cell'>\r\n\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\ttitle={playerSelect}\r\n\t\t\t\t\t\tdisableFocusListener\r\n\t\t\t\t\t\tdisableHoverListener\r\n\t\t\t\t\t\tdisableTouchListener\r\n\t\t\t\t\t\topen={openTooltip}\r\n\t\t\t\t\t\tinteractive\r\n\t\t\t\t\t\tclasses={popoverClasses}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\tonClick={handleTooltipOpen}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</TableCell>\r\n\t\t\t</ClickAwayListener>\r\n\t\t\t<TableCell className='headshot-cell no-stats'>\r\n\t\t\t\t<AccountCircleIcon className='mock-player-icon' />\r\n\t\t\t</TableCell>\r\n\t\t\t<TableCell className='name-cell no-stats'>\r\n\t\t\t\tUndrafted\r\n\t\t\t</TableCell>\r\n\t\t</TableRow>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util/Util';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n    root: {\r\n       \t// to do: merge team table styles\r\n        height: 'calc(22.5vh - 6px - 6px - 24px - 6px - 6px) !important',\r\n        width: '40%',\r\n        marginLeft: 3,\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n        '& table': {\r\n            width: '100%'\r\n        },\r\n        '& tbody' : {\r\n            width: '100%',\r\n        },\r\n        '& tr': {\r\n            width: '100%',\r\n            \r\n        },\r\n        '& td': {\r\n            height: 28,\r\n            lineHeight: '32px',\r\n            display: 'inline-block',\r\n            border: 'none',\r\n            paddingBottom: 1\r\n        },\r\n        '& .stat-label' : {\r\n            textTransform: 'uppercase',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            textAlign: 'left',\r\n            paddingLeft: 6,\r\n            width: 'calc(100% - 50px - 12px)',\r\n        },\r\n        '& .stat-value' : {\r\n            width: 50,\r\n            paddingRight: 6,\r\n            textAlign: 'right',\r\n        },\r\n        '& .best' : {\r\n            backgroundColor: nbaBlue,\r\n            color: 'white'\r\n        }\r\n    }\r\n})\r\n\r\nexport const useTooltipStyles = makeStyles({\r\n    popper: {\r\n        ...getScrollBarStyles('.MuiTooltip-tooltip'),\r\n    },\r\n    tooltip: {\r\n        paddingTop: 0,\r\n        overflowY: 'scroll',\r\n        color: '#000',\r\n        maxHeight: '50vh',\r\n        backgroundColor: 'white',\r\n        boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\r\n        '& .player-label': {\r\n            position: 'sticky',\r\n            top: 0,\r\n            backgroundColor: 'white',\r\n            padding: '2px 0px'\r\n        },\r\n        '& p' : {\r\n            margin: '6px 0px',\r\n            fontSize: 14\r\n        },\r\n        '& tr:nth-child(odd)' : {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& tr:nth-child(even)' : {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n        '& td' : {\r\n            border: 'none',\r\n            textTransform: 'uppercase'\r\n        },\r\n        '& .stat-value' : {\r\n            textAlign: 'right'\r\n        }\r\n    }\r\n})\r\n","import React, {\r\n\tuseEffect,\r\n\tuseContext\r\n} from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tAvatar,\r\n\tTooltip,\r\n\tClickAwayListener,\r\n\tCard\r\n} from '@material-ui/core'\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\nimport { useTableContainerStyles } from './RosterTable.styles';\r\nimport { maxTeamSize, getSeasonStats } from '../../Util/Util';\r\nimport { UndraftedRow } from './UndraftedRow'\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { useTooltipStyles } from './TeamStatsTable.styles';\r\nimport { settingsContext } from '../../Contexts/SettingsContext' \r\n\r\n\r\nexport interface IRosterTableProps {\r\n\tid: number;\r\n\troster: Array<Player>;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tremovePlayer: (personId: string) => void;\r\n}\r\n\r\nexport const RosterTable = (props: IRosterTableProps): JSX.Element => {\r\n\tconst { id, roster, removePlayer, addPlayer } = props;\r\n\r\n\tconst { selectedYear } = useContext(settingsContext);\r\n\r\n\tconst [openTooltip, setOpenTooltip] = React.useState<number | null>(null);\r\n\r\n\tconst handleTooltipClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n\t\tevent.stopPropagation();\r\n\t\tsetOpenTooltip(null);\r\n\r\n\t};\r\n\t\r\n\tconst handleTooltipOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tevent.stopPropagation();\r\n\t\tconst { index } = event.currentTarget.dataset;\r\n\t\tsetOpenTooltip(parseInt(index!))\r\n  };\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\tconst tooltipClasses = useTooltipStyles();\r\n\r\n\t// only display player's first initial if displaying full name causes text overflow\r\n\tuseEffect(() => {\r\n\t\tconst nameCells = document.querySelectorAll(`.roster-table-${id} .name-cell div`);\r\n\t\tnameCells.forEach(nameCell => {\r\n\t\t\tif (nameCell.scrollWidth > nameCell.clientWidth) {\r\n\t\t\t\tconst fullName = nameCell.innerHTML.split(' ');\r\n\t\t\t\tfullName[0] = `${fullName[0][0]}. `;\r\n\t\t\t\tnameCell.innerHTML = fullName.join('').toString();\r\n\t\t\t}\r\n\t\t})\r\n\t}, [roster.length])\r\n\r\n\t\r\n\tconst UndraftedRows = () => {\r\n\t\tconst rows: Array<JSX.Element> = [];\r\n\t\twhile (roster.length + rows.length < maxTeamSize) {\r\n\t\t\trows.push(\r\n\t\t\t\t<UndraftedRow\r\n\t\t\t\t\tkey={`undrafted-table-row-${rows.length}`}\r\n\t\t\t\t\tteamId={id}\r\n\t\t\t\t\troster={roster}\r\n\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\tselectedYear={selectedYear as number}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn <>{rows}</>\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\t\r\n\t\t\t<Table padding='none' size='small' className={`roster-table-${id}`}>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{roster.map((player: Player, i) => {\r\n\t\t\t\t\t\tconst { personId, firstName, lastName } = player;\r\n\r\n\t\t\t\t\t\tconst playerSeasonStats = getSeasonStats(player, selectedYear as number);\r\n\t\t\t\t\t\tconst playerStatsArray = Object.entries(playerSeasonStats);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableRow key={`roster-table-row-${id}-${personId}`}>\r\n\t\t\t\t\t\t\t\t<TableCell className='button-cell'>\r\n\t\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => removePlayer(personId)}\r\n\t\t\t\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\tclassName={`headshot-cell ${playerSeasonStats.min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\tsrc={`https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/${personId}.png`}\r\n\t\t\t\t\t\t\t\t\t\tclassName='headshot'\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\tclassName={`name-cell ${playerSeasonStats.min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<ClickAwayListener onClickAway={handleTooltipClose}>\r\n\t\t\t\t\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='player-label'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{firstName} {lastName}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{selectedYear}-{(selectedYear as number) + 1}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Regular Season</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Table padding='none' size='small'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{playerStatsArray.map(([category, value]) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={`total-stats-row-${id}-${category}`}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{category}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell className='stat-value'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{value.toFixed(1)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tarrow\r\n\t\t\t\t\t\t\t\t\t\t\tdisableFocusListener\r\n\t\t\t\t\t\t\t\t\t\t\tdisableHoverListener\r\n\t\t\t\t\t\t\t\t\t\t\tdisableTouchListener\r\n\t\t\t\t\t\t\t\t\t\t\topen={openTooltip === i}\r\n\t\t\t\t\t\t\t\t\t\t\tinteractive\r\n\t\t\t\t\t\t\t\t\t\t\tclasses={tooltipClasses}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<div onClick={handleTooltipOpen} data-index={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{firstName} {lastName}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t</ClickAwayListener>\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t<UndraftedRows />\r\n\t\t\t\t</TableBody>\t\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import React, { useContext, useEffect, useRef } from 'react';\r\nimport { leagueContext } from '../../Contexts/LeagueContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport {\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tTooltip\r\n} from '@material-ui/core'\r\nimport { useTableContainerStyles } from './TeamStatsTable.styles';\r\nimport { isBestInCategory } from '../../Util/Util';\r\nimport { fullStatNameDictionary } from '../../Util/StatCategories';\r\nimport { IStatDictionary } from '../../Types/types';\r\n\r\nexport interface ITeamStatsTableProps {\r\n\tteamId: number;\r\n\tstats: IStatDictionary;\r\n}\r\n\r\nexport const TeamStatsTable = (props: ITeamStatsTableProps): JSX.Element => {\r\n\tconst { teamId, stats: teamStats } = props;\r\n\r\n\tconst { leagueStats } = useContext(leagueContext);\r\n\tconst { selectedStats } = useContext(settingsContext);\r\n\r\n\tconst selectedTeamStats = Object.entries(teamStats)\r\n\t\t.filter(([category]) => selectedStats[category]);\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\r\n\t\t\t<Table padding='none' size='small'>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{selectedTeamStats.map(([ category, value ]) => (\r\n\t\t\t\t\t\t<TableRow key={`total-stats-row-${teamId}-${category}`}>\r\n\t\t\t\t\t\t\t{fullStatNameDictionary[category] ? (\r\n\t\t\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\t\t\ttitle={fullStatNameDictionary[category]}\r\n\t\t\t\t\t\t\t\t\tplacement='top'\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<TableCell className='stat-label'>{category}</TableCell>\r\n\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<TableCell className='stat-label'>{category}</TableCell>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\tclassName={`stat-value ${isBestInCategory(value, category, leagueStats) ? 'best' : ''}`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{value?.toFixed(1)}\r\n\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const useAccordionStyles = makeStyles({\r\n\troot: {\r\n\t\tmaxWidth: 'calc(100% - 24px)',\r\n\t\tmargin: '0px 6px 6px !important',\r\n\t\tpaddingTop: 6,\r\n\t\tpaddingRight: 6,\r\n\t\tpaddingBottom:6,\r\n\t\tpaddingLeft: 6,\r\n\t\tminWidth: 'fit-content;'\r\n\t}\r\n})\r\n\r\nexport const useAccordionSummaryStyles = makeStyles({\r\n\troot: {\r\n\t\tminHeight: 'fit-content !important',\r\n\t\tpadding: '0px',\r\n\t\t'& :hover': {\r\n\t\t\tcursor: 'default'\r\n\t\t},\r\n\t},\r\n\tcontent: {\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tmargin: '0px !important',\r\n\t\t'& .MuiTextField-root': {\r\n\t\t\twidth: 140\r\n\t\t},\r\n\t\t'& input[type=text]' : {\r\n\t\t\tpadding: '2px 6px',\r\n\t\t},\r\n\t\t'& .teamLabelContainer': {\r\n\t\t\tflexGrow: 2,\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tpaddingLeft: '6px'\r\n\t\t},\r\n\t\t'& .label': {\r\n\t\t\tcursor: 'text'\r\n\t\t},\r\n\t\t'& button' : {\r\n\t\t\tpadding: 0\r\n\t\t}\r\n\t},\r\n\tfocused: {\r\n\t\tbackgroundColor: 'unset !important'\r\n\t}\r\n});\r\n\r\nexport const useAccordionDetailStyles = makeStyles({\r\n\troot: {\r\n\t\tflexDirection: 'column',\r\n\t\tpadding: '6px 0px 0px 0px'\r\n\t}\r\n})\r\n\r\nexport const useGridStyles = makeStyles({\r\n\troot: {\r\n\t\tflexWrap: 'nowrap',\r\n\t\talignItems: 'stretch',\r\n\t\t'& tr:nth-child(odd)' : {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& tr:nth-child(even)' : {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n\t\t...getScrollBarStyles('.MuiTableContainer-root')\r\n\t}\r\n})","import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseContext,\r\n\tMouseEvent,\r\n\tChangeEvent\r\n} from 'react';\r\nimport {\r\n\tAccordion,\r\n\tAccordionSummary,\r\n\tAccordionDetails,\r\n\tGrid,\r\n\tIconButton,\r\n} from '@material-ui/core'\r\nimport { ITeam, IStatDictionary } from '../../Types/types';\r\nimport { leagueContext } from '../../Contexts/LeagueContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { \r\n\tcalcTeamStats,\r\n\tgetPlayerStats,\r\n\tconvertStatStringsToNumbers,\r\n\taddCalculatedStats,\r\n\tisBestInCategory\r\n} from '../../Util/Util';\r\nimport { TeamLabel } from './TeamLabel';\r\nimport { RosterTable } from './RosterTable';\r\nimport { TeamStatsTable } from './TeamStatsTable';\r\nimport { \r\n\tuseAccordionStyles,\r\n\tuseAccordionSummaryStyles,\r\n\tuseAccordionDetailStyles,\r\n\tuseGridStyles\r\n} from './Team.styles';\r\n\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport CropDinIcon from '@material-ui/icons/CropDin';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\n\r\nexport const Team = (props: ITeam) => {\r\n\tconst { id } = props;\r\n\tconst [ isExpanded, setIsExpanded ] = useState(true);\r\n\r\n\tconst { selectedYear, selectedStats } = useContext(settingsContext);\r\n\tconst { teamList, removeTeam, updateTeam, leagueStats, updateLeagueStats } = useContext(leagueContext);\r\n\r\n\tconst thisTeam = teamList.find(team => team.id === id)!;\r\n\r\n\t// to do: https://casesandberg.github.io/react-color/\r\n\r\n\r\n\tconst accordionClasses = useAccordionStyles();\r\n\tconst accordionSummaryClasses = useAccordionSummaryStyles();\r\n\tconst accordionDetailClasses = useAccordionDetailStyles();\r\n\tconst gridClasses = useGridStyles();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateLeagueStats();\r\n\t}, [...Object.values(thisTeam.stats)])\r\n\r\n\tuseEffect(() => {\r\n\t\tthisTeam.stats = calcTeamStats(thisTeam.roster, selectedYear);\r\n\t\tthisTeam.stats.scl = calcCategoryLeads(thisTeam.stats);\r\n\t\tupdateTeam(thisTeam);\r\n\t}, [...Object.values(leagueStats.max), ...Object.values(selectedStats), selectedYear])\r\n\r\n\tconst minimize = () => {\r\n\t\tsetIsExpanded(!isExpanded);\r\n\t}\r\n\r\n\tconst maximize = () => {\r\n\t\talert('This feature is still under construction!');\r\n\t}\r\n\r\n\tconst close = () => {\r\n\t\tremoveTeam(id)\r\n\t}\r\n\r\n\tconst calcCategoryLeads = (teamStats: IStatDictionary) => {\r\n\t\tlet result = 0;\r\n\t\tfor (const category in teamStats) {\r\n\t\t\tif (!selectedStats[category] || category === 'scl') {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t  if (isBestInCategory(teamStats[category], category, leagueStats)) {\r\n\t\t\t\tresult++;\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tconst addPlayer = async (personId: string, allPlayers: Array<IPlayerSearchResult>): Promise<void> => {\r\n\t\tconst { firstName, lastName } = allPlayers.find(player => player.personId === personId)!;\r\n\t\tconst statStringObj = (await getPlayerStats(personId)).stats;\r\n\t\tconst stats = convertStatStringsToNumbers(statStringObj);\r\n\t\tstats.latest = addCalculatedStats(stats.latest);\r\n\t\tstats.regularSeason.season = stats.regularSeason.season.map((season: {total: IStatDictionary}) => {\r\n\t\t\tseason.total = addCalculatedStats(season.total);\r\n\t\t\treturn season;\r\n\t\t});\r\n\r\n\t\tconst player: Player = {\r\n\t\t\tpersonId,\r\n\t\t\tfirstName,\r\n\t\t\tlastName,\r\n\t\t\tstats\r\n\t\t};\r\n\t\tconsole.log(player);\r\n\r\n\t\tthisTeam.roster.push(player);\r\n\t\tthisTeam.stats = calcTeamStats(thisTeam.roster, selectedYear);\r\n\t\tupdateTeam(thisTeam);\r\n\t}\r\n\r\n\tconst removePlayer = (personId: string): void => {\r\n\t\tthisTeam.roster = thisTeam.roster.filter(player => player.personId !== personId);\r\n\t\tthisTeam.stats = calcTeamStats(thisTeam.roster, selectedYear);\r\n\t\tupdateTeam(thisTeam);\r\n\t}\r\n\r\n\t// PersonAdd icon\r\n\t// FilterNone (for copy)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Accordion\r\n\t\t\t\tclasses={accordionClasses}\r\n\t\t\t\texpanded={isExpanded}\r\n\t\t\t>\r\n\t\t\t\t<AccordionSummary classes={accordionSummaryClasses}>\r\n\t\t\t\t\t<TeamLabel id={id} />\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={minimize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{ isExpanded ? <MinimizeIcon /> : <CropDinIcon /> }\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={maximize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<LaunchIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={close}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</AccordionSummary>\r\n\t\t\t\t<AccordionDetails\r\n\t\t\t\t\tclasses={accordionDetailClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tdirection='row'\r\n\t\t\t\t\t\tclasses={gridClasses}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RosterTable\r\n\t\t\t\t\t\t\tid={id} \r\n\t\t\t\t\t\t\troster={thisTeam.roster}\r\n\t\t\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\t\t\tremovePlayer={removePlayer}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TeamStatsTable\r\n\t\t\t\t\t\t\tteamId={id}\r\n\t\t\t\t\t\t\tstats={thisTeam.stats}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</AccordionDetails>\r\n\t\t\t</Accordion>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useEffect, useContext, FunctionComponent } from 'react';\r\nimport { Team } from '../Team/Team';\r\nimport { ITeam } from '../../Types/types';\r\nimport { getAllPlayers } from '../../Util/Util';\r\nimport { leagueContext } from '../../Contexts/LeagueContext';\r\nimport { allPlayersContext } from '../../Contexts/AllPlayersContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\n\r\nexport const AllTeamsContainer: FunctionComponent = () => {\r\n\tconst { teamList } = useContext(leagueContext)\r\n\tconst { setAllPlayers } = useContext(allPlayersContext);\r\n\tconst { selectedYear } = useContext(settingsContext)\r\n\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tsetAllPlayers(await getAllPlayers(selectedYear as number));\r\n\t\t})();\r\n\t}, [selectedYear])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{teamList.map((teamProps: ITeam): React.ReactNode => (\r\n\t\t\t\t\t<Team\r\n\t\t\t\t\t\t{...teamProps}\r\n\t\t\t\t\t\tkey={teamProps.id}\r\n\t\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from './SharedStyles/SharedStyles';\r\nimport { nbaBlue } from './Util/Util';\r\n\r\nexport const useAppGridStyles = makeStyles({\r\n\troot: {\r\n\t\tcursor: 'default',\r\n\t\tbackgroundColor: 'lightgray',\r\n\t\t...getScrollBarStyles('.sidebar-scrollbar', 8),\r\n\t\t...getScrollBarStyles('.visualizations-container', 8),\r\n\t\t'& .top-bar' : {\r\n\t\t\theight: '10vh',\r\n\t\t\tpadding: 6\r\n\t\t},\r\n\t\t'& h1' : {\r\n\t\t\tcolor: nbaBlue,\r\n\t\t\tmargin: '0px 12px 0px 0px'\r\n\t\t}\r\n\t}\r\n})","import { makeStyles } from '@material-ui/core';\r\nimport { nbaRed, nbaBlue } from '../../Util/Util'\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles'\r\n\r\nexport const useSettingsPanelStyles = makeStyles({\r\n  popper: {\r\n    ...getScrollBarStyles('.MuiTooltip-tooltip'),\r\n  },\r\n  tooltip: {\r\n    paddingTop: 0,\r\n    overflowY: 'scroll',\r\n    color: '#000',\r\n    maxHeight: '50vh',\r\n    backgroundColor: 'white',\r\n    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\r\n  }\r\n})","import React, { useContext, useEffect } from 'react';\r\nimport { List, ListItem, Checkbox } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsPanel = () => {\r\n  const { selectedStats, setSelectedStats } = useContext(settingsContext);\r\n  const settingsArray: Array<{label: string, show: boolean}> = [];\r\n  \r\n  for (const key in selectedStats) {\r\n    settingsArray.push({label: key, show: selectedStats[key]})\r\n  }\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation();\r\n    const { value } = event.currentTarget.dataset\r\n    selectedStats[value!] = !selectedStats[value!]\r\n    setSelectedStats({...selectedStats})\r\n  };\r\n\r\n  const settingsClasses = useSettingsPanelStyles()\r\n\r\n  return (\r\n    <List\r\n      dense\r\n    >\r\n      {settingsArray.map(({ label, show }) => (\r\n        <ListItem\r\n          button\r\n          data-value={label}\r\n          onClick={handleClick}\r\n          key={`setting-${label}`}\r\n        >\r\n          <Checkbox checked={show} />\r\n          <span style={{textTransform: 'uppercase'}}>{label}</span>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { ClickAwayListener, IconButton, Tooltip } from '@material-ui/core'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { SettingsPanel } from './SettingsPanel';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsButton = () => {\r\n  const settingsClasses = useSettingsPanelStyles();\r\n  \r\n  const [open, setIsOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleClickAway = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <Tooltip\r\n        title={<SettingsPanel />}\r\n        disableFocusListener\r\n        disableHoverListener\r\n        disableTouchListener\r\n        open={open}\r\n        interactive\r\n        classes={settingsClasses}\r\n        arrow\r\n      >\r\n        <IconButton onClick={handleClick}>\r\n          <VisibilityIcon style={{color: '#666666'}} />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../../Util/Util';\r\n\r\nexport const chartCardPadding = 6\r\nexport const chartCardMargin = 6;\r\n\r\nexport const useBarChartStyles = makeStyles({\r\n  root: {\r\n    height: `calc(22.5vh - ${chartCardPadding * 2}px - ${chartCardMargin}px)`,\r\n    width: `calc(100% - ${chartCardPadding * 2}px - ${chartCardMargin * 2}px)`,\r\n    marginTop: 0,\r\n    marginRight: chartCardMargin,\r\n    marginBottom: chartCardMargin,\r\n    marginLeft: chartCardMargin,\r\n    padding: chartCardPadding,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    '& p': {\r\n      textTransform: 'uppercase',\r\n      margin: 0\r\n    },\r\n    '& svg' : {\r\n      overflow: 'visible',\r\n      marginBottom: 20,\r\n      backgroundColor: '#dddddd'\r\n    },\r\n    '& rect:nth-child(odd)': {\r\n      fill: '#444444',\r\n    },\r\n    '& rect:nth-child(even)': {\r\n      fill: '#666666',\r\n    },\r\n    '& rect:hover': {\r\n      opacity: 1 \r\n    },\r\n    '& .player-name-label': {\r\n      opacity: .25,\r\n      fill: '#fff'\r\n    },\r\n    '& .player-name-label:hover': {\r\n      opacity: 1,\r\n      cursor: 'default'\r\n    },\r\n    '& .best rect:nth-child(odd)': {\r\n      fill: nbaBlue\r\n    },\r\n    '& .best rect:nth-child(even)' : {\r\n      fill: '#3560b3'\r\n    },\r\n    '& svg div': {\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      whiteSpace: 'nowrap',\r\n      textAlign: 'right',\r\n      height: '100%',\r\n      padding: '0px 6px',\r\n    }\r\n  }\r\n})\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Card } from '@material-ui/core';\r\nimport * as d3 from 'd3';\r\nimport { leagueContext } from '../../../Contexts/LeagueContext';\r\nimport { settingsContext } from '../../../Contexts/SettingsContext';\r\nimport { useBarChartStyles } from './BarChart.styles';\r\nimport { isBestInCategory, getSeasonStats } from '../../../Util/Util';\r\nimport { fullStatNameDictionary } from '../../../Util/StatCategories';\r\n\r\nexport interface IStackedBarChartProps {\r\n  statCategory: string\r\n}\r\n\r\ninterface ITeamBar {\r\n  id: number;\r\n  name?: string;\r\n  teamTotal: number;\r\n  individualBars: Array<IIndividualBar>;\r\n}\r\n\r\ninterface IIndividualBar {\r\n  personId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  statValue: number;\r\n  xPos: number;\r\n  barWidth: number;\r\n}\r\n\r\nexport const StackedBarChart = (props: IStackedBarChartProps) => {\r\n  const { statCategory } = props;\r\n  const { teamList, leagueStats } = useContext(leagueContext);\r\n  const { selectedYear } = useContext(settingsContext);\r\n  const barChartClasses = useBarChartStyles();\r\n\r\n  const { [statCategory]: min } = leagueStats.min;\r\n  const { [statCategory]: median } = leagueStats.median;\r\n  const { [statCategory]: max } = leagueStats.max;\r\n\r\n  useEffect(() => {\r\n    const barChartCard = document.querySelector('.bar-chart-container');\r\n    const svgVerticalMargin = 26;\r\n    const svgHorizontalMargin = 80;\r\n    const svgHeight = barChartCard!.clientHeight - (svgVerticalMargin * 2);\r\n    const svgWidth = barChartCard!.clientWidth - (svgHorizontalMargin * 2);\r\n    const barMargin = 2;\r\n    const barHeight = svgHeight / teamList.length;\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, max || 100])\r\n      .range([0, svgWidth]);\r\n    const xAxis = d3.axisBottom(xScale);\r\n        \r\n    const dataset: Array<ITeamBar> = teamList.map((team) => {\r\n      const barWidths: Array<number> = team.roster.map((player) => {\r\n        const selectedSeasonStats = getSeasonStats(player, selectedYear as number)\r\n        return xScale(selectedSeasonStats[statCategory] ?? 0);\r\n      })\r\n\r\n      const individualBars = team.roster\r\n        .map((player, i) => {\r\n          const { personId, firstName, lastName } = player\r\n          const selectedSeasonStats = getSeasonStats(player, selectedYear as number);\r\n          const statValue = selectedSeasonStats[statCategory] ?? 0;\r\n          const xPos = i === 0 ? 0 : barWidths.reduce((acc, cur, idx) => idx < i ? acc + cur : acc); \r\n          const barWidth = barWidths[i];\r\n          return { personId, firstName, lastName, statValue, xPos, barWidth };\r\n        })\r\n        .filter(({barWidth}) => barWidth > 0);\r\n\r\n      return {\r\n        id: team.id,\r\n        name: team.name,\r\n        teamTotal: team.stats[statCategory],\r\n        individualBars\r\n      };\r\n    });\r\n\r\n    const svg = d3.select(`.bar-chart-container.${statCategory} svg`)\r\n      .attr('width', svgWidth)\r\n      .attr('height', svgHeight);\r\n\r\n    // bar\r\n    svg.selectAll(`.bar-chart-container.${statCategory}`)\r\n      .data(dataset)\r\n      .enter()\r\n      .append('g')\r\n        .attr('transform', (d, i) => `translate(0, ${barHeight * i})`)\r\n        .attr('data-team-id', (d) => d.id)\r\n        .classed('best', (d) => isBestInCategory(d.teamTotal, statCategory, leagueStats))\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d) => d.individualBars)\r\n      .enter()\r\n      .append('rect')\r\n        .attr('x', (d) => d.xPos)\r\n        .attr('width', (d) => d.barWidth)\r\n        .attr('height', barHeight - barMargin)\r\n        \r\n    // team label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('foreignObject')\r\n        .attr('width', svgHorizontalMargin)\r\n        .attr('height', barHeight - barMargin)\r\n        .attr('x', -svgHorizontalMargin)\r\n        .attr('y', 0)\r\n      .append('xhtml:div')\r\n        .html((d: any) => d.name || `Team ${d.id}`)\r\n        .style('line-height', `${barHeight - barMargin}px`);\r\n\r\n    // total stat label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => d.teamTotal ? d.teamTotal.toFixed(1) : '')\r\n        .attr('x', (d: any) => xScale(d.teamTotal) + 6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('alignment-baseline', 'middle')\r\n      \r\n    // player name label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d: any) => d.individualBars)\r\n      .enter()\r\n      .append('text')\r\n        .text((d: any) => d.statValue ? `${d.firstName[0]}. ${d.lastName} ${d.statValue.toFixed(1)}` : '')\r\n        .attr('x', (d: any) => d.xPos + (d.barWidth / 2))\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('alignment-baseline', 'middle')\r\n        .classed('player-name-label', true)\r\n\r\n    // x axis label\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${svgHeight})`)\r\n      .call(xAxis);\r\n\r\n    // y axis line\r\n    svg.append('line')\r\n      .attr('x1', 0)\r\n      .attr('y1', 0)\r\n      .attr('x2', 0)\r\n      .attr('y2', svgHeight)\r\n      .attr('stroke', '#000')\r\n  \r\n    return () => { svg.html(null) };\r\n  });\r\n\r\n  return (\r\n    <Card\r\n      classes={barChartClasses}\r\n      className={`bar-chart-container ${statCategory}`}\r\n    >\r\n      <p>{statCategory} {fullStatNameDictionary[statCategory] ? `(${fullStatNameDictionary[statCategory]})` : ''}</p>\r\n      <svg />\r\n    </Card>\r\n  )\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { StackedBarChart } from './BarChart/StackedBarChart';\r\n\r\nexport const Visualizations = () => {\r\n  const { selectedStats } = useContext(settingsContext);\r\n\r\n  const showStatsArray: Array<string> = Object.keys(selectedStats)\r\n    .filter(category => selectedStats[category]);\r\n\r\n  return (\r\n    <>\r\n      {showStatsArray.map(category => (\r\n        category !== 'scl' && (\r\n          <StackedBarChart\r\n            key={`bar-chart-${category}`}\r\n            statCategory={category}\r\n          />\r\n        )\r\n      ))}\r\n    </>\r\n  )\r\n}","import { makeStyles } from '@material-ui/core';\r\nimport { nbaRed, nbaBlue } from '../../Util/Util';\r\n\r\nexport const useSeasonSelectStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 4,\r\n    '& .MuiFormLabel-root.Mui-focused': {\r\n      color: nbaRed,\r\n    },\r\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline' : {\r\n      borderColor: nbaRed\r\n    }\r\n  }\r\n})","import React, { useContext } from 'react';\r\nimport { Select, FormControl, InputLabel, MenuItem } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSeasonSelectStyles } from './SeasonSelect.style'\r\n\r\n\r\nexport const SeasonSelect = () => {\r\n  const { selectedYear, setSelectedYear } = useContext(settingsContext);\r\n\r\n  const seasonSelectClasses = useSeasonSelectStyles();\r\n\r\n  const handleChange = ({ target }: React.ChangeEvent<{ value: unknown }>) => {\r\n    const { value } = target;\r\n    setSelectedYear(value as number);\r\n  };\r\n\r\n  return (\r\n    <FormControl\r\n      variant='outlined'\r\n      classes={seasonSelectClasses}\r\n    >\r\n      <InputLabel>Season</InputLabel>\r\n      <Select\r\n        value={selectedYear}\r\n        onChange={handleChange}\r\n        autoWidth\r\n      >\r\n        <MenuItem value={2020}>2020 - 2021</MenuItem>\r\n        <MenuItem value={2019}>2019 - 2020</MenuItem>\r\n        <MenuItem value={2018}>2018 - 2019</MenuItem>\r\n        <MenuItem value={2017}>2017 - 2018</MenuItem>\r\n        <MenuItem value={2016}>2016 - 2017</MenuItem>\r\n        <MenuItem value={2015}>2015 - 2016</MenuItem>\r\n        <MenuItem value={2014}>2014 - 2015</MenuItem>\r\n        <MenuItem value={2013}>2013 - 2014</MenuItem>\r\n        <MenuItem value={2012}>2012 - 2013</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport { AllPlayersContextProvider } from './Contexts/AllPlayersContext'\r\nimport { LeagueContextProvider } from './Contexts/LeagueContext'\r\nimport { SettingsContextProvider } from './Contexts/SettingsContext'\r\nimport { Grid } from '@material-ui/core';\r\nimport { AddTeamButton } from './components/AddTeamButton/AddTeamButton';\r\nimport { AllTeamsContainer } from './components/AllTeamsContainer/AllTeamsContainer';\r\nimport { useAppGridStyles } from './App.styles';\r\nimport { SettingsButton } from './components/SettingsButton/SettingsButton';\r\nimport { Visualizations } from './components/Visualizations/Visualizations';\r\nimport { SeasonSelect } from './components/SeasonSelect/SeasonSelect';\r\nimport { nbaBlue } from './Util/Util'\r\n\r\nfunction App() {\r\n\r\n  const appGridClasses = useAppGridStyles();\r\n\r\n  return (\r\n    <AllPlayersContextProvider>\r\n      <LeagueContextProvider>\r\n        <SettingsContextProvider>\r\n          <Grid\r\n            container\r\n            direction='column'\r\n            classes={appGridClasses}\r\n          >\r\n\r\n            {/* top 10% */}\r\n            <Grid\r\n              item\r\n              md={12}\r\n            >\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                className='top-bar'\r\n                alignItems='center'\r\n                justify='space-between'\r\n              >\r\n                  <div style={{display: 'flex', alignItems: 'center'}}>\r\n                    <AddTeamButton />\r\n                    <SettingsButton />\r\n                    <SeasonSelect />\r\n                  </div>\r\n                  <h1>LeagueMaps.com</h1>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* bottom 90% */}\r\n            <Grid\r\n              item\r\n              md={12}\r\n            >\r\n              <Grid\r\n                container\r\n                direction='row'\r\n              >\r\n\r\n                {/* left 25% */}\r\n                <Grid\r\n                  item\r\n                  md={3}\r\n                  style={{height: '90vh', overflowY: 'scroll'}}\r\n                  className='sidebar-scrollbar scrollbar-padding-top'\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction='column'\r\n                  >\r\n                      <AllTeamsContainer />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* right 75% */}\r\n                <Grid\r\n                  item\r\n                  md={9}\r\n                  style={{height: '90vh', overflowY: 'scroll'}}\r\n                  className='visualizations-container scrollbar-padding-top'\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction='column'\r\n                  >\r\n                    <Visualizations />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </SettingsContextProvider>\r\n      </LeagueContextProvider>\r\n    </AllPlayersContextProvider>\r\n  );\r\n}\r\n\r\n// Did LeagueMaps help you win money in your fantasy league?\r\n// A modest $9 donation pays to keep LeagueMaps online for another 6 months...just in time for your draft next season\r\n\r\n// https://www.d3-graph-gallery.com/barplot.html\r\n// https://www.apollographql.com/blog/layering-graphql-on-top-of-rest-569c915083ad/\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}