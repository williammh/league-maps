{"version":3,"sources":["Util.ts","Contexts/PlayerListContext.tsx","Contexts/TeamListContext.tsx","Contexts/AppStatsContext.tsx","Contexts/SettingsContext.tsx","components/AddTeamButton/AddTeamButton.tsx","components/Team/RosterTable.styles.ts","components/Team/PlayerSelect.tsx","SharedStyles/SharedStyles.ts","components/Team/UndraftedRow.style.ts","components/Team/UndraftedRow.tsx","components/Team/RosterTable.tsx","components/Team/TotalStatsTable.styles.tsx","components/Team/TotalStatsTable.tsx","components/Team/Team.styles.tsx","components/Team/Team.tsx","components/AllTeamsContainer/AllTeamsContainer.tsx","App.styles.ts","components/SettingsPanel/SettingsPane.styles.ts","components/SettingsPanel/SettingsPanel.tsx","components/SettingsButton/SettingsButton.tsx","components/BarChart/BarChart.styles.ts","components/BarChart/StackedBarChart.tsx","components/Visualizations/Visualizations.tsx","components/SeasonSelect/SeasonSelect.style.ts","components/SeasonSelect/SeasonSelect.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["statCategories","calculatedCategories","invertedCategories","excludeCategories","defaultCategories","nbaRed","nbaBlue","getCurrentNbaYear","a","currentYear","Date","getFullYear","undefined","playerListResponse","ok","fetch","getAllPlayers","year","json","playerList","league","standard","getPlayerStats","personId","playerStatsResponse","playerStatsJson","calcTotalStats","roster","selectedYear","result","filter","category","includes","forEach","player","selectedSeasonStats","getSeasonStats","calcTotalStatsArray","statsObject","settings","key","visibleStats","push","label","total","calcAllTotalStats","teamList","categories","team","totalStats","calcMin","arr","reduce","acc","cur","calcMax","calcMedian","sort","b","length","calcMean","isBestInCategory","value","best","min","max","selectedStats","stats","regularSeason","season","find","i","console","log","seasonYear","latest","playerListContext","React","createContext","PlayerListContextProvider","props","useState","setPlayerList","useEffect","filteredplayerList","isActive","Provider","children","teamListContext","TeamListContextProvider","initialTeamList","id","setTeamList","addTeam","removeTeam","appStatsContext","AppStatsContextProvider","median","appStats","setAppStats","settingsContext","SettingsContextProvider","allCategories","index","indexOf","getDefaultSettings","setSettings","setSelectedYear","AddTeamButton","useContext","IconButton","onClick","style","color","useTableContainerStyles","makeStyles","root","height","width","overflowY","overflowX","padding","opacity","backgroundColor","fill","borderRadius","display","whiteSpace","textOverflow","PlayerSelect","teamId","addPlayer","searchString","setSearchString","isFocused","setHasFocus","searchResults","setSearchResults","selectedIndex","setSelectedIndex","idsInTeam","map","myRef","useRef","isMatchingSearchString","firstName","lastName","handleClick","event","currentTarget","dataset","searchStringLower","toLowerCase","startsWith","TextField","type","variant","onChange","target","onKeyDown","List","disablePadding","className","ref","offsetTop","ListItem","button","data-person-id","data-first-name","data-last-name","selected","disabled","getScrollBarStyles","selector","scrollBarWidth","usePopover","paper","overflow","UndraftedRow","popoverClasses","anchorEl","setAnchorEl","open","Boolean","TableRow","TableCell","size","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","classes","RosterTable","removePlayer","tableContainerClasses","truncatePlayerName","maxLength","playerRows","Avatar","src","undraftedRows","TableContainer","Table","TableBody","textTransform","maxWidth","textAlign","minWidth","TotalStatsTable","totalStatsArray","stat","toFixed","useAccordionStyles","margin","useAccordionSummaryStyles","minHeight","cursor","expanded","content","justifyContent","flexGrow","paddingTop","paddingLeft","useAccordionDetailStyles","flexDirection","useGridStyles","flexWrap","Team","isExpanded","setIsExpanded","accordionClasses","accordionSummaryClasses","accordionDetailClasses","gridClasses","findIndex","relativeStats","allTotalStats","calcRelativeStatsV2","parseFloat","Accordion","AccordionSummary","aria-label","aria-controls","AccordionDetails","Grid","container","direction","AllTeamsContainer","teamProps","useAppGridStyles","useSettingsPanelStyles","SettingsPanel","settingsArray","show","stopPropagation","settingsClasses","dense","data-value","Checkbox","checked","SettingsButton","useBarChartStyles","alignItems","marginBottom","StackedBarChart","statCategory","barChartClasses","barHeight","svgHeight","xScale","d3","domain","range","xAxis","barWidths","individualBars","statValue","xPos","idx","barWidth","teamTotal","svg","attr","selectAll","data","enter","append","d","classed","text","call","html","Card","Visualizations","showStatsArray","useSeasonSelectStyles","borderColor","SeasonSelect","seasonSelectClasses","FormControl","InputLabel","Select","autoWidth","MenuItem","App","appGridClasses","item","md","justify","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4fe72b4.chunk.js","sourcesContent":["import { ITeamTotalStats, IStatCategory, IRelativeStats, IRelativeStatsV2, ITeam } from './Types/teamTypes';\r\nimport { IPlayerSearchResult, IStatSearchResult, Player } from './Types/playerTypes'\r\nimport { ISettings, IVisibleStats } from './Contexts/SettingsContext';\r\n\r\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport const maxTeamSize = 15;\r\n\r\nexport const statCategories: Array<string> = [\r\n\t/** points per game */\r\n\t'ppg',\r\n\t/** rebounds per game */\r\n\t'rpg',\r\n\t/** assists per game */\r\n\t'apg', \r\n\t/** minutes per game */\r\n\t'mpg', \r\n\t/** turnovers per game */\r\n\t'topg', \r\n\t/** steals per game */\r\n\t'spg', \r\n\t/** blocks per game */\r\n\t'bpg',\r\n\t\t/** three point percentage */\r\n\t'tpp', \r\n\t/** free throw percentage */\r\n\t'ftp', \r\n\t/** field goal percentage */\r\n\t'fgp', \r\n\r\n\t'assists',\r\n\r\n\t'blocks',\r\n\r\n\t'steals',\r\n\r\n\t'turnovers',\r\n\r\n\t'offReb',\r\n\r\n\t'defReb',\r\n\r\n\t'totReb',\r\n\r\n\t/** field goals made */\r\n\t'fgm',\r\n\t/** field goals attempted */\r\n\t'fga',\r\n\t/** three pointers made */ \r\n\t'tpm',\r\n\t/** three pointers attemped */\r\n\t'tpa',\r\n\t/** free throws made */\r\n\t'ftm',\r\n\t/** free throws attempted */\r\n\t'fta',\r\n\t/** personal fouls */\r\n\t'pFouls',\r\n\r\n\t'points',\r\n\r\n\t'gamesPlayed',\r\n\r\n\t'gamesStarted',\r\n\r\n\t'plusMinus',\r\n\r\n\t'min',\r\n\r\n\t'dd2',\r\n\r\n\t'td3',\r\n\r\n\t'seasonYear',\r\n\r\n\t'seasonStageId'\r\n];\r\n\r\nexport const percentageCategories = [\r\n\t/** three point percentage */\r\n\t'tpp',\r\n\t/** free throw percentage */\r\n\t'ftp',\r\n\t/** field goal percentage */\r\n\t'fgp'\r\n];\r\n\r\nexport const calculatedCategories = [\r\n\t/** field goals made per game */\r\n\t'fgmpg',\r\n\t/** field goals attempted per game */\r\n\t'fgapg',\r\n\t/** three pointers made per game */\r\n\t'tpmpg',\r\n\t/** three pointers attempted per game */\r\n\t'tpapg',\r\n\t/** free throws made per game */\r\n\t'ftmpg',\r\n\t/** free throws attempted per game */\r\n\t'ftapg',\r\n\t/** personal fouls per game */\r\n\t'pfpg'\r\n];\r\n\r\nexport const invertedCategories = [\r\n\t'topg',\r\n\t'turnovers',\r\n\t'pFouls',\r\n\t'pfpg',\r\n];\r\n\r\nexport const excludeCategories = [\r\n\t'seasonStageId',\r\n\t'seasonYear',\r\n];\r\n\r\nexport const defaultCategories = [\r\n\t'ppg',\r\n\t'rpg',\r\n\t'apg',\r\n\t'topg',\r\n\t'bpg',\r\n\t'spg',\r\n\t'fgm',\r\n\t'tpm',\r\n\t'ftm'\r\n];\r\n\r\nexport const nbaRed = '#c8102e';\r\nexport const nbaBlue = '#1d428a';\r\n\r\nexport const getCurrentNbaYear = async (): Promise<number> => {\r\n\tlet currentYear = (new Date()).getFullYear();\r\n\tlet playerListResponse;\r\n\twhile(playerListResponse === undefined || !playerListResponse.ok) {\r\n\t\tplayerListResponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players.json`);\r\n\t\tif(!playerListResponse.ok) {\r\n\t\t\tcurrentYear--;\r\n\t\t}\r\n\t}\r\n\treturn currentYear;\r\n}\r\n\r\nexport const getAllPlayers = async (): Promise<Array<IPlayerSearchResult>> => {\r\n\tlet year = await getCurrentNbaYear();\r\n\tlet playerListResponse = await fetch(`https://data.nba.net/prod/v1/${year}/players.json`);\r\n\tlet playerList = await playerListResponse.json();\r\n\treturn playerList.league.standard;\r\n}\r\n\r\nexport const getPlayerStats = async (personId: string, year: number = 2019): Promise<IStatSearchResult | any> => {\r\n\tconst playerStatsResponse = await fetch(`https://data.nba.net/prod/v1/${year}/players/${personId}_profile.json`)\r\n\tconst playerStatsJson = await playerStatsResponse.json();\r\n\treturn playerStatsJson.league.standard;\r\n}\r\n\r\nexport const calcTotalStats = (roster: Array<Player>, selectedYear: number = 2019): ITeamTotalStats => {\r\n\tconst result: ITeamTotalStats = {};\r\n\tstatCategories\r\n\t\t.filter(category => !excludeCategories.includes(category))\r\n\t\t.forEach(category => result[category] = 0);\r\n\troster.forEach((player): void => {\r\n\t\tconst selectedSeasonStats = getSeasonStats(player, selectedYear)\r\n\t\tfor(let category in result) {\r\n\t\t\tresult[category] += selectedSeasonStats![category] as number >= 0 ? selectedSeasonStats![category] as number : 0;\r\n\t\t}\r\n\t})\r\n\treturn result;\r\n}\r\n\r\nexport const calcTotalStatsArray = (statsObject: ITeamTotalStats, settings?: ISettings): Array<IStatCategory> => {\r\n\tconst result: Array<IStatCategory> = [];\r\n\tfor (let key in statsObject) {\r\n\t\tif(settings && !settings.visibleStats[key]) { continue }\r\n\t\tresult.push({label: key, total: statsObject[key]})\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const calcRelativeStats = (teamList: Array<ITeam>, categories: Array<string> = statCategories): IRelativeStats => {\r\n\tconst result: IRelativeStats = {};\r\n\tconst allTotalStats = calcAllTotalStats(teamList, categories);\r\n\t\r\n\tcategories.forEach(category => {\r\n\t\tresult[category] = {\r\n\t\t\tmin: 0,\r\n\t\t\tmedian: 0,\r\n\t\t\tmax: 0\r\n\t\t}\r\n\t});\r\n\t\r\n\tfor(let category in allTotalStats) {\r\n\t\tresult[category].min = calcMin(allTotalStats[category])\r\n\t\tresult[category].max = calcMax(allTotalStats[category])\r\n\t\tresult[category].median = calcMedian(allTotalStats[category])\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const calcRelativeStatsV2 = (teamList: Array<ITeam>, categories: Array<string> = statCategories): IRelativeStatsV2 => {\r\n\tconst result: IRelativeStatsV2 = {\r\n\t\tmin: {},\r\n\t\tmedian: {},\r\n\t\tmax: {}\r\n\t};\r\n\tconst allTotalStats: {[key: string]: Array<number>} = calcAllTotalStats(teamList, categories);\r\n\r\n\tfor(let category in allTotalStats) {\r\n\t\tresult.min[category] = calcMin(allTotalStats[category])\r\n\t\tresult.median[category] = calcMedian(allTotalStats[category])\r\n\t\tresult.max[category] = calcMax(allTotalStats[category])\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nexport const calcAllTotalStats = (teamList: Array<ITeam>, categories: Array<string>): {[key: string]: Array<number>} => {\r\n\tconst result: {[key: string]: Array<number>} = {};\r\n\r\n\tcategories.forEach(category => {\r\n\t\tresult[category] = [];\r\n\t});\r\n\r\n\tfor(let category in result) {\r\n\t\tteamList.forEach(team => result[category].push(team.totalStats[category]))\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport const calcMin = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc < cur ? acc : cur);\r\n}\r\n\r\nexport const calcMax = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) =>  acc > cur ? acc : cur);\r\n}\r\n\r\nexport const calcMedian = (arr: Array<number>): number => {\r\n\tarr.sort((a, b) => a - b);\r\n\treturn (\r\n\t\tarr.length % 2 ?\r\n\t\tarr[(arr.length - 1) / 2] :\r\n\t\tcalcMean([arr[arr.length / 2], arr[(arr.length / 2) - 1]])\r\n\t);\r\n}\r\n\r\nexport const calcMean = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc + cur) / arr.length ;\r\n}\r\n\r\nexport const isBestInCategory = (value: number, category: string, best: IRelativeStatsV2): boolean => {\r\n\tif (invertedCategories.includes(category)) {\r\n\t\treturn value === best.min[category];\r\n\t} else {\r\n\t\treturn value === best.max[category];\r\n\t}\r\n}\r\n\r\nexport const getSeasonStats = (player: Player, selectedYear: number = 2019): {[key: string]: number} => {\r\n\tconst selectedStats = player.stats.regularSeason.season\r\n\t\t.find((season, i) => {\r\n\t\t\tconsole.log(i)\r\n\t\t\tconsole.log(season.seasonYear)\r\n\t\t\treturn season.seasonYear === selectedYear\r\n\t\t})?.total\r\n\t\r\n\tconsole.log(selectedStats);\r\n\treturn selectedStats ?? player.stats.latest;\r\n}","import React from 'react';\r\nimport { getAllPlayers } from '../Util';\r\nimport { IPlayerSearchResult } from '../Types/playerTypes';\r\n\r\nconst playerListContext = React.createContext([] as IPlayerSearchResult[]);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nconst PlayerListContextProvider = (props: ContextProviderProps): JSX.Element => {\r\n\tconst [playerList, setPlayerList] = React.useState([] as IPlayerSearchResult[]);\r\n\r\n\tReact.useEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tconst playerList = await getAllPlayers();\r\n\t\t\tconst filteredplayerList = playerList.filter(({isActive}) => isActive);\r\n\t\t\tsetPlayerList(filteredplayerList);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<playerListContext.Provider value={playerList}>\r\n\t\t\t{props.children}\r\n\t\t</playerListContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {PlayerListContextProvider, playerListContext}","import React, { useState, useEffect } from 'react';\r\nimport { ITeam } from '../Types/teamTypes';\r\nimport { calcTotalStats } from '../Util';\r\n\r\nconst teamListContext = React.createContext({} as ITeamContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface ITeamContext {\r\n\tteamList: Array<ITeam>;\r\n\tsetTeamList: React.Dispatch<React.SetStateAction<ITeam[]>>;\r\n\taddTeam: () => void;\r\n\tremoveTeam: (id: number) => void;\r\n}\r\n\r\nconst TeamListContextProvider = (props: ContextProviderProps) => {\r\n\tconst initialTeamList: Array<ITeam> = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\troster: [],\r\n\t\t\ttotalStats: calcTotalStats([])\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\troster: [],\r\n\t\t\ttotalStats: calcTotalStats([])\r\n\t\t}\r\n\t]\r\n\r\n\tconst [teamList, setTeamList] = useState(initialTeamList);\r\n\t\r\n\tconst addTeam = () => {\r\n\t\tsetTeamList([\r\n\t\t\t...teamList,\r\n\t\t\t{\r\n\t\t\t\tid: (teamList[teamList.length - 1]?.id ?? 0) + 1,\r\n\t\t\t\troster: [],\r\n\t\t\t\ttotalStats: calcTotalStats([])\r\n\t\t\t}\r\n\t\t])\r\n\t}\r\n\r\n\tconst removeTeam = (id: number) => {\r\n\t\tsetTeamList(teamList.filter(team => team.id !== id))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<teamListContext.Provider value={{ teamList, addTeam, removeTeam, setTeamList }}>\r\n\t\t\t{props.children}\r\n\t\t</teamListContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { TeamListContextProvider, teamListContext }","import React, {Dispatch, SetStateAction} from 'react';\r\nimport { ITeamTotalStats, IRelativeStats, IRelativeStatsV2 } from '../Types/teamTypes';\r\nimport {\r\n\tcalcRelativeStats\r\n} from '../Util';\r\n\r\nconst appStatsContext = React.createContext({} as IAppStatsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface IAppStatsContext {\r\n\tappStats: IRelativeStatsV2;\r\n\tsetAppStats: Dispatch<SetStateAction<IRelativeStatsV2>>;\r\n}\r\n\r\nconst AppStatsContextProvider = (props: ContextProviderProps) => {\r\n\tconst initialAppStats = { min: {}, median: {}, max: {} };\r\n\tconst [appStats, setAppStats] = React.useState(initialAppStats);\r\n\t\r\n\treturn (\r\n\t\t<appStatsContext.Provider value={{appStats, setAppStats}}>\r\n\t\t\t{props.children}\r\n\t\t</appStatsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {AppStatsContextProvider, appStatsContext}","import React, {\r\n\tDispatch, SetStateAction, useEffect } from 'react';\r\nimport {\r\n\tstatCategories,\r\n\tcalculatedCategories,\r\n\texcludeCategories,\r\n\tdefaultCategories,\r\n\tgetCurrentNbaYear\r\n } from '../Util'\r\n\r\nconst settingsContext = React.createContext({} as ISettingsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport interface ISettings {\r\n\tvisibleStats: IVisibleStats;\r\n\tselectedYear?: number | Promise<number>;\r\n}\r\n\r\nexport interface IVisibleStats {\r\n\t[key: string]: boolean;\r\n}\r\n\r\ninterface ISettingsContext {\r\n\tsettings: ISettings;\r\n\tsetSettings: Dispatch<SetStateAction<ISettings>>;\r\n\tsetSelectedYear: (year: number) => void;\r\n}\r\n\r\nconst SettingsContextProvider = (props: ContextProviderProps) => {\r\n\tconst getDefaultSettings = (): ISettings => {\r\n\t\tconst result: ISettings = {\r\n\t\t\tvisibleStats: {},\r\n\t\t\t/** selectedYear will update upon app load with useEffect below  */\r\n\t\t\tselectedYear: 0\r\n\t\t};\r\n\t\tconst allCategories = [\r\n\t\t\t...defaultCategories,\r\n\t\t\t...statCategories,\r\n\t\t\t...calculatedCategories,\r\n\t\t];\r\n\t\tallCategories\r\n\t\t\t/** remove duplicates, seasonStageId, and seasonYear */ \r\n\t\t\t.filter((category, index) => (\r\n\t\t\t\tallCategories.indexOf(category) === index && !excludeCategories.includes(category)\r\n\t\t\t))\r\n\t\t\t.forEach(category => (\r\n\t\t\t\tresult.visibleStats[category] = defaultCategories.includes(category)\r\n\t\t\t))\r\n\t\treturn result;\r\n\t}\r\n\r\n\tconst [ settings, setSettings ] = React.useState(getDefaultSettings());\r\n\r\n\tconst setSelectedYear = (year: number): void => {\r\n\t\tsetSettings({\r\n\t\t\tvisibleStats: settings.visibleStats,\r\n\t\t\tselectedYear: year\r\n\t\t})\r\n\t}\r\n\t\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tsetSelectedYear(await getCurrentNbaYear());\r\n\t\t})();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<settingsContext.Provider value={{settings, setSelectedYear, setSettings}}>\r\n\t\t\t{props.children}\r\n\t\t</settingsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { SettingsContextProvider, settingsContext }","import React from 'react';\r\nimport { IconButton } from '@material-ui/core'\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\n\r\nexport const AddTeamButton = () => {\r\n\tconst { addTeam } = React.useContext(teamListContext);\r\n\t\r\n\tconst handleClick = () => {\r\n\t\taddTeam()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tonClick={handleClick}\r\n\t\t\tstyle={{color: '#FFF'}}\r\n\t\t>\r\n\t\t\t<GroupAddIcon />\r\n\t\t</IconButton>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n\troot: {\r\n\t\theight: '100%',\r\n\t\twidth: '60%',\r\n\t\toverflowY: 'scroll',\r\n\t\toverflowX: 'hidden',\r\n\t\t'& .MuiTableCell-root' : {\r\n\t\t\tpadding: '2px',\r\n\t\t},\r\n\t\t'& .add-remove-button-cell' : {\r\n\t\t\twidth: '27px',\r\n\t\t},\r\n\t\t'& .no-stats, & .mock-player' : {\r\n\t\t\topacity: '.25'\r\n\t\t},\r\n\t\t'& .headshot-cell' : {\r\n\t\t\twidth: 30\r\n\t\t},\r\n\t\t'& .headshot' : {\r\n\t\t\theight: 30,\r\n\t\t\twidth: 30,\r\n\t\t\tbackgroundColor: 'lightgray'\r\n\t\t},\r\n\t\t'& .mock-player-icon': {\r\n\t\t\theight: '30px',\r\n\t\t\twidth: '30px',\r\n\t\t\tfill: 'white',\r\n\t\t\tbackgroundColor: 'black',\r\n\t\t\tborderRadius: '15px',\r\n\t\t\tdisplay: 'flex'\r\n\t\t},\r\n\t\t'& .name-cell' : {\r\n\t\t\twhiteSpace: 'nowrap',\r\n\t\t\ttextOverflow: 'ellipsis'\r\n\t\t}\r\n\t}\r\n})","import React, {\r\n\tFocusEvent,\r\n\tuseState,\r\n\tuseContext,\r\n\tChangeEvent,\r\n\tMouseEvent,\r\n\tKeyboardEvent,\r\n\tuseEffect,\r\n\tuseRef\r\n} from 'react';\r\nimport { playerListContext } from '../../Contexts/PlayerListContext'\r\nimport { List, ListItem, ListItemText, Popover, TextField, Card } from '@material-ui/core'\r\nimport { Player, IPlayerSearchResult } from '../../Types/playerTypes';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport LazyLoad from 'react-lazy-load';\r\nimport { maxTeamSize } from '../../Util'\r\n\r\nexport interface IPlayerSelectProps {\r\n\tteamId?: number;\r\n\troster?: Array<Player>;\r\n\taddPlayer: (personId: string, playerList: Array<IPlayerSearchResult>) => Promise<void>;\r\n}\r\n\r\nexport const PlayerSelect = (props: IPlayerSelectProps): JSX.Element => {\r\n\tconst { teamId, roster, addPlayer } = props;\r\n\tconst playerList = useContext(playerListContext);\r\n\r\n\tconst [ searchString, setSearchString ] = useState('');\r\n\tconst [ isFocused, setHasFocus ] = useState(false);\r\n\tconst [ searchResults, setSearchResults ] = useState(playerList)\r\n\tconst [ selectedIndex, setSelectedIndex ] = useState(0);\r\n\r\n\tconst idsInTeam: Array<string> | undefined = roster?.map(player => player.personId);\r\n\r\n\tconst myRef = useRef(null)\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSearchResults(playerList.filter(player => {\r\n\t\t\treturn isMatchingSearchString(player.firstName, player.lastName)\r\n\t\t}));\r\n\t\tsetSelectedIndex(0);\r\n\t}, [searchString])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSelectedIndex(0);\r\n\t}, [isFocused])\r\n\r\n\tconst handleChange = (event: ChangeEvent<{value: string}>) => {\r\n\t\tconst { value } = event.target;\r\n\t\tvalue.length > 0 && setHasFocus(true);\r\n\t\tsetSearchString(value);\r\n\t}\r\n\r\n\tconst handleClick = (event: MouseEvent<HTMLElement>): void => {\r\n\t\tconst { personId } = event.currentTarget.dataset\r\n\t\taddPlayer(personId!, playerList);\r\n\t\tsetSearchString('');\r\n\t}\r\n\r\n\tconst handleKeyDown = (event: KeyboardEvent<HTMLDivElement>): void => {\r\n\t\tconst { key } = event\r\n\t\tif (key === 'Enter') {\r\n\t\t\tconst { personId } = searchResults[selectedIndex];\r\n\t\t\tif (!idsInTeam?.includes(personId)) {\r\n\t\t\t\taddPlayer(personId, playerList);\r\n\t\t\t\tsetSearchString('');\r\n\t\t\t\tsetHasFocus(false);\r\n\t\t\t}\r\n\t\t} else if (key === 'ArrowDown') {\r\n\t\t\tsetSelectedIndex(selectedIndex < searchResults.length - 1 ? selectedIndex + 1 : searchResults.length - 1);\r\n\t\t} else if (key === 'ArrowUp') {\r\n\t\t\tsetSelectedIndex(selectedIndex > 0 ? selectedIndex - 1 : 0);\r\n\t\t}\r\n\t}\r\n\r\n\tconst isMatchingSearchString = (firstName: string, lastName: string): boolean => {\r\n\t\tconst searchStringLower = searchString.toLowerCase()\r\n\t\treturn (\r\n\t\t\tfirstName.toLowerCase().startsWith(searchStringLower) ||\r\n\t\t\tlastName.toLowerCase().startsWith(searchStringLower) ||\r\n\t\t\t`${firstName.toLowerCase()} ${lastName.toLowerCase()}`.startsWith(searchStringLower)\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tlabel=\"Draft Player\"\r\n\t\t\t\tvalue={searchString}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\t/>\r\n\t\t\t<List\r\n\t\t\t\tdisablePadding={true}\r\n\t\t\t\tclassName='resultsList'\r\n\t\t\t\tref={myRef}\r\n\t\t\t>\r\n\t\t\t\t{searchResults.map((player, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<LazyLoad height={40} offsetTop={40 * i}>\r\n\t\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\t\t\t\tbutton\r\n\t\t\t\t\t\t\t\tdata-person-id={player.personId}\r\n\t\t\t\t\t\t\t\tdata-first-name={player.firstName}\r\n\t\t\t\t\t\t\t\tdata-last-name={player.lastName}\r\n\t\t\t\t\t\t\t\tselected={selectedIndex === i && !idsInTeam?.includes(player.personId)}\r\n\t\t\t\t\t\t\t\tdisabled={idsInTeam?.includes(player.personId) || roster!.length >= maxTeamSize}\r\n\t\t\t\t\t\t\t\tkey={`select-${teamId}-${player.personId}`}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{player.firstName} {player.lastName}\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t</LazyLoad>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</List>\r\n\t\t</div>\r\n\t)\r\n}","export const getScrollBarStyles = (selector: string, scrollBarWidth?: number, height?: number) => {\r\n  return {\r\n    [`& ${selector}`]: {\r\n      overflowY: 'scroll',\r\n      height: height ?? 'auto'\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar`]: {\r\n      width: scrollBarWidth ?? 4\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-track`]: {\r\n      backgroundColor: '#0004',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-thumb`]: {\r\n      backgroundColor: '#FFFA',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    }\r\n  }\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const usePopover = makeStyles({\r\n    paper: {\r\n        overflow: 'visible',\r\n        ...getScrollBarStyles('.resultsList', 4, 200),\r\n    }\r\n})\r\n","import React, { ChangeEvent } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTableRow,\r\n\tTableCell,\r\n\tPopover\r\n} from '@material-ui/core'\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { IPlayerSearchResult, Player } from '../../Types/playerTypes';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { usePopover } from './UndraftedRow.style'\r\n\r\nexport interface IRemainingRowsProps {\r\n\tteamId: number;\r\n\taddPlayer: (personId: string, playerList: Array<IPlayerSearchResult>) => Promise<void>;\r\n\troster: Array<Player>;\r\n}\r\n\t\r\nexport const UndraftedRow = (props: IRemainingRowsProps): JSX.Element => {\r\n\tconst { addPlayer, teamId, roster } = props;\r\n\r\n\tconst popoverClasses = usePopover();\r\n\t\r\n\tconst [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n\tconst id = open ? 'simple-popover' : undefined;\r\n\t\r\n\treturn (\r\n\t\t<TableRow>\r\n\t\t\t<TableCell className='add-remove-button-cell'>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tsize='small'\r\n\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</IconButton>\r\n\t\t\t\t<Popover\r\n\t\t\t\t\tid={id}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tanchorEl={anchorEl}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttransformOrigin={{\r\n\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tclasses={popoverClasses}\r\n\t\t\t\t>\r\n        \t<PlayerSelect \r\n\t\t\t\t\t\tteamId={teamId}\r\n\t\t\t\t\t\troster={roster}\r\n\t\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\t\tkey={`player-select-${id}`}\r\n\t\t\t\t\t/>\r\n      \t</Popover>\r\n\t\t\t</TableCell>\r\n\t\t\t<TableCell className='headshot-cell mock-player'>\r\n\t\t\t\t\t<AccountCircleIcon className='mock-player-icon' />\r\n\t\t\t</TableCell>\r\n\t\t\t<TableCell className='mock-player'>\r\n\t\t\t\tUndrafted\r\n\t\t\t</TableCell>\r\n\t\t</TableRow>\r\n\t)\r\n}\r\n","import React, { useContext } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tAvatar\r\n} from '@material-ui/core'\r\nimport { IPlayerSearchResult, Player } from '../../Types/playerTypes';\r\nimport { useTableContainerStyles } from './RosterTable.styles';\r\nimport { maxTeamSize, getSeasonStats } from '../../Util';\r\nimport { UndraftedRow } from './UndraftedRow'\r\n\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\n\r\nexport interface IRosterTableProps {\r\n\tteamId: number;\r\n\troster: Array<Player>;\r\n\taddPlayer: (personId: string, playerList: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tremovePlayer: (personId: string) => void;\r\n}\r\n\r\nexport const RosterTable = (props: IRosterTableProps): JSX.Element => {\r\n\tconst { teamId, roster, removePlayer, addPlayer } = props;\r\n\r\n\tconst { selectedYear } = useContext(settingsContext).settings;\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\r\n\tconst truncatePlayerName = (firstName: string, lastName: string): string => {\r\n\t\t// to do\r\n\t\t// http://www.java2s.com/Tutorials/Javascript/Javascript_Style_How_to/Text/Detect_text_overflow.htm\r\n\t\tconst maxLength = \"Giannis Antetokounmpo\".length\r\n\t\treturn `${firstName} ${lastName}`.length >= maxLength ? `${firstName[0]}. ${lastName}` : `${firstName} ${lastName}`;\r\n\t}\r\n\r\n\tconst playerRows = roster.map((player: Player) => {\r\n\t\tconst { personId, firstName, lastName, stats } = player;\r\n\t\treturn (\r\n\t\t\t<TableRow key={`roster-table-row-${teamId}-${personId}`}>\r\n\t\t\t\t<TableCell className='add-remove-button-cell'>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={() => removePlayer(player.personId)}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell className={`headshot-cell ${getSeasonStats(player, selectedYear as number).min > 0 ? '' : 'no-stats' }`}>\r\n\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\tsrc={`https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/${personId}.png`}\r\n\t\t\t\t\t\tclassName='headshot'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName={`name-cell ${getSeasonStats(player, selectedYear as number).min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t>\r\n\t\t\t\t\t{truncatePlayerName(firstName, lastName)}\r\n\t\t\t\t</TableCell>\r\n\t\t\t</TableRow>\r\n\t\t)\r\n\t})\r\n\r\n\tconst undraftedRows: Array<JSX.Element> = []\r\n\r\n\twhile (roster.length + undraftedRows.length < maxTeamSize) {\r\n\t\tundraftedRows.push(\r\n\t\t\t<UndraftedRow\r\n\t\t\t\tteamId={teamId}\r\n\t\t\t\troster={roster}\r\n\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\t\r\n\t\t\t<Table padding='none' size='small'>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{playerRows}\r\n\t\t\t\t\t{undraftedRows}\r\n\t\t\t\t</TableBody>\t\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util'\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n    root: {\r\n        height: '100%',\r\n        width: '40%',\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n        '& td': {\r\n            textTransform: 'uppercase',\r\n            padding: '0px 6px'\r\n        },\r\n        '& td.stat-label' : {\r\n            maxWidth: '50px',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            textAlign: 'left'\r\n        },\r\n        '& td.stat-value' : {\r\n            minWidth: '50%',\r\n            textAlign: 'right'\r\n        },\r\n        '& td.best' : {\r\n            backgroundColor: nbaBlue,\r\n            color: 'white'\r\n        }\r\n    }\r\n})\r\n","import React, { useContext } from 'react';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport {\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer\r\n} from '@material-ui/core'\r\nimport { useTableContainerStyles } from './TotalStatsTable.styles';\r\nimport { calcTotalStatsArray, isBestInCategory } from '../../Util';\r\nimport { IStatCategory, ITeamTotalStats } from '../../Types/teamTypes';\r\n\r\nexport interface ITotalStatsTableProps {\r\n\tteamId: number;\r\n\ttotalStats: ITeamTotalStats;\r\n}\r\n\r\nexport const TotalStatsTable = (props: ITotalStatsTableProps): JSX.Element => {\r\n\tconst { teamId, totalStats } = props;\r\n\r\n\tconst { appStats } = useContext(appStatsContext);\r\n\tconst { settings } = useContext(settingsContext);\r\n\r\n\r\n\tconst totalStatsArray = calcTotalStatsArray(totalStats);\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\r\n\t\t\t<Table>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{totalStatsArray.map((stat: IStatCategory) => {\r\n\t\t\t\t\t\tconst { label, total } = stat;\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableRow key={`total-stats-row-${teamId}-${stat.label}`}>\r\n\t\t\t\t\t\t\t\t<TableCell className='stat-label'>\r\n\t\t\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\tclassName={`stat-value ${isBestInCategory(total, label, appStats) ? 'best' : ''}`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{total.toFixed(1)}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const useAccordionStyles = makeStyles({\r\n\troot: {\r\n\t\twidth: 'calc(100% - 12)',\r\n\t\theight: 'fit-content',\r\n\t\t'& tr:nth-child(odd)' : {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& tr:nth-child(even)' : {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n\t\tmargin: '6px !important',\r\n    padding: '6px !important',\r\n\t}\r\n})\r\n\r\nexport const useAccordionSummaryStyles = makeStyles({\r\n\troot: {\r\n\t\tminHeight: '0px',\r\n\t\tpadding: '0px',\r\n\t\toverflow: 'hidden',\r\n\t\t'& :hover': {\r\n\t\t\t\tcursor: 'default'\r\n\t\t},\r\n\t},\r\n\texpanded: {\r\n\t\tminHeight: '0px !important',\r\n\t\t'& .Mui-expanded': {\r\n\t\t\t\tmargin: '12px 0px',\r\n\t\t}\r\n\t},\r\n\tcontent: {\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tmargin: '0px !important',\r\n\t\t'& .teamLabel': {\r\n\t\t\tflexGrow: 2,\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tpaddingTop: '3px',\r\n\t\t\tpaddingLeft: '6px'\r\n\t\t}\r\n\t},\r\n});\r\n\r\nexport const useAccordionDetailStyles = makeStyles({\r\n\troot: {\r\n\t\tflexDirection: 'column',\r\n\t\tpadding: '2px'\r\n\t}\r\n})\r\n\r\nexport const useGridStyles = makeStyles({\r\n\troot: {\r\n\t\tflexWrap: 'nowrap',\r\n\t\theight: '200px',\r\n\t\t...getScrollBarStyles('.MuiTableContainer-root')\r\n\t}\r\n})","import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseContext,\r\n\tMouseEvent,\r\n\tChangeEvent\r\n} from 'react';\r\nimport {\r\n\tAccordion,\r\n\tAccordionSummary,\r\n\tAccordionDetails,\r\n\tGrid,\r\n\tIconButton,\r\n} from '@material-ui/core'\r\nimport { IStatCategory, ITeam, ITeamTotalStats } from '../../Types/teamTypes';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { \r\n\tcalcTotalStats,\r\n\tgetPlayerStats,\r\n\tmaxTeamSize,\r\n\tcalcRelativeStatsV2,\r\n\tcalcTotalStatsArray,\r\n} from '../../Util';\r\nimport { RosterTable } from './RosterTable'\r\nimport { TotalStatsTable } from './TotalStatsTable';\r\nimport { \r\n\tuseAccordionStyles,\r\n\tuseAccordionSummaryStyles,\r\n\tuseAccordionDetailStyles,\r\n\tuseGridStyles\r\n} from './Team.styles';\r\n\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport CropDinIcon from '@material-ui/icons/CropDin';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { IPlayerSearchResult, Player } from '../../Types/playerTypes';\r\n\r\nexport const Team = (props: ITeam) => {\r\n\tconst { id } = props;\r\n\tconst [ isExpanded, setIsExpanded ] = useState(true);\r\n\r\n\tconst { teamList, removeTeam, setTeamList } = useContext(teamListContext);\r\n\tconst { setAppStats } = useContext(appStatsContext);\r\n\tconst { selectedYear } = useContext(settingsContext).settings;\r\n\r\n\tconst accordionClasses = useAccordionStyles();\r\n\tconst accordionSummaryClasses = useAccordionSummaryStyles();\r\n\tconst accordionDetailClasses = useAccordionDetailStyles();\r\n\tconst gridClasses = useGridStyles();\r\n\t\r\n\tconst index = teamList.findIndex(team => team.id === id);\r\n\tconst roster = teamList[index].roster;\r\n\tconst color = teamList[index].color;\r\n\tconst totalStats: ITeamTotalStats = calcTotalStats(roster, selectedYear as number);\r\n\tconst totalStatsArray: Array<number> = calcTotalStatsArray(totalStats).map((stat: IStatCategory) => stat.total);\r\n\r\n\tuseEffect(() => {\r\n\t\tteamList[index].totalStats = calcTotalStats(roster, selectedYear as number);\r\n\t\tsetTeamList([...teamList]);\r\n\t\tconsole.log(selectedYear)\r\n\t}, [roster.length, selectedYear])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst relativeStats = calcRelativeStatsV2(teamList)\r\n\t\tsetAppStats(relativeStats);\r\n\t}, [...totalStatsArray, teamList.length, selectedYear])\r\n\r\n\t// const [ localRoster, setLocalRoster ] = useState({});\r\n\r\n\tconst minimize = (event: MouseEvent) => {\r\n\t\tsetIsExpanded(!isExpanded);\r\n\t}\r\n\r\n\tconst maximize = (event: MouseEvent) => {\r\n\t\t// stub\r\n\t}\r\n\r\n\tconst close = (event: MouseEvent) => {\r\n\t\tremoveTeam(id)\r\n\t}\r\n\r\n\tconst addPlayer = async (personId: string, playerList: Array<IPlayerSearchResult>): Promise<void> => {\r\n\t\tconst { firstName, lastName } = playerList.find(player => player.personId === personId)!;\r\n\t\tconst { latest, regularSeason } = (await getPlayerStats(personId)).stats;\r\n\t\t\r\n\t\tfor (const stat in latest) {\r\n\t\t\tif (typeof latest[stat] === 'string') {\r\n\t\t\t\tlatest[stat] = latest[stat] !== '-1' ? parseFloat(latest[stat] as string) : 0\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tconst { season } = regularSeason;\r\n\t\tfor (const year in season) {\r\n\t\t\tfor (const category in season[year].total) {\r\n\t\t\t\tconst stat = season[year].total[category];\r\n\t\t\t\tif (typeof stat === 'string') {\r\n\t\t\t\t\tseason[year].total[category] = stat !== '-1' ? parseFloat(stat) : 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst stats = {\r\n\t\t\tlatest,\r\n\t\t\tregularSeason: {\r\n\t\t\t\tseason\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst player: Player = {\r\n\t\t\tpersonId,\r\n\t\t\tfirstName,\r\n\t\t\tlastName,\r\n\t\t\tstats\r\n\t\t};\r\n\t\troster.push(player);\r\n\t\tteamList[index].roster = roster;\r\n\t\tsetTeamList([...teamList]);\r\n\t\tconsole.log(player)\r\n\t}\r\n\r\n\tconst removePlayer = (personId: string): void => {\r\n\t\tteamList[index].roster = roster.filter(player => player.personId !== personId);\r\n\t\tsetTeamList([...teamList]);\r\n\t}\r\n\r\n\t// PersonAdd icon\r\n\t// FilterNone (for copy)\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Accordion\r\n\t\t\t\tclasses={accordionClasses}\r\n\t\t\t\t// square\r\n\t\t\t\texpanded={isExpanded}\r\n\t\t\t>\r\n\t\t\t\t<AccordionSummary\r\n\t\t\t\t\taria-label=\"Expand\"\r\n\t\t\t\t\taria-controls=\"additional-actions1-content\"\r\n\t\t\t\t\tclasses={accordionSummaryClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className='teamLabel'>\r\n\t\t\t\t\t\t{/* <RadioButtonUncheckedIcon\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundColor: color,\r\n\t\t\t\t\t\t\t\tfill: 'white',\r\n\t\t\t\t\t\t\t\tborderRadius: '20px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t<span>Team {id} ({roster.length}{roster.length >= maxTeamSize && '*'})</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={minimize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{ isExpanded ? <MinimizeIcon /> : <CropDinIcon /> }\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={maximize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<LaunchIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={close}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</AccordionSummary>\r\n\t\t\t\t<AccordionDetails\r\n\t\t\t\t\tclasses={accordionDetailClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tdirection='row'\r\n\t\t\t\t\t\tclasses={gridClasses}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RosterTable\r\n\t\t\t\t\t\t\tteamId={id} \r\n\t\t\t\t\t\t\troster={roster}\r\n\t\t\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\t\t\tremovePlayer={removePlayer}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TotalStatsTable\r\n\t\t\t\t\t\t\tteamId={id}\r\n\t\t\t\t\t\t\ttotalStats={totalStats ?? {}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</AccordionDetails>\r\n\t\t\t</Accordion>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { Team } from '../Team/Team';\r\nimport { ITeam } from '../../Types/teamTypes';\r\n\r\nexport const AllTeamsContainer = (): JSX.Element => {\r\n\tconst context = React.useContext(teamListContext)\r\n\tconst { teamList } = context;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{teamList.map((teamProps: ITeam): React.ReactNode => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Team\r\n\t\t\t\t\t\tkey={teamProps.id}\r\n\t\t\t\t\t\t{...teamProps}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from './SharedStyles/SharedStyles';\r\nimport { nbaBlue } from './Util';\r\n\r\nexport const useAppGridStyles = makeStyles({\r\n\troot: {\r\n\t\tbackgroundColor: nbaBlue,\r\n\t\t...getScrollBarStyles('.sidebar-scrollbar', 8),\r\n\t\t...getScrollBarStyles('.visualizations-container', 8),\r\n\t}\r\n})","import { makeStyles } from '@material-ui/core';\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\n\r\nexport const useSettingsPanelStyles = makeStyles({\r\n  root: {\r\n    '& .MuiCheckbox-root.Mui-checked': {\r\n      color: nbaRed\r\n    }\r\n  }\r\n})","import React, { useContext, useEffect } from 'react';\r\nimport { List, ListItem, Checkbox } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsPanel = () => {\r\n\r\n  const { settings, setSettings } = useContext(settingsContext);\r\n  const { visibleStats } = settings;\r\n  const settingsArray: Array<{label: string, show: boolean}> = [];\r\n  for (const key in visibleStats) {\r\n    settingsArray.push({label: key, show: visibleStats[key]})\r\n  }\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation();\r\n    const { value } = event.currentTarget.dataset\r\n    visibleStats[value!] = !visibleStats[value!]\r\n    settings.visibleStats = visibleStats;\r\n    setSettings({...settings})\r\n  };\r\n\r\n  const settingsClasses = useSettingsPanelStyles()\r\n\r\n  return (\r\n    <List\r\n      dense\r\n      classes={settingsClasses}\r\n    >\r\n      {settingsArray.map(category => {\r\n        const { label, show } = category;\r\n        return (\r\n          <ListItem\r\n            button\r\n            data-value={label}\r\n            onClick={handleClick}\r\n          >\r\n            <Checkbox\r\n              checked={show}\r\n            />\r\n            <span style={{textTransform: 'uppercase'}}>{label}</span>\r\n          </ListItem>\r\n        )\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { IconButton, Popover } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { SettingsPanel } from '../SettingsPanel/SettingsPanel';\r\n\r\nexport const SettingsButton = () => {\r\n\r\n\r\n  const teamList = useContext(teamListContext); \r\n  const appStats = useContext(appStatsContext); \r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={handleClick}\r\n      >\r\n\t\t\t  <VisibilityIcon style={{color: '#FFF'}} />\r\n\t\t  </IconButton>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <SettingsPanel />\r\n      </Popover>\r\n    </>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util';\r\n\r\nconst padding = 6\r\nconst margin = 6;\r\n\r\nexport const useBarChartStyles = makeStyles({\r\n  root: {\r\n    width: `calc(100% - ${margin * 2}px - ${padding * 2}px)`,\r\n    margin,\r\n    padding,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    '& h4': {\r\n      textTransform: 'uppercase',\r\n      margin: 0\r\n    },\r\n    '& svg' : {\r\n      overflow: 'visible',\r\n      marginBottom: 20\r\n    },\r\n    '& rect:nth-child(odd)': {\r\n      fill: 'lightgray',\r\n    },\r\n    '& rect:nth-child(even)': {\r\n      fill: '#bbbbbb',\r\n    },\r\n    '& rect:hover': {\r\n      opacity: 1 \r\n    },\r\n    '& .player-name-label': {\r\n      opacity: .25\r\n    },\r\n    '& .player-name-label:hover': {\r\n      opacity: 1,\r\n      cursor: 'default'\r\n    },\r\n    '& .best rect:nth-child(odd)': {\r\n      fill: nbaBlue\r\n    },\r\n    '& .best rect:nth-child(even)' : {\r\n      fill: '#3560b3'\r\n    },\r\n    '& .best .player-name-label' : {\r\n      fill: 'white'\r\n    }\r\n  }\r\n})\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Card } from '@material-ui/core';\r\nimport * as d3 from 'd3';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useBarChartStyles } from './BarChart.styles';\r\nimport { isBestInCategory, getSeasonStats } from '../../Util'\r\nimport { stat } from 'fs';\r\n\r\nexport interface IStackedBarChartProps {\r\n  statCategory: string\r\n}\r\n\r\ninterface ITeamBar {\r\n  teamId: number;\r\n  teamTotal: number;\r\n  individualBars: Array<IIndividualBar>;\r\n}\r\n\r\ninterface IIndividualBar {\r\n  personId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  statValue: number;\r\n  xPos: number;\r\n  barWidth: number;\r\n}\r\n\r\nexport const StackedBarChart = (props: IStackedBarChartProps) => {\r\n  const { statCategory } = props;\r\n  const { appStats } = useContext(appStatsContext);\r\n  const { teamList } = useContext(teamListContext);\r\n  const { selectedYear } = useContext(settingsContext).settings;\r\n  const barChartClasses = useBarChartStyles();\r\n\r\n  const { [statCategory]: min } = appStats.min;\r\n  const { [statCategory]: median } = appStats.median;\r\n  const { [statCategory]: max } = appStats.max;\r\n\r\n  useEffect(() => {\r\n    const barPadding = 2;\r\n    const barHeight = 30;\r\n    const svgHeight = teamList.length * barHeight;\r\n    const svgWidth = 1000;\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, max || 100])\r\n      .range([0, svgWidth]);\r\n    const xAxis = d3.axisBottom(xScale);\r\n        \r\n    const dataset: Array<ITeamBar> = teamList.map((team) => {\r\n      const barWidths: Array<number> = team.roster.map((player) => {\r\n        const selectedSeasonStats = getSeasonStats(player, selectedYear as number)\r\n        return selectedSeasonStats ? xScale(selectedSeasonStats[statCategory] as number) : 0;\r\n      })\r\n\r\n      const individualBars = team.roster.map((player, i) => {\r\n        const { personId, firstName, lastName } = player\r\n        const selectedSeasonStats = getSeasonStats(player, selectedYear as number);\r\n        const statValue = selectedSeasonStats ? selectedSeasonStats[statCategory] as number : 0;\r\n        const xPos = i === 0 ? 0 : barWidths.reduce((acc, cur, idx) => idx < i ? acc + cur : acc); \r\n        const barWidth = barWidths[i];\r\n        return { personId, firstName, lastName, statValue, xPos, barWidth };\r\n      });\r\n\r\n      return {\r\n        teamId: team.id,\r\n        teamTotal: team.totalStats[statCategory],\r\n        individualBars\r\n      };\r\n    });\r\n\r\n    const svg = d3.select(`.bar-chart-container.${statCategory} svg`)\r\n      .attr('width', svgWidth)\r\n      .attr('height', svgHeight);\r\n\r\n    // bar\r\n    svg.selectAll(`.bar-chart-container.${statCategory}`)\r\n      .data(dataset)\r\n      .enter()\r\n      .append('g')\r\n        .attr('transform', (d, i) => `translate(0, ${barHeight * i})`)\r\n        .attr('data-team-id', (d) => d.teamId)\r\n        .classed('best', (d) => isBestInCategory(d.teamTotal, statCategory, appStats))\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d: any) => d.individualBars)\r\n      .enter()\r\n      .append('rect')\r\n        .attr('x', (d: any) => d.xPos)\r\n        .attr('width', (d: any) => d.barWidth)\r\n        .attr('height', barHeight - barPadding)\r\n        .attr('data-person-id', (d: any) => d.personId)\r\n    \r\n    // team label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => `Team ${d.teamId}`)\r\n        .attr('x', -6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'end')\r\n        .attr('alignment-baseline', 'middle')\r\n\r\n    // total stat label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => d.teamTotal.toFixed(1))\r\n        .attr('x', (d: any) => xScale(d.teamTotal) + 6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('alignment-baseline', 'middle')\r\n      \r\n    // player name label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d: any) => d.individualBars)\r\n      .enter()\r\n      .append('text')\r\n        .text((d: any) => `${d.firstName[0]}. ${d.lastName} ${d.statValue.toFixed(1)}`)\r\n        .attr('x', (d: any) => d.xPos + (d.barWidth / 2))\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('alignment-baseline', 'middle')\r\n        .classed('player-name-label', true)\r\n\r\n    // x axis label\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${svgHeight})`)\r\n      .call(xAxis);\r\n  \r\n    return () => { svg.html(null) };\r\n  });\r\n\r\n  return (\r\n    <Card\r\n      classes={barChartClasses}\r\n      className={`bar-chart-container ${statCategory}`}\r\n    >\r\n      <h4>{statCategory}</h4>\r\n      <svg />\r\n    </Card>\r\n  )\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { Card } from '@material-ui/core';\r\nimport { defaultCategories } from '../../Util';\r\nimport { StackedBarChart } from '../BarChart/StackedBarChart';\r\n\r\nexport const Visualizations = () => {\r\n  const { teamList, setTeamList } = useContext(teamListContext);\r\n\r\n  const { settings, setSettings } = useContext(settingsContext);\r\n  const { visibleStats } = settings;\r\n\r\n  let showStatsArray: Array<string> = [];\r\n  for (const key in visibleStats) {\r\n    if(!visibleStats[key]) { continue }\r\n    showStatsArray.push(key)\r\n  }\r\n\r\n  return (\r\n    <div style={{width: '100%'}}>\r\n      {showStatsArray.map(category => {\r\n        return (\r\n          <StackedBarChart statCategory={category}/>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import { makeStyles } from '@material-ui/core'\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\n\r\nexport const useSeasonSelectStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 4,\r\n    '& .MuiFormLabel-root.Mui-focused': {\r\n      color: nbaRed,\r\n    },\r\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline' : {\r\n      borderColor: nbaRed\r\n    }\r\n  }\r\n})","import React, { useContext, useEffect } from 'react';\r\nimport { Select, FormControl, InputLabel, MenuItem, makeStyles, createStyles, Theme } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSeasonSelectStyles } from './SeasonSelect.style'\r\n\r\n\r\nexport const SeasonSelect = () => {\r\n  const { settings, setSelectedYear } = useContext(settingsContext);\r\n  const { selectedYear } = settings;\r\n\r\n  const seasonSelectClasses = useSeasonSelectStyles();\r\n\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    const { value } = event.target;\r\n    setSelectedYear(value as number);\r\n  };\r\n\r\n  return (\r\n    <FormControl\r\n      variant='outlined'\r\n      classes={seasonSelectClasses}\r\n    >\r\n      <InputLabel>Season</InputLabel>\r\n      <Select\r\n        value={selectedYear}\r\n        onChange={handleChange}\r\n        autoWidth\r\n      >\r\n        <MenuItem value={2020}>2020 - 2021</MenuItem>\r\n        <MenuItem value=''>2020 Playoffs</MenuItem>\r\n        <MenuItem value={2019}>2019 - 2020</MenuItem>\r\n        <MenuItem value={2018}>2018 - 2019</MenuItem>\r\n        <MenuItem value={2017}>2017 - 2018</MenuItem>\r\n        <MenuItem value={2016}>2016 - 2017</MenuItem>\r\n        <MenuItem value={2015}>2015 - 2016</MenuItem>\r\n        <MenuItem value={2014}>2014 - 2015</MenuItem>\r\n        <MenuItem value={2013}>2013 - 2014</MenuItem>\r\n        <MenuItem value={2012}>2012 - 2013</MenuItem>\r\n        <MenuItem value={2011}>2011 - 2012</MenuItem>\r\n        <MenuItem value={2010}>2010 - 2011</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PlayerListContextProvider } from './Contexts/PlayerListContext'\r\nimport { TeamListContextProvider } from './Contexts/TeamListContext'\r\nimport { AppStatsContextProvider } from './Contexts/AppStatsContext'\r\nimport { SettingsContextProvider } from './Contexts/SettingsContext'\r\nimport { Grid } from '@material-ui/core';\r\nimport { AddTeamButton } from './components/AddTeamButton/AddTeamButton';\r\nimport { AllTeamsContainer } from './components/AllTeamsContainer/AllTeamsContainer';\r\nimport { useAppGridStyles } from './App.styles';\r\nimport { SettingsButton } from './components/SettingsButton/SettingsButton';\r\nimport { Visualizations } from './components/Visualizations/Visualizations';\r\nimport { SeasonSelect } from './components/SeasonSelect/SeasonSelect';\r\n\r\nfunction App() {\r\n\r\n  const appGridClasses = useAppGridStyles();\r\n\r\n  return (\r\n    <AppStatsContextProvider>\r\n      <PlayerListContextProvider>\r\n        <TeamListContextProvider>\r\n          <SettingsContextProvider>\r\n            <Grid\r\n              container\r\n              direction='column'\r\n              classes={appGridClasses}\r\n            >\r\n\r\n              {/* top 10% */}\r\n              <Grid\r\n                item\r\n                md={12}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                  style={{height: '10vh',}}\r\n                  alignItems='center'\r\n                  justify='space-between'\r\n                >\r\n                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                      <AddTeamButton />\r\n                      <SettingsButton />\r\n                      <SeasonSelect />\r\n                    </div>\r\n                    <h1 style={{color: '#FFF', margin: '0px 12px 0px 0px'}}>www.leaguemaps.com</h1>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* bottom 90% */}\r\n              <Grid\r\n                item\r\n                md={12}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                >\r\n\r\n                  {/* left 25% */}\r\n                  <Grid\r\n                    item\r\n                    md={3}\r\n                    style={{height: '90vh', overflowY: 'scroll'}}\r\n                    className='sidebar-scrollbar'\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction='column'\r\n                     \r\n                    >\r\n                        <AllTeamsContainer />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* right 75% */}\r\n                  <Grid\r\n                    item\r\n                    md={9}\r\n                    style={{height: '90vh', overflowY: 'scroll'}}\r\n                    className='visualizations-container'\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction='column'\r\n                     \r\n                    >\r\n                      <Visualizations />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </SettingsContextProvider>\r\n        </TeamListContextProvider>\r\n      </PlayerListContextProvider>\r\n    </AppStatsContextProvider>\r\n  );\r\n}\r\n\r\n// Did LeagueMaps help you win money in your fantasy league?\r\n// A modest $9 donation pays to keep LeagueMaps online for another 6 months...just in time for your draft next season\r\n\r\n// https://www.d3-graph-gallery.com/barplot.html\r\n// https://www.apollographql.com/blog/layering-graphql-on-top-of-rest-569c915083ad/\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}