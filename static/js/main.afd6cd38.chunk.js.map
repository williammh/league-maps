{"version":3,"sources":["Contexts/AllPlayersContext.tsx","Util.ts","Contexts/TeamListContext.tsx","Contexts/AppStatsContext.tsx","Contexts/SettingsContext.tsx","components/AddTeamButton/AddTeamButton.tsx","SharedStyles/SharedStyles.ts","components/Team/RosterTable.styles.ts","components/Team/PlayerSelect.tsx","components/Team/UndraftedRow.tsx","components/Team/TeamStatsTable.styles.ts","components/Team/RosterTable.tsx","components/Team/TeamStatsTable.tsx","components/Team/Team.styles.ts","components/Team/Team.tsx","components/AllTeamsContainer/AllTeamsContainer.tsx","App.styles.ts","components/SettingsButton/SettingsPane.styles.ts","components/SettingsButton/SettingsPanel.tsx","components/SettingsButton/SettingsButton.tsx","components/BarChart/BarChart.styles.ts","components/BarChart/StackedBarChart.tsx","components/Visualizations/Visualizations.tsx","components/SeasonSelect/SeasonSelect.style.ts","components/SeasonSelect/SeasonSelect.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allPlayersContext","React","createContext","AllPlayersContextProvider","props","useState","allPlayers","setAllPlayers","Provider","value","children","statCategories","calculatedCategories","invertedCategories","excludeCategories","defaultCategories","nbaRed","nbaBlue","getAllPlayers","a","year","Date","getFullYear","fetch","playerListResponse","json","playerList","console","log","league","standard","getPlayerStats","personId","currentYear","playerStatsResponse","ok","playerStatsJson","stats","regularSeason","season","total","min","calcTotalStats","roster","selectedYear","result","filter","category","includes","forEach","player","selectedSeasonStats","getSeasonStats","calcStatsArray","statsObject","key","push","label","calcAllTotalStats","teamList","categories","team","teamStats","calcMin","arr","reduce","acc","cur","calcMax","calcMedian","sort","b","length","calcMean","isBestInCategory","best","max","selectedStats","find","seasonYear","teamListContext","TeamListContextProvider","initialTeamList","id","setTeamList","addTeam","removeTeam","appStatsContext","AppStatsContextProvider","median","appStats","setAppStats","settingsContext","SettingsContextProvider","defaultSelectedStats","allCategories","index","indexOf","setSelectedStats","setSelectedYear","useEffect","response","AddTeamButton","useContext","IconButton","onClick","style","color","getScrollBarStyles","selector","scrollBarWidth","height","overflowY","width","backgroundColor","borderRadius","useTableContainerStyles","makeStyles","root","marginRight","overflowX","display","border","paddingBottom","opacity","fill","lineHeight","cursor","overflow","textOverflow","paddingLeft","whiteSpace","usePopoverStyles","popper","padding","borderColor","PlayerSelect","teamId","addPlayer","searchString","setSearchString","searchResults","setSearchResults","selectedIndex","setSelectedIndex","rosterIds","map","resultsContainerRef","useRef","lazyLoadHeight","firstName","lastName","isActive","isMatch","handleClick","currentTarget","dataset","searchStringLower","toLowerCase","firstNameLower","lastNameLower","startsWith","TextField","type","variant","onChange","target","onKeyDown","event","stopPropagation","current","scrollTop","autoFocus","focused","List","disablePadding","ref","i","offsetTop","className","ListItem","button","data-person-id","selected","disabled","UndraftedRow","openTooltip","setOpenTooltip","popoverClasses","playerSelect","TableRow","ClickAwayListener","onClickAway","TableCell","Tooltip","title","disableFocusListener","disableHoverListener","disableTouchListener","open","interactive","classes","size","marginLeft","textTransform","textAlign","paddingRight","useTooltipStyles","tooltip","paddingTop","maxHeight","position","top","margin","fontSize","RosterTable","removePlayer","handleTooltipClose","handleTooltipOpen","parseInt","tableContainerClasses","tooltipClasses","document","querySelectorAll","nameCell","scrollWidth","clientWidth","fullName","innerHTML","split","join","toString","playerRows","playerSeasonStats","playerStatsArray","playerTooltip","Table","TableBody","toFixed","Avatar","src","arrow","data-index","undraftedRows","TableContainer","TeamStatsTable","teamStatsArray","useAccordionStyles","maxWidth","marginTop","minWidth","useAccordionSummaryStyles","minHeight","content","justifyContent","flexGrow","useAccordionDetailStyles","flexDirection","useGridStyles","flexWrap","alignItems","Team","isExpanded","setIsExpanded","accordionClasses","accordionSummaryClasses","accordionDetailClasses","gridClasses","findIndex","totalStatsArray","relativeStats","allTotalStats","calcRelativeStatsV2","stat","latest","parseFloat","marginBottom","Accordion","expanded","AccordionSummary","aria-label","aria-controls","AccordionDetails","Grid","container","direction","AllTeamsContainer","teamProps","useAppGridStyles","useSettingsPanelStyles","SettingsPanel","settingsArray","show","dense","data-value","Checkbox","checked","SettingsButton","settingsClasses","anchorEl","setAnchorEl","Boolean","undefined","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","useBarChartStyles","chartCardMargin","chartCardPadding","StackedBarChart","statCategory","barChartClasses","barHeight","svgHeight","svgWidth","querySelector","xScale","d3","domain","range","xAxis","barWidths","individualBars","statValue","xPos","idx","barWidth","teamTotal","svg","attr","selectAll","data","enter","append","d","classed","text","call","html","Card","Visualizations","showStatsArray","Object","keys","useSeasonSelectStyles","SeasonSelect","seasonSelectClasses","FormControl","InputLabel","Select","autoWidth","MenuItem","App","appGridClasses","item","md","justify","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afd6cd38.chunk.js","sourcesContent":["import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tDispatch,\r\n\tSetStateAction\r\n} from 'react';\r\nimport { IPlayerSearchResult } from '../Types/types';\r\n\r\nconst allPlayersContext = React.createContext({} as IAllPlayersContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface IAllPlayersContext {\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n\tsetAllPlayers: Dispatch<SetStateAction<Array<IPlayerSearchResult>>>\r\n}\r\n\r\nconst AllPlayersContextProvider = (props: ContextProviderProps): JSX.Element => {\r\n\tconst [allPlayers, setAllPlayers] = useState([] as Array<IPlayerSearchResult>);\r\n\r\n\treturn (\r\n\t\t<allPlayersContext.Provider value={{allPlayers,  setAllPlayers}}>\r\n\t\t\t{props.children}\r\n\t\t</allPlayersContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {AllPlayersContextProvider, allPlayersContext}","import {\r\n\tITeamStats,\r\n\tIStatCategory,\r\n\tIRelativeStats,\r\n\tIRelativeStatsV2,\r\n\tITeam,\r\n\tIPlayerSearchResult,\r\n\tIStatSearchResult,\r\n\tPlayer\r\n} from './Types/types';\r\n\r\nexport const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport const maxTeamSize = 15;\r\n\r\nexport const statCategories: Array<string> = [\r\n\t/** points per game */\r\n\t'ppg',\r\n\t/** rebounds per game */\r\n\t'rpg',\r\n\t/** assists per game */\r\n\t'apg', \r\n\t/** minutes per game */\r\n\t'mpg', \r\n\t/** turnovers per game */\r\n\t'topg', \r\n\t/** steals per game */\r\n\t'spg', \r\n\t/** blocks per game */\r\n\t'bpg',\r\n\t\t/** three point percentage */\r\n\t'tpp', \r\n\t/** free throw percentage */\r\n\t'ftp', \r\n\t/** field goal percentage */\r\n\t'fgp', \r\n\r\n\t'assists',\r\n\r\n\t'blocks',\r\n\r\n\t'steals',\r\n\r\n\t'turnovers',\r\n\r\n\t'offReb',\r\n\r\n\t'defReb',\r\n\r\n\t'totReb',\r\n\r\n\t/** field goals made */\r\n\t'fgm',\r\n\t/** field goals attempted */\r\n\t'fga',\r\n\t/** three pointers made */ \r\n\t'tpm',\r\n\t/** three pointers attemped */\r\n\t'tpa',\r\n\t/** free throws made */\r\n\t'ftm',\r\n\t/** free throws attempted */\r\n\t'fta',\r\n\t/** personal fouls */\r\n\t'pFouls',\r\n\r\n\t'points',\r\n\r\n\t'gamesPlayed',\r\n\r\n\t'gamesStarted',\r\n\r\n\t'plusMinus',\r\n\r\n\t'min',\r\n\r\n\t'dd2',\r\n\r\n\t'td3',\r\n\r\n\t'seasonYear',\r\n\r\n\t'seasonStageId'\r\n];\r\n\r\nexport const percentageCategories = [\r\n\t/** three point percentage */\r\n\t'tpp',\r\n\t/** free throw percentage */\r\n\t'ftp',\r\n\t/** field goal percentage */\r\n\t'fgp'\r\n];\r\n\r\nexport const calculatedCategories = [\r\n\t/** field goals made per game */\r\n\t'fgmpg',\r\n\t/** field goals attempted per game */\r\n\t'fgapg',\r\n\t/** three pointers made per game */\r\n\t'tpmpg',\r\n\t/** three pointers attempted per game */\r\n\t'tpapg',\r\n\t/** free throws made per game */\r\n\t'ftmpg',\r\n\t/** free throws attempted per game */\r\n\t'ftapg',\r\n\t/** personal fouls per game */\r\n\t'pfpg'\r\n];\r\n\r\nexport const invertedCategories = [\r\n\t'topg',\r\n\t'turnovers',\r\n\t'pFouls',\r\n\t'pfpg',\r\n];\r\n\r\nexport const excludeCategories = [\r\n\t'seasonStageId',\r\n\t'seasonYear',\r\n];\r\n\r\nexport const defaultCategories = [\r\n\t'ppg',\r\n\t'rpg',\r\n\t'apg',\r\n\t'topg',\r\n\t'bpg',\r\n\t'spg',\r\n\t'fgm',\r\n\t'tpm',\r\n\t'ftm'\r\n];\r\n\r\nexport const nbaRed = '#c8102e';\r\nexport const nbaBlue = '#1d428a';\r\n\r\nexport const getAllPlayers = async (year: number = (new Date()).getFullYear()): Promise<Array<IPlayerSearchResult>> => {\r\n\tlet playerListResponse = await fetch(`https://data.nba.net/prod/v1/${year}/players.json`);\r\n\tlet playerList = await playerListResponse.json();\r\n\tconsole.log(playerList.league.standard);\r\n\treturn playerList.league.standard;\r\n}\r\n\r\nexport const getPlayerStats = async (personId: string): Promise<IStatSearchResult | any> => {\r\n\tlet currentYear = (new Date()).getFullYear();\r\n\tlet playerStatsResponse;\r\n\r\n\twhile (!playerStatsResponse || !playerStatsResponse.ok) {\r\n\t\tplayerStatsResponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players/${personId}_profile.json`)\r\n\t\tif (!playerStatsResponse.ok) {\r\n\t\t\tcurrentYear--;\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst playerStatsJson = await playerStatsResponse.json();\r\n\treturn playerStatsJson.league.standard ??\r\n\t{\r\n\t\tstats: {\r\n\t\t\tregularSeason: {\r\n\t\t\t\tseason: [{\r\n\t\t\t\t\ttotal: { min: 0 }\r\n\t\t\t\t}]\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport const calcTotalStats = (roster: Array<Player>, selectedYear: number = 2019): ITeamStats => {\r\n\tconst result: ITeamStats = {};\r\n\tstatCategories\r\n\t\t.filter(category => !excludeCategories.includes(category))\r\n\t\t.forEach(category => result[category] = 0);\r\n\troster.forEach((player): void => {\r\n\t\tconst selectedSeasonStats = getSeasonStats(player, selectedYear)\r\n\t\tfor(let category in result) {\r\n\t\t\tresult[category] += selectedSeasonStats![category] as number >= 0 ? selectedSeasonStats![category] as number : 0;\r\n\t\t}\r\n\t})\r\n\treturn result;\r\n}\r\n\r\nexport const calcStatsArray = (statsObject: ITeamStats): Array<IStatCategory> => {\r\n\tconst result: Array<IStatCategory> = [];\r\n\tfor (let key in statsObject) {\r\n\t\tresult.push({label: key, total: statsObject[key]})\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const calcRelativeStats = (teamList: Array<ITeam>, categories: Array<string> = statCategories): IRelativeStats => {\r\n\tconst result: IRelativeStats = {};\r\n\tconst allTotalStats = calcAllTotalStats(teamList, categories);\r\n\t\r\n\tcategories.forEach(category => {\r\n\t\tresult[category] = {\r\n\t\t\tmin: 0,\r\n\t\t\tmedian: 0,\r\n\t\t\tmax: 0\r\n\t\t}\r\n\t});\r\n\t\r\n\tfor(let category in allTotalStats) {\r\n\t\tresult[category].min = calcMin(allTotalStats[category])\r\n\t\tresult[category].max = calcMax(allTotalStats[category])\r\n\t\tresult[category].median = calcMedian(allTotalStats[category])\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nexport const calcRelativeStatsV2 = (teamList: Array<ITeam>, categories: Array<string> = statCategories): IRelativeStatsV2 => {\r\n\tconst result: IRelativeStatsV2 = {\r\n\t\tmin: {},\r\n\t\tmedian: {},\r\n\t\tmax: {}\r\n\t};\r\n\tconst allTotalStats: {[key: string]: Array<number>} = calcAllTotalStats(teamList, categories);\r\n\r\n\tfor(let category in allTotalStats) {\r\n\t\tresult.min[category] = calcMin(allTotalStats[category])\r\n\t\tresult.median[category] = calcMedian(allTotalStats[category])\r\n\t\tresult.max[category] = calcMax(allTotalStats[category])\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nexport const calcAllTotalStats = (teamList: Array<ITeam>, categories: Array<string>): {[key: string]: Array<number>} => {\r\n\tconst result: {[key: string]: Array<number>} = {};\r\n\r\n\tcategories.forEach(category => {\r\n\t\tresult[category] = [];\r\n\t});\r\n\r\n\tfor(let category in result) {\r\n\t\tteamList.forEach(team => result[category].push(team.teamStats[category]))\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport const calcMin = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc < cur ? acc : cur);\r\n}\r\n\r\nexport const calcMax = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) =>  acc > cur ? acc : cur);\r\n}\r\n\r\nexport const calcMedian = (arr: Array<number>): number => {\r\n\tarr.sort((a, b) => a - b);\r\n\treturn (\r\n\t\tarr.length % 2 ?\r\n\t\tarr[(arr.length - 1) / 2] :\r\n\t\tcalcMean([arr[arr.length / 2], arr[(arr.length / 2) - 1]])\r\n\t);\r\n}\r\n\r\nexport const calcMean = (arr: Array<number>): number => {\r\n  return arr.reduce((acc, cur) => acc + cur) / arr.length ;\r\n}\r\n\r\nexport const isBestInCategory = (value: number, category: string, best: IRelativeStatsV2): boolean => {\r\n\tif (value === 0 && !invertedCategories.includes(category)) {\r\n\t\treturn false\r\n\t}\r\n\telse if (invertedCategories.includes(category)) {\r\n\t\treturn value === best.min[category];\r\n\t} else {\r\n\t\treturn value === best.max[category];\r\n\t}\r\n}\r\n\r\nexport const getSeasonStats = (player: Player, selectedYear: number = 2019): {[key: string]: number} => {\r\n\tconst selectedStats = player.stats.regularSeason.season\r\n\t\t.find((season) => season.seasonYear === selectedYear)?.total;\r\n\treturn selectedStats ?? { min: 0 };\r\n}\r\n\r\nexport const convertStatsToNumbers = (input: any): IStatSearchResult => {\r\n\tconst { latest, regularSeason } = input\r\n\tconst result = {}\r\n\tfor (const stat in latest) {\r\n\t\tif (typeof latest[stat] === 'string') {\r\n\t\t\tlatest[stat] = latest[stat] !== '-1' ? parseFloat(latest[stat] as string) : 0\r\n\t\t} \r\n\t}\r\n\r\n\tconst { season } = regularSeason;\r\n\tfor (const year in season) {\r\n\t\tfor (const category in season[year].total) {\r\n\t\t\tconst stat = season[year].total[category];\r\n\t\t\tif (typeof stat === 'string') {\r\n\t\t\t\tseason[year].total[category] = stat !== '-1' ? parseFloat(stat) : 0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result as any;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { ITeam } from '../Types/types';\r\nimport { calcTotalStats } from '../Util';\r\n\r\nconst teamListContext = React.createContext({} as ITeamContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface ITeamContext {\r\n\tteamList: Array<ITeam>;\r\n\tsetTeamList: React.Dispatch<React.SetStateAction<ITeam[]>>;\r\n\taddTeam: () => void;\r\n\tremoveTeam: (id: number) => void;\r\n}\r\n\r\nconst TeamListContextProvider = (props: ContextProviderProps) => {\r\n\tconst initialTeamList: Array<ITeam> = [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\troster: [],\r\n\t\t\tteamStats: calcTotalStats([]),\r\n\t\t\tallPlayers: []\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\troster: [],\r\n\t\t\tteamStats: calcTotalStats([]),\r\n\t\t\tallPlayers: []\r\n\t\t}\r\n\t]\r\n\r\n\tconst [teamList, setTeamList] = useState(initialTeamList);\r\n\t\r\n\tconst addTeam = () => {\r\n\t\tsetTeamList([\r\n\t\t\t...teamList,\r\n\t\t\t{\r\n\t\t\t\tid: (teamList[teamList.length - 1]?.id ?? 0) + 1,\r\n\t\t\t\troster: [],\r\n\t\t\t\tteamStats: calcTotalStats([]),\r\n\t\t\t\tallPlayers: []\r\n\t\t\t}\r\n\t\t])\r\n\t}\r\n\r\n\tconst removeTeam = (id: number) => {\r\n\t\tsetTeamList(teamList.filter(team => team.id !== id))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<teamListContext.Provider value={{ teamList, addTeam, removeTeam, setTeamList }}>\r\n\t\t\t{props.children}\r\n\t\t</teamListContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { TeamListContextProvider, teamListContext }","import React, {Dispatch, SetStateAction} from 'react';\r\nimport { IRelativeStatsV2 } from '../Types/types';\r\n\r\nconst appStatsContext = React.createContext({} as IAppStatsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface IAppStatsContext {\r\n\tappStats: IRelativeStatsV2;\r\n\tsetAppStats: Dispatch<SetStateAction<IRelativeStatsV2>>;\r\n}\r\n\r\nconst AppStatsContextProvider = (props: ContextProviderProps) => {\r\n\tconst initialAppStats = { min: {}, median: {}, max: {} };\r\n\tconst [appStats, setAppStats] = React.useState(initialAppStats);\r\n\t\r\n\treturn (\r\n\t\t<appStatsContext.Provider value={{appStats, setAppStats}}>\r\n\t\t\t{props.children}\r\n\t\t</appStatsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport {AppStatsContextProvider, appStatsContext}","import React, {\r\n\tDispatch, SetStateAction, useEffect } from 'react';\r\nimport {\r\n\tstatCategories,\r\n\tcalculatedCategories,\r\n\texcludeCategories,\r\n\tdefaultCategories\r\n } from '../Util'\r\n\r\nconst settingsContext = React.createContext({} as ISettingsContext);\r\n\r\ninterface ContextProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\n\r\ninterface ISettingsContext {\r\n\tselectedStats: { [key: string]: boolean };\r\n\tsetSelectedStats:  Dispatch<SetStateAction<{ [key: string]: boolean }>>;\r\n\tselectedYear?: number | Promise<number>;\r\n\tsetSelectedYear: Dispatch<SetStateAction<number>>;\r\n}\r\n\r\nconst SettingsContextProvider = (props: ContextProviderProps) => {\r\n\tconst defaultSelectedStats: any = {};\r\n\tconst allCategories = [\r\n\t\t...defaultCategories,\r\n\t\t...statCategories,\r\n\t\t...calculatedCategories,\r\n\t];\r\n\tallCategories\r\n\t\t/** remove duplicates, seasonStageId, and seasonYear */ \r\n\t\t.filter((category, index) => (\r\n\t\t\tallCategories.indexOf(category) === index && !excludeCategories.includes(category)\r\n\t\t))\r\n\t\t.forEach(category => (\r\n\t\t\tdefaultSelectedStats[category] = defaultCategories.includes(category)\r\n\t\t));\r\n\r\n\tconst [ selectedStats, setSelectedStats ] = React.useState(defaultSelectedStats);\r\n\r\n\tconst [ selectedYear, setSelectedYear ] = React.useState((new Date()).getFullYear());\r\n\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tlet currentYear = (new Date()).getFullYear();\r\n\t\t\tlet response;\r\n\t\t\twhile (!response || !response.ok) {\r\n\t\t\t\tresponse = await fetch(`https://data.nba.net/prod/v1/${currentYear}/players.json`);\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tcurrentYear--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsetSelectedYear(2019);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<settingsContext.Provider value={{selectedStats, selectedYear, setSelectedYear, setSelectedStats}}>\r\n\t\t\t{props.children}\r\n\t\t</settingsContext.Provider>\r\n\t)\r\n}\r\n\r\nexport { SettingsContextProvider, settingsContext }","import React from 'react';\r\nimport { IconButton } from '@material-ui/core'\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\n\r\nexport const AddTeamButton = () => {\r\n\tconst { addTeam } = React.useContext(teamListContext);\r\n\t\r\n\tconst handleClick = () => {\r\n\t\taddTeam()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<IconButton\r\n\t\t\tonClick={handleClick}\r\n\t\t\tstyle={{color: '#666666'}}\r\n\t\t>\r\n\t\t\t<GroupAddIcon />\r\n\t\t</IconButton>\r\n\t)\r\n}","export const getScrollBarStyles = (selector: string, scrollBarWidth?: number, height?: number | string) => {\r\n  return {\r\n    [`& ${selector}`]: {\r\n      overflowY: 'scroll',\r\n      height: height ?? 'auto'\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar`]: {\r\n      width: scrollBarWidth ?? 4\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-track`]: {\r\n      backgroundColor: '#0004',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    },\r\n    [`& ${selector}::-webkit-scrollbar-thumb`]: {\r\n      backgroundColor: '#FFFA',\r\n      borderRadius: scrollBarWidth ?? 4 / 2\r\n    }\r\n  }\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Block } from '@material-ui/icons';\r\nimport { pointer } from 'd3';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n\troot: {\r\n\t\theight: '124px !important',\r\n\t\twidth: '60%',\r\n\t\tmarginRight: 3,\r\n\t\toverflowY: 'scroll',\r\n\t\toverflowX: 'hidden',\r\n\t\t'& table': {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\t'& tbody': {\r\n\t\t\twidth: '100%',\r\n\t\t},\r\n\t\t'& tr': {\r\n\t\t\twidth: '100%',\r\n\t\t\t\r\n\t\t},\r\n\t\t'& td': {\r\n\t\t\tdisplay: 'inline-block',\r\n\t\t\theight: 30,\r\n\t\t\tborder: 'none',\r\n\t\t\tpaddingBottom: 1\r\n\t\t},\r\n\t\t'& .button-cell' : {\r\n\t\t\twidth: 30,\r\n\t\t},\r\n\t\t'& .no-stats ': {\r\n\t\t\topacity: .25\r\n\t\t},\r\n\t\t'& .headshot-cell' : {\r\n\t\t\twidth: 30\r\n\t\t},\r\n\t\t'& .headshot' : {\r\n\t\t\theight: 30,\r\n\t\t\twidth: 30,\r\n\t\t\tbackgroundColor: 'lightgray'\r\n\t\t},\r\n\t\t'& .mock-player-icon': {\r\n\t\t\theight: '30px',\r\n\t\t\twidth: '30px',\r\n\t\t\tfill: 'white',\r\n\t\t\tbackgroundColor: 'black',\r\n\t\t\tborderRadius: '15px',\r\n\t\t},\r\n\t\t'& .name-cell' : {\r\n\t\t\twidth: 'calc(100% - 30px - 30px - 6px)',\r\n\t\t\tlineHeight: '32px',\r\n\t\t\tcursor: 'default',\r\n\t\t\toverflow: 'hidden',\r\n\t\t\ttextOverflow: 'ellipsis',\r\n\t\t\tpaddingLeft: 6\r\n\t\t},\r\n\t\t'& .name-cell div' : {\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100%',\r\n\t\t\toverflow: 'inherit',\r\n\t\t\ttextOverflow: 'inherit',\r\n\t\t\twhiteSpace: 'nowrap',\r\n\t\t\tcursor: 'pointer',\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const usePopoverStyles = makeStyles({\r\n\tpopper: {\r\n\t\t'& .MuiTooltip-tooltip': {\r\n\t\t\tbackgroundColor: '#fff',\r\n\t\t\tpadding: 0,\r\n\t\t},\r\n\t\t'& .MuiFormLabel-root.Mui-focused': {\r\n      color: nbaBlue,\r\n    },\r\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline' : {\r\n      borderColor: nbaBlue\r\n    },\r\n\t\t...getScrollBarStyles('.MuiList-root', 8, 200),\r\n\t\t'& .LazyLoad.odd': {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n\t\t'& .LazyLoad.even': {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& .MuiListItem-root' : {\r\n\t\t\tcolor: '#000',\r\n\t\t\theight: 40\r\n\t\t},\r\n\t\t'& .MuiListItem-root:hover, & .Mui-selected' : {\r\n\t\t\tbackgroundColor: nbaBlue,\r\n\t\t\tcolor: '#fff'\r\n\t\t},\r\n\t}\r\n})","import React, {\r\n\tuseState,\r\n\tChangeEvent,\r\n\tMouseEvent,\r\n\tKeyboardEvent,\r\n\tuseEffect,\r\n\tuseRef\r\n} from 'react';\r\nimport { List, ListItem, TextField} from '@material-ui/core'\r\nimport { Player, IPlayerSearchResult } from '../../Types/types';\r\nimport { SignalCellularNull } from '@material-ui/icons';\r\nimport LazyLoad from 'react-lazy-load';\r\n\r\nexport interface IPlayerSelectProps {\r\n\tteamId?: number;\r\n\troster?: Array<Player>;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tselectedYear: number;\r\n\tallPlayers: Array<IPlayerSearchResult>\r\n}\r\n\r\nexport const PlayerSelect = (props: IPlayerSelectProps): JSX.Element => {\r\n\tconst { teamId, roster, addPlayer, allPlayers } = props;\r\n\t\r\n\tconst [ searchString, setSearchString ] = useState('');\r\n\tconst [ searchResults, setSearchResults ] = useState(allPlayers);\r\n\tconst [ selectedIndex, setSelectedIndex ] = useState(0);\r\n\r\n\tconst rosterIds: Array<string> | undefined = roster?.map(player => player.personId);\r\n\r\n\tconst resultsContainerRef = useRef<HTMLUListElement>(null);\r\n\r\n\tconst lazyLoadHeight = 40;\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSearchResults(allPlayers.filter(({firstName, lastName, isActive}) => isMatch(firstName, lastName) && isActive));\r\n\t\tsetSelectedIndex(0);\r\n\t}, [searchString])\r\n\r\n\tconst handleChange = ({target}: ChangeEvent<{value: string}>) => {\r\n\t\tconst { value } = target;\r\n\t\tsetSearchString(value);\r\n\t}\r\n\r\n\tconst handleClick = ({currentTarget}: MouseEvent<HTMLElement>): void => {\r\n\t\tconst { personId } = currentTarget.dataset;\r\n\t\taddPlayer(personId!, allPlayers);\r\n\t\tsetSearchString('');\r\n\t}\r\n\r\n\tconst handleKeyDown = (event: KeyboardEvent<HTMLDivElement>): void => {\r\n\t\tevent.stopPropagation();\r\n\t\tconst { key } = event;\r\n\t\tif (key === 'Enter' && searchResults.length) {\r\n\t\t\tconst { personId } = searchResults[selectedIndex];\r\n\t\t\tif (!rosterIds?.includes(personId)) {\r\n\t\t\t\taddPlayer(personId, allPlayers);\r\n\t\t\t\tsetSearchString('');\r\n\t\t\t}\r\n\t\t} else if (key === 'ArrowDown') {\r\n\t\t\tsetSelectedIndex(selectedIndex < searchResults.length - 1 ? selectedIndex + 1 : searchResults.length - 1);\r\n\t\t\tresultsContainerRef.current!.scrollTop = selectedIndex * lazyLoadHeight + lazyLoadHeight\r\n\t\t} else if (key === 'ArrowUp') {\r\n\t\t\tsetSelectedIndex(selectedIndex > 0 ? selectedIndex - 1 : 0);\r\n\t\t\tresultsContainerRef.current!.scrollTop = selectedIndex * lazyLoadHeight - lazyLoadHeight\r\n\t\t}\r\n\t}\r\n\r\n\tconst isMatch = (firstName: string, lastName: string): boolean => {\r\n\t\tconst searchStringLower = searchString.toLowerCase();\r\n\t\tconst firstNameLower = firstName.toLowerCase();\r\n\t\tconst lastNameLower = lastName.toLowerCase();\r\n\t\treturn (\r\n\t\t\tfirstNameLower.startsWith(searchStringLower) ||\r\n\t\t\tlastNameLower.startsWith(searchStringLower) ||\r\n\t\t\t`${firstNameLower} ${lastNameLower}`.startsWith(searchStringLower)\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<TextField\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\tlabel=\"Draft Player\"\r\n\t\t\t\tvalue={searchString}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\t\tautoFocus\r\n\t\t\t\tfocused\r\n\t\t\t/>\r\n\t\t\t<List\r\n\t\t\t\tdisablePadding={true}\r\n\t\t\t\tref={resultsContainerRef}\r\n\t\t\t>\r\n\t\t\t\t{searchResults\r\n\t\t\t\t\t.map(({ personId, firstName, lastName }, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<LazyLoad\r\n\t\t\t\t\t\t\t\theight={lazyLoadHeight}\r\n\t\t\t\t\t\t\t\toffsetTop={lazyLoadHeight * i}\r\n\t\t\t\t\t\t\t\t/* way more performant than CSS nth-child selector */\r\n\t\t\t\t\t\t\t\tclassName={i % 2 ? 'odd' : 'even'}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\t\t\tbutton\r\n\t\t\t\t\t\t\t\t\tonClick={handleClick}\r\n\t\t\t\t\t\t\t\t\tdata-person-id={personId}\r\n\t\t\t\t\t\t\t\t\tselected={selectedIndex === i && !rosterIds?.includes(personId)}\r\n\t\t\t\t\t\t\t\t\tdisabled={rosterIds?.includes(personId)}\r\n\t\t\t\t\t\t\t\t\tkey={`select-${teamId}-${personId}`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{firstName} {lastName}\r\n\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t</LazyLoad>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</List>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useEffect, useContext, useState } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTooltip,\r\n\tClickAwayListener,\r\n} from '@material-ui/core'\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { usePopoverStyles } from './RosterTable.styles';\r\nimport { mockComponent } from 'react-dom/test-utils';\r\n\r\nexport interface IUndraftedRowProps {\r\n\tteamId: number;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\troster: Array<Player>;\r\n\tselectedYear: number;\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n}\r\n\t\r\nexport const UndraftedRow = (props: IUndraftedRowProps): JSX.Element => {\r\n\tconst { addPlayer, teamId, roster, selectedYear, allPlayers } = props;\r\n\t\r\n\tconst [ openTooltip, setOpenTooltip ] = useState(false);\r\n\t\r\n\tconst popoverClasses = usePopoverStyles();\r\n\r\n\tconst handleTooltipClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n\t\tsetOpenTooltip(false)\r\n\t};\r\n\t\r\n\tconst handleTooltipOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tevent?.stopPropagation();\r\n\t\tsetOpenTooltip(true);\r\n\t};\r\n\r\n\tconst playerSelect = <PlayerSelect \r\n\t\tteamId={teamId}\r\n\t\troster={roster}\r\n\t\taddPlayer={addPlayer}\r\n\t\tkey={`player-select-${teamId}`}\r\n\t\tselectedYear={selectedYear}\r\n\t\tallPlayers={allPlayers}\r\n\t/>\r\n\r\n\treturn (\r\n\t\t<TableRow className='undrafted-row'>\r\n\t\t\t<ClickAwayListener onClickAway={handleTooltipClose}>\r\n\t\t\t\t<TableCell className='button-cell'>\r\n\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\ttitle={playerSelect}\r\n\t\t\t\t\t\tdisableFocusListener\r\n\t\t\t\t\t\tdisableHoverListener\r\n\t\t\t\t\t\tdisableTouchListener\r\n\t\t\t\t\t\topen={openTooltip}\r\n\t\t\t\t\t\tinteractive\r\n\t\t\t\t\t\tclasses={popoverClasses}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\tonClick={handleTooltipOpen}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</TableCell>\r\n\t\t\t</ClickAwayListener>\r\n\t\t\t<TableCell className='headshot-cell no-stats'>\r\n\t\t\t\t<AccountCircleIcon className='mock-player-icon' />\r\n\t\t\t</TableCell>\r\n\t\t\t<TableCell className='name-cell no-stats'>\r\n\t\t\t\tUndrafted\r\n\t\t\t</TableCell>\r\n\t\t</TableRow>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const useTableContainerStyles = makeStyles({\r\n    root: {\r\n        height: '124px !important',\r\n        width: '40%',\r\n        marginLeft: 3,\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n        '& table': {\r\n            width: '100%'\r\n        },\r\n        '& tbody' : {\r\n            width: '100%',\r\n        },\r\n        '& tr': {\r\n            width: '100%',\r\n            \r\n        },\r\n        '& td': {\r\n            height: 30,\r\n            lineHeight: '32px',\r\n            display: 'inline-block',\r\n            border: 'none',\r\n            paddingBottom: 1\r\n        },\r\n        '& .stat-label' : {\r\n            textTransform: 'uppercase',\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            textAlign: 'left',\r\n            paddingLeft: 6,\r\n            width: 'calc(100% - 50px - 12px)',\r\n        },\r\n        '& .stat-value' : {\r\n            width: 50,\r\n            paddingRight: 6,\r\n            textAlign: 'right',\r\n        },\r\n        '& .best' : {\r\n            backgroundColor: nbaBlue,\r\n            color: 'white'\r\n        }\r\n    }\r\n})\r\n\r\nexport const useTooltipStyles = makeStyles({\r\n    popper: {\r\n        ...getScrollBarStyles('.MuiTooltip-tooltip'),\r\n    },\r\n    tooltip: {\r\n        paddingTop: 0,\r\n        overflowY: 'scroll',\r\n        color: '#000',\r\n        maxHeight: '50vh',\r\n        backgroundColor: 'white',\r\n        '& .player-label': {\r\n            position: 'sticky',\r\n            top: 0,\r\n            backgroundColor: 'white',\r\n            padding: '2px 0px'\r\n        },\r\n        '& p' : {\r\n            margin: '6px 0px',\r\n            fontSize: 14\r\n        },\r\n        '& tr:nth-child(odd)' : {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& tr:nth-child(even)' : {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n        '& td' : {\r\n            border: 'none',\r\n            textTransform: 'uppercase'\r\n        },\r\n        '& .stat-value' : {\r\n            textAlign: 'right'\r\n        }\r\n    }\r\n})\r\n","import React, { useEffect, useRef } from 'react';\r\nimport {\r\n\tIconButton,\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer,\r\n\tAvatar,\r\n\tTooltip,\r\n\tClickAwayListener,\r\n\tCard\r\n} from '@material-ui/core'\r\nimport { IPlayerSearchResult, IStatCategory, Player } from '../../Types/types';\r\nimport { useTableContainerStyles } from './RosterTable.styles';\r\nimport { maxTeamSize, getSeasonStats, calcStatsArray } from '../../Util';\r\nimport { UndraftedRow } from './UndraftedRow'\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { useTooltipStyles } from './TeamStatsTable.styles';\r\n\r\n\r\nexport interface IRosterTableProps {\r\n\tteamId: number;\r\n\troster: Array<Player>;\r\n\taddPlayer: (personId: string, allPlayers: Array<IPlayerSearchResult>) => Promise<void>;\r\n\tremovePlayer: (personId: string) => void;\r\n\tselectedYear: number;\r\n\tallPlayers: Array<IPlayerSearchResult>;\r\n}\r\n\r\nexport const RosterTable = (props: IRosterTableProps): JSX.Element => {\r\n\tconst { teamId, roster, removePlayer, addPlayer, selectedYear, allPlayers } = props;\r\n\r\n\tconst [openTooltip, setOpenTooltip] = React.useState<number | null>(null);\r\n\r\n\tconst handleTooltipClose = (event: React.MouseEvent<Document, MouseEvent>) => {\r\n\t\tevent?.stopPropagation();\r\n\t\tsetOpenTooltip(null)\r\n\t};\r\n\t\r\n\tconst handleTooltipOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n\t\tevent?.stopPropagation();\r\n\t\tconst { index } = event.currentTarget.dataset;\r\n\t\tsetOpenTooltip(parseInt(index!))\r\n  };\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\tconst tooltipClasses = useTooltipStyles();\r\n\r\n\t// only display player's first initial if displaying full name causes text overflow\r\n\tuseEffect(() => {\r\n\t\tconst nameCells = document.querySelectorAll(`.roster-table-${teamId} .name-cell div`);\r\n\t\tnameCells.forEach(nameCell => {\r\n\t\t\tif (nameCell.scrollWidth > nameCell.clientWidth) {\r\n\t\t\t\tconst fullName = nameCell.innerHTML.split(' ');\r\n\t\t\t\tfullName[0] = `${fullName[0][0]}. `;\r\n\t\t\t\tnameCell.innerHTML = fullName.join('').toString();\r\n\t\t\t}\r\n\t\t})\r\n\t}, [roster.length])\r\n\r\n\tconst playerRows = roster.map((player: Player, i) => {\r\n\t\tconst { personId, firstName, lastName } = player;\r\n\r\n\t\tconst playerSeasonStats = getSeasonStats(player, selectedYear);\r\n\t\tconst playerStatsArray = calcStatsArray(playerSeasonStats);\r\n\t\t\r\n\t\tconst playerTooltip = (\r\n\t\t\t<>\r\n\t\t\t\t<div className='player-label'>\r\n\t\t\t\t\t<p>{firstName} {lastName}</p>\r\n\t\t\t\t\t<p>{selectedYear}-{selectedYear + 1}</p>\r\n\t\t\t\t\t<p>Regular Season</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Table padding='none' size='small'>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{playerStatsArray.map(({ label, total }: IStatCategory) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableRow key={`total-stats-row-${teamId}-${label}`}>\r\n\t\t\t\t\t\t\t\t<TableCell>\r\n\t\t\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell className='stat-value'>\r\n\t\t\t\t\t\t\t\t\t{total.toFixed(1)}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t\t</>\r\n\t\t)\r\n\r\n\t\treturn (\r\n\t\t\t<TableRow key={`roster-table-row-${teamId}-${personId}`}>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName='button-cell'\r\n\t\t\t\t>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={() => removePlayer(personId)}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RemoveIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName={`headshot-cell ${playerSeasonStats.min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\tsrc={`https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/${personId}.png`}\r\n\t\t\t\t\t\tclassName='headshot'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</TableCell>\r\n\t\t\t\t<TableCell\r\n\t\t\t\t\tclassName={`name-cell ${playerSeasonStats.min > 0 ? '' : 'no-stats' }`}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ClickAwayListener onClickAway={handleTooltipClose}>\r\n\t\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\t\ttitle={playerTooltip}\r\n\t\t\t\t\t\t\tarrow\r\n\t\t\t\t\t\t\tdisableFocusListener\r\n\t\t\t\t\t\t\tdisableHoverListener\r\n\t\t\t\t\t\t\tdisableTouchListener\r\n\t\t\t\t\t\t\topen={openTooltip === i}\r\n\t\t\t\t\t\t\tinteractive\r\n\t\t\t\t\t\t\tclasses={tooltipClasses}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div onClick={handleTooltipOpen} data-index={i}>\r\n\t\t\t\t\t\t\t\t{firstName} {lastName}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</ClickAwayListener>\r\n\t\t\t\t</TableCell>\r\n\t\t\t</TableRow>\r\n\t\t)\r\n\t})\r\n\r\n\tconst undraftedRows: Array<JSX.Element> = [];\r\n\r\n\twhile (roster.length + undraftedRows.length < maxTeamSize) {\r\n\t\tundraftedRows.push(\r\n\t\t\t<UndraftedRow\r\n\t\t\t\tkey={`undrafted-table-row-${undraftedRows.length}`}\r\n\t\t\t\tteamId={teamId}\r\n\t\t\t\troster={roster}\r\n\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\tselectedYear={selectedYear}\r\n\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\t\r\n\t\t\t<Table padding='none' size='small' className={`roster-table-${teamId}`}>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{playerRows}\r\n\t\t\t\t\t{undraftedRows}\r\n\t\t\t\t</TableBody>\t\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import React, { useContext, useEffect, useRef } from 'react';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport {\r\n\tTable,\r\n\tTableBody,\r\n\tTableRow,\r\n\tTableCell,\r\n\tTableContainer\r\n} from '@material-ui/core'\r\nimport { useTableContainerStyles } from './TeamStatsTable.styles';\r\nimport { calcStatsArray, isBestInCategory } from '../../Util';\r\nimport { IStatCategory, ITeamStats } from '../../Types/types';\r\nimport { select } from 'd3';\r\n\r\nexport interface ITeamStatsTableProps {\r\n\tteamId: number;\r\n\tteamStats: ITeamStats;\r\n}\r\n\r\nexport const TeamStatsTable = (props: ITeamStatsTableProps): JSX.Element => {\r\n\tconst { teamId, teamStats } = props;\r\n\r\n\tconst { appStats } = useContext(appStatsContext);\r\n\tconst { selectedStats } = useContext(settingsContext);\r\n\r\n\tconst teamStatsArray: Array<IStatCategory> = calcStatsArray(teamStats)\r\n    .filter(({label}: IStatCategory) => selectedStats[label]);\r\n\r\n\tconst tableContainerClasses = useTableContainerStyles();\r\n\r\n\treturn (\r\n\t\t<TableContainer classes={tableContainerClasses}>\r\n\t\t\t<Table padding='none' size='small'>\r\n\t\t\t\t<TableBody>\r\n\t\t\t\t\t{teamStatsArray.map(({ label, total }: IStatCategory) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TableRow key={`total-stats-row-${teamId}-${label}`}>\r\n\t\t\t\t\t\t\t\t<TableCell className='stat-label'>\r\n\t\t\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\tclassName={`stat-value ${isBestInCategory(total, label, appStats) ? 'best' : ''}`}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{total.toFixed(1)}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\t\t\t\t</TableBody>\r\n\t\t\t</Table>\r\n\t\t</TableContainer>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles';\r\n\r\nexport const useAccordionStyles = makeStyles({\r\n\troot: {\r\n\t\tmaxWidth: 'calc(100% - 24px)',\r\n\t\tmarginTop: '0px !important',\r\n\t\tmarginRight: '6px !important',\r\n\t\t// marginBottom: '6px !important',\r\n\t\tmarginLeft: '6px !important',\r\n\t\tpaddingTop: 6,\r\n\t\tpaddingRight: 6,\r\n\t\tpaddingBottom:6,\r\n\t\tpaddingLeft: 6,\r\n\t\tminWidth: 'fit-content;'\r\n\t}\r\n})\r\n\r\nexport const useAccordionSummaryStyles = makeStyles({\r\n\troot: {\r\n\t\tminHeight: 'fit-content !important',\r\n\t\tpadding: '0px',\r\n\t\t'& :hover': {\r\n\t\t\tcursor: 'default'\r\n\t\t},\r\n\t},\r\n\tcontent: {\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tmargin: '0px !important',\r\n\t\t'& .teamLabel': {\r\n\t\t\tflexGrow: 2,\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tpaddingLeft: '6px'\r\n\t\t},\r\n\t\t'& button' : {\r\n\t\t\tpadding: 0\r\n\t\t}\r\n\t},\r\n});\r\n\r\nexport const useAccordionDetailStyles = makeStyles({\r\n\troot: {\r\n\t\tflexDirection: 'column',\r\n\t\tpadding: '0px'\r\n\t}\r\n})\r\n\r\nexport const useGridStyles = makeStyles({\r\n\troot: {\r\n\t\tflexWrap: 'nowrap',\r\n\t\talignItems: 'stretch',\r\n\t\t'& tr:nth-child(odd)' : {\r\n\t\t\tbackgroundColor: '#FAFAFA'\r\n\t\t},\r\n\t\t'& tr:nth-child(even)' : {\r\n\t\t\tbackgroundColor: '#F0F0F0'\r\n\t\t},\r\n\t\t...getScrollBarStyles('.MuiTableContainer-root')\r\n\t}\r\n})","import React, {\r\n\tuseState,\r\n\tuseEffect,\r\n\tuseContext,\r\n\tMouseEvent,\r\n\tChangeEvent\r\n} from 'react';\r\nimport {\r\n\tAccordion,\r\n\tAccordionSummary,\r\n\tAccordionDetails,\r\n\tGrid,\r\n\tIconButton,\r\n} from '@material-ui/core'\r\nimport { IStatCategory, ITeam, ITeamStats } from '../../Types/types';\r\nimport { PlayerSelect } from './PlayerSelect';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { \r\n\tcalcTotalStats,\r\n\tgetPlayerStats,\r\n\tmaxTeamSize,\r\n\tcalcRelativeStatsV2,\r\n\tcalcStatsArray,\r\n} from '../../Util';\r\nimport { RosterTable } from './RosterTable'\r\nimport { TeamStatsTable } from './TeamStatsTable';\r\nimport { \r\n\tuseAccordionStyles,\r\n\tuseAccordionSummaryStyles,\r\n\tuseAccordionDetailStyles,\r\n\tuseGridStyles\r\n} from './Team.styles';\r\n\r\nimport MinimizeIcon from '@material-ui/icons/Minimize';\r\nimport CropDinIcon from '@material-ui/icons/CropDin';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { IPlayerSearchResult, Player } from '../../Types/types';\r\n\r\nexport const Team = (props: ITeam) => {\r\n\tconst { id, allPlayers } = props;\r\n\tconst [ isExpanded, setIsExpanded ] = useState(true);\r\n\r\n\tconst { teamList, removeTeam, setTeamList } = useContext(teamListContext);\r\n\tconst { setAppStats } = useContext(appStatsContext);\r\n\tconst { selectedYear } = useContext(settingsContext);\r\n\r\n\tconst accordionClasses = useAccordionStyles();\r\n\tconst accordionSummaryClasses = useAccordionSummaryStyles();\r\n\tconst accordionDetailClasses = useAccordionDetailStyles();\r\n\tconst gridClasses = useGridStyles();\r\n\t\r\n\tconst index = teamList.findIndex(team => team.id === id);\r\n\tconst roster = teamList[index].roster;\r\n\tconst color = teamList[index].color;\r\n\tconst teamStats: ITeamStats = calcTotalStats(roster, selectedYear as number);\r\n\tconst totalStatsArray: Array<number> = calcStatsArray(teamStats).map(({ total }: IStatCategory) => total);\r\n\r\n\tuseEffect(() => {\r\n\t\tteamList[index].teamStats = calcTotalStats(roster, selectedYear as number);\r\n\t\tsetTeamList([...teamList]);\r\n\t}, [roster.length, selectedYear])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst relativeStats = calcRelativeStatsV2(teamList)\r\n\t\tsetAppStats(relativeStats);\r\n\t}, [...totalStatsArray, teamList.length, selectedYear])\r\n\r\n\t// const [ localRoster, setLocalRoster ] = useState({});\r\n\r\n\tconst minimize = (event: MouseEvent) => {\r\n\t\tsetIsExpanded(!isExpanded);\r\n\t}\r\n\r\n\tconst maximize = (event: MouseEvent) => {\r\n\t\t// stub\r\n\t}\r\n\r\n\tconst close = (event: MouseEvent) => {\r\n\t\tremoveTeam(id)\r\n\t}\r\n\r\n\tconst addPlayer = async (personId: string, allPlayers: Array<IPlayerSearchResult>): Promise<void> => {\r\n\t\tconst { firstName, lastName } = allPlayers.find(player => player.personId === personId)!;\r\n\t\tconst { latest, regularSeason } = (await getPlayerStats(personId)).stats;\r\n\t\t\r\n\t\tfor (const stat in latest) {\r\n\t\t\tif (typeof latest[stat] === 'string') {\r\n\t\t\t\tlatest[stat] = latest[stat] !== '-1' ? parseFloat(latest[stat] as string) : 0\r\n\t\t\t} \r\n\t\t}\r\n\r\n\t\tconst { season } = regularSeason;\r\n\t\tfor (const year in season) {\r\n\t\t\tfor (const category in season[year].total) {\r\n\t\t\t\tconst stat = season[year].total[category];\r\n\t\t\t\tif (typeof stat === 'string') {\r\n\t\t\t\t\tseason[year].total[category] = stat !== '-1' ? parseFloat(stat) : 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst stats = {\r\n\t\t\tlatest,\r\n\t\t\tregularSeason: {\r\n\t\t\t\tseason\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst player: Player = {\r\n\t\t\tpersonId,\r\n\t\t\tfirstName,\r\n\t\t\tlastName,\r\n\t\t\tstats\r\n\t\t};\r\n\t\troster.push(player);\r\n\t\tteamList[index].roster = roster;\r\n\t\tsetTeamList([...teamList]);\r\n\t\t// console.log(player)\r\n\t}\r\n\r\n\tconst removePlayer = (personId: string): void => {\r\n\t\tteamList[index].roster = roster.filter(player => player.personId !== personId);\r\n\t\tsetTeamList([...teamList]);\r\n\t}\r\n\r\n\t// PersonAdd icon\r\n\t// FilterNone (for copy)\r\n\r\n\t// console.log('rendering team', id, selectedYear)\r\n\r\n\treturn (\r\n\t\t<div style={{marginBottom: 6}}>\r\n\t\t\t<Accordion\r\n\t\t\t\tclasses={accordionClasses}\r\n\t\t\t\t// square\r\n\t\t\t\texpanded={isExpanded}\r\n\t\t\t>\r\n\t\t\t\t<AccordionSummary\r\n\t\t\t\t\taria-label=\"Expand\"\r\n\t\t\t\t\taria-controls=\"additional-actions1-content\"\r\n\t\t\t\t\tclasses={accordionSummaryClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className='teamLabel'>\r\n\t\t\t\t\t\t{/* <RadioButtonUncheckedIcon\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tbackgroundColor: color,\r\n\t\t\t\t\t\t\t\tfill: 'white',\r\n\t\t\t\t\t\t\t\tborderRadius: '20px',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t<span>Team {id} ({roster.length}{roster.length >= maxTeamSize && '*'})</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={minimize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{ isExpanded ? <MinimizeIcon /> : <CropDinIcon /> }\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={maximize}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<LaunchIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tonClick={close}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</AccordionSummary>\r\n\t\t\t\t<AccordionDetails\r\n\t\t\t\t\tclasses={accordionDetailClasses}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tdirection='row'\r\n\t\t\t\t\t\tclasses={gridClasses}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RosterTable\r\n\t\t\t\t\t\t\tteamId={id} \r\n\t\t\t\t\t\t\troster={roster}\r\n\t\t\t\t\t\t\taddPlayer={addPlayer}\r\n\t\t\t\t\t\t\tremovePlayer={removePlayer}\r\n\t\t\t\t\t\t\tselectedYear={selectedYear as number}\r\n\t\t\t\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TeamStatsTable\r\n\t\t\t\t\t\t\tteamId={id}\r\n\t\t\t\t\t\t\tteamStats={teamStats ?? {}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</AccordionDetails>\r\n\t\t\t</Accordion>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useEffect, useContext, FunctionComponent } from 'react';\r\nimport { Team } from '../Team/Team';\r\nimport { ITeam } from '../../Types/types';\r\nimport { getAllPlayers } from '../../Util';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { allPlayersContext } from '../../Contexts/AllPlayersContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\n\r\nexport const AllTeamsContainer: FunctionComponent = () => {\r\n\tconst { teamList } = useContext(teamListContext)\r\n\tconst { allPlayers, setAllPlayers } = useContext(allPlayersContext);\r\n\tconst { selectedYear } = useContext(settingsContext)\r\n\r\n\tuseEffect(() => {\r\n\t\t(async (): Promise<void> => {\r\n\t\t\tsetAllPlayers(await getAllPlayers(selectedYear as number));\r\n\t\t})();\r\n\t}, [selectedYear])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{teamList.map((teamProps: ITeam): React.ReactNode => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Team\r\n\t\t\t\t\t\t{...teamProps}\r\n\t\t\t\t\t\tallPlayers={allPlayers}\r\n\t\t\t\t\t\tkey={teamProps.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</div>\r\n\t)\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport { getScrollBarStyles } from './SharedStyles/SharedStyles';\r\nimport { nbaBlue } from './Util';\r\n\r\nexport const useAppGridStyles = makeStyles({\r\n\troot: {\r\n\t\tbackgroundColor: 'lightgray',\r\n\t\t...getScrollBarStyles('.sidebar-scrollbar', 8),\r\n\t\t...getScrollBarStyles('.visualizations-container', 8),\r\n\t}\r\n})","import { makeStyles } from '@material-ui/core';\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\nimport { getScrollBarStyles } from '../../SharedStyles/SharedStyles'\r\n\r\nexport const useSettingsPanelStyles = makeStyles({\r\n  root: {\r\n    '& .MuiCheckbox-root.Mui-checked': {\r\n      color: nbaRed\r\n    },\r\n    ...getScrollBarStyles('.stat-select-container', 8)\r\n  }\r\n})","import React, { useContext, useEffect } from 'react';\r\nimport { List, ListItem, Checkbox } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsPanel = () => {\r\n  const { selectedStats, setSelectedStats } = useContext(settingsContext);\r\n  const settingsArray: Array<{label: string, show: boolean}> = [];\r\n  \r\n  for (const key in selectedStats) {\r\n    settingsArray.push({label: key, show: selectedStats[key]})\r\n  }\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    event.stopPropagation();\r\n    const { value } = event.currentTarget.dataset\r\n    selectedStats[value!] = !selectedStats[value!]\r\n    setSelectedStats({...selectedStats})\r\n  };\r\n\r\n  const settingsClasses = useSettingsPanelStyles()\r\n\r\n  return (\r\n    <List\r\n      dense\r\n    >\r\n      {settingsArray.map(({ label, show }) => {\r\n        return (\r\n          <ListItem\r\n            button\r\n            data-value={label}\r\n            onClick={handleClick}\r\n            key={`setting-${label}`}\r\n          >\r\n            <Checkbox checked={show} />\r\n            <span style={{textTransform: 'uppercase'}}>{label}</span>\r\n          </ListItem>\r\n        )\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { IconButton, Popover } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport { SettingsPanel } from './SettingsPanel';\r\nimport { useSettingsPanelStyles } from './SettingsPane.styles';\r\n\r\nexport const SettingsButton = () => {\r\n  const settingsClasses = useSettingsPanelStyles();\r\n  \r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        onClick={handleClick}\r\n      >\r\n\t\t\t  <VisibilityIcon style={{color: '#666666'}} />\r\n\t\t  </IconButton>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n        classes={settingsClasses}\r\n        PaperProps={{ className: 'stat-select-container' }}\r\n      >\r\n        <SettingsPanel />\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { nbaBlue } from '../../Util';\r\n\r\nexport const chartCardPadding = 6\r\nexport const chartCardMargin = 6;\r\n\r\nexport const useBarChartStyles = makeStyles({\r\n  root: {\r\n    width: `calc(100% - ${chartCardMargin * 2}px - ${chartCardPadding * 2}px)`,\r\n    marginTop: 0,\r\n    marginRight: chartCardMargin,\r\n    marginBottom: chartCardMargin,\r\n    marginLeft: chartCardMargin,\r\n    padding: chartCardPadding,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    '& h4': {\r\n      textTransform: 'uppercase',\r\n      margin: 0\r\n    },\r\n    '& svg' : {\r\n      overflow: 'visible',\r\n      marginBottom: 20,\r\n      backgroundColor: '#dddddd'\r\n    },\r\n    '& rect:nth-child(odd)': {\r\n      fill: '#444444',\r\n    },\r\n    '& rect:nth-child(even)': {\r\n      fill: '#666666',\r\n    },\r\n    '& rect:hover': {\r\n      opacity: 1 \r\n    },\r\n    '& .player-name-label': {\r\n      opacity: .25,\r\n      fill: '#fff'\r\n    },\r\n    '& .player-name-label:hover': {\r\n      opacity: 1,\r\n      cursor: 'default'\r\n    },\r\n    '& .best rect:nth-child(odd)': {\r\n      fill: nbaBlue\r\n    },\r\n    '& .best rect:nth-child(even)' : {\r\n      fill: '#3560b3'\r\n    }\r\n  }\r\n})\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Card } from '@material-ui/core';\r\nimport * as d3 from 'd3';\r\nimport { appStatsContext } from '../../Contexts/AppStatsContext';\r\nimport { teamListContext } from '../../Contexts/TeamListContext';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useBarChartStyles } from './BarChart.styles';\r\nimport { isBestInCategory, getSeasonStats } from '../../Util'\r\n\r\nexport interface IStackedBarChartProps {\r\n  statCategory: string\r\n}\r\n\r\ninterface ITeamBar {\r\n  teamId: number;\r\n  teamTotal: number;\r\n  individualBars: Array<IIndividualBar>;\r\n}\r\n\r\ninterface IIndividualBar {\r\n  personId: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  statValue: number;\r\n  xPos: number;\r\n  barWidth: number;\r\n}\r\n\r\nexport const StackedBarChart = (props: IStackedBarChartProps) => {\r\n  const { statCategory } = props;\r\n  const { appStats } = useContext(appStatsContext);\r\n  const { teamList } = useContext(teamListContext);\r\n  const { selectedYear } = useContext(settingsContext);\r\n  const barChartClasses = useBarChartStyles();\r\n\r\n  const { [statCategory]: min } = appStats.min;\r\n  const { [statCategory]: median } = appStats.median;\r\n  const { [statCategory]: max } = appStats.max;\r\n\r\n  useEffect(() => {\r\n    const barPadding = 2;\r\n    const barHeight = 30;\r\n    const svgHeight = teamList.length * barHeight;\r\n    const svgWidth = document.querySelector('.bar-chart-container')!.clientWidth - 160;\r\n    const xScale = d3.scaleLinear()\r\n      .domain([0, max || 100])\r\n      .range([0, svgWidth]);\r\n    const xAxis = d3.axisBottom(xScale);\r\n        \r\n    const dataset: Array<ITeamBar> = teamList.map((team) => {\r\n      const barWidths: Array<number> = team.roster.map((player) => {\r\n        const selectedSeasonStats = getSeasonStats(player, selectedYear as number)\r\n        return xScale(selectedSeasonStats[statCategory] ?? 0);\r\n      })\r\n\r\n      const individualBars = team.roster\r\n        .map((player, i) => {\r\n          const { personId, firstName, lastName } = player\r\n          const selectedSeasonStats = getSeasonStats(player, selectedYear as number);\r\n          const statValue = selectedSeasonStats[statCategory] ?? 0;\r\n          const xPos = i === 0 ? 0 : barWidths.reduce((acc, cur, idx) => idx < i ? acc + cur : acc); \r\n          const barWidth = barWidths[i];\r\n          return { personId, firstName, lastName, statValue, xPos, barWidth };\r\n        })\r\n        .filter(({barWidth}) => barWidth > 0);\r\n\r\n      return {\r\n        teamId: team.id,\r\n        teamTotal: team.teamStats[statCategory],\r\n        individualBars\r\n      };\r\n    });\r\n\r\n    const svg = d3.select(`.bar-chart-container.${statCategory} svg`)\r\n      .attr('width', svgWidth)\r\n      .attr('height', svgHeight);\r\n\r\n    // bar\r\n    svg.selectAll(`.bar-chart-container.${statCategory}`)\r\n      .data(dataset)\r\n      .enter()\r\n      .append('g')\r\n        .attr('transform', (d, i) => `translate(0, ${barHeight * i})`)\r\n        .attr('data-team-id', (d) => d.teamId)\r\n        .classed('best', (d) => isBestInCategory(d.teamTotal, statCategory, appStats))\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d) => d.individualBars)\r\n      .enter()\r\n      .append('rect')\r\n        .attr('x', (d) => d.xPos)\r\n        .attr('width', (d) => d.barWidth)\r\n        .attr('height', barHeight - barPadding)\r\n        \r\n    // team label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => `Team ${d.teamId}`)\r\n        .attr('x', -6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'end')\r\n        .attr('alignment-baseline', 'middle')\r\n\r\n    // total stat label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('text')\r\n        .text((d: any) => d.teamTotal ? d.teamTotal.toFixed(1) : '')\r\n        .attr('x', (d: any) => xScale(d.teamTotal) + 6)\r\n        .attr('y', barHeight / 2)\r\n        .attr('alignment-baseline', 'middle')\r\n      \r\n    // player name label\r\n    svg.selectAll('[data-team-id]')\r\n      .append('g')\r\n      .selectAll('g')\r\n      .data((d: any) => d.individualBars)\r\n      .enter()\r\n      .append('text')\r\n        .text((d: any) => d.statValue ? `${d.firstName[0]}. ${d.lastName} ${d.statValue.toFixed(1)}` : '')\r\n        .attr('x', (d: any) => d.xPos + (d.barWidth / 2))\r\n        .attr('y', barHeight / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('alignment-baseline', 'middle')\r\n        .classed('player-name-label', true)\r\n\r\n    // x axis label\r\n    svg.append('g')\r\n      .attr('transform', `translate(0, ${svgHeight})`)\r\n      .call(xAxis);\r\n  \r\n    return () => { svg.html(null) };\r\n  });\r\n\r\n  return (\r\n    <Card\r\n      classes={barChartClasses}\r\n      className={`bar-chart-container ${statCategory}`}\r\n    >\r\n      <h4>{statCategory}</h4>\r\n      <svg />\r\n    </Card>\r\n  )\r\n}","import React, { useContext, useEffect, useState } from 'react';\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { StackedBarChart } from '../BarChart/StackedBarChart';\r\n\r\nexport const Visualizations = () => {\r\n  const { selectedStats } = useContext(settingsContext);\r\n\r\n  const showStatsArray: Array<string> = Object.keys(selectedStats)\r\n    .filter(category => selectedStats[category]);\r\n\r\n  return (\r\n    <div style={{width: '100%'}}>\r\n      {showStatsArray.map(category => {\r\n        return (\r\n          <StackedBarChart\r\n            key={`bar-chart-${category}`}\r\n            statCategory={category}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import { makeStyles } from '@material-ui/core'\r\nimport { nbaRed, nbaBlue } from '../../Util'\r\n\r\nexport const useSeasonSelectStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'white',\r\n    borderRadius: 4,\r\n    '& .MuiFormLabel-root.Mui-focused': {\r\n      color: nbaRed,\r\n    },\r\n    '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline' : {\r\n      borderColor: nbaRed\r\n    }\r\n  }\r\n})","import React, { useContext } from 'react';\r\nimport { Select, FormControl, InputLabel, MenuItem } from '@material-ui/core'\r\nimport { settingsContext } from '../../Contexts/SettingsContext';\r\nimport { useSeasonSelectStyles } from './SeasonSelect.style'\r\n\r\n\r\nexport const SeasonSelect = () => {\r\n  const { selectedYear, setSelectedYear } = useContext(settingsContext);\r\n\r\n  const seasonSelectClasses = useSeasonSelectStyles();\r\n\r\n  const handleChange = ({ target }: React.ChangeEvent<{ value: unknown }>) => {\r\n    const { value } = target;\r\n    setSelectedYear(value as number);\r\n  };\r\n\r\n  return (\r\n    <FormControl\r\n      variant='outlined'\r\n      classes={seasonSelectClasses}\r\n    >\r\n      <InputLabel>Season</InputLabel>\r\n      <Select\r\n        value={selectedYear}\r\n        onChange={handleChange}\r\n        autoWidth\r\n      >\r\n        <MenuItem value={2020}>2020 - 2021</MenuItem>\r\n        <MenuItem value={2019}>2019 - 2020</MenuItem>\r\n        <MenuItem value={2018}>2018 - 2019</MenuItem>\r\n        <MenuItem value={2017}>2017 - 2018</MenuItem>\r\n        <MenuItem value={2016}>2016 - 2017</MenuItem>\r\n        <MenuItem value={2015}>2015 - 2016</MenuItem>\r\n        <MenuItem value={2014}>2014 - 2015</MenuItem>\r\n        <MenuItem value={2013}>2013 - 2014</MenuItem>\r\n        <MenuItem value={2012}>2012 - 2013</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { AllPlayersContextProvider } from './Contexts/AllPlayersContext'\r\nimport { TeamListContextProvider } from './Contexts/TeamListContext'\r\nimport { AppStatsContextProvider } from './Contexts/AppStatsContext'\r\nimport { SettingsContextProvider } from './Contexts/SettingsContext'\r\nimport { Grid } from '@material-ui/core';\r\nimport { AddTeamButton } from './components/AddTeamButton/AddTeamButton';\r\nimport { AllTeamsContainer } from './components/AllTeamsContainer/AllTeamsContainer';\r\nimport { useAppGridStyles } from './App.styles';\r\nimport { SettingsButton } from './components/SettingsButton/SettingsButton';\r\nimport { Visualizations } from './components/Visualizations/Visualizations';\r\nimport { SeasonSelect } from './components/SeasonSelect/SeasonSelect';\r\nimport { nbaBlue } from './Util'\r\n\r\nfunction App() {\r\n\r\n  const appGridClasses = useAppGridStyles();\r\n\r\n  return (\r\n    <AppStatsContextProvider>\r\n      <AllPlayersContextProvider>\r\n        <TeamListContextProvider>\r\n          <SettingsContextProvider>\r\n            <Grid\r\n              container\r\n              direction='column'\r\n              classes={appGridClasses}\r\n            >\r\n\r\n              {/* top 10% */}\r\n              <Grid\r\n                item\r\n                md={12}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                  style={{height: '10vh',}}\r\n                  alignItems='center'\r\n                  justify='space-between'\r\n                >\r\n                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                      <AddTeamButton />\r\n                      <SettingsButton />\r\n                      <SeasonSelect />\r\n                    </div>\r\n                    <h1 style={{color: nbaBlue, margin: '0px 12px 0px 0px'}}>www.leaguemaps.com</h1>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* bottom 90% */}\r\n              <Grid\r\n                item\r\n                md={12}\r\n              >\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                >\r\n\r\n                  {/* left 25% */}\r\n                  <Grid\r\n                    item\r\n                    md={3}\r\n                    style={{height: '90vh', overflowY: 'scroll'}}\r\n                    className='sidebar-scrollbar scrollbar-padding-top'\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction='column'\r\n                     \r\n                    >\r\n                        <AllTeamsContainer />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/* right 75% */}\r\n                  <Grid\r\n                    item\r\n                    md={9}\r\n                    style={{height: '90vh', overflowY: 'scroll'}}\r\n                    className='visualizations-container scrollbar-padding-top'\r\n                  >\r\n                    <Grid\r\n                      container\r\n                      direction='column'\r\n                     \r\n                    >\r\n                      <Visualizations />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </SettingsContextProvider>\r\n        </TeamListContextProvider>\r\n      </AllPlayersContextProvider>\r\n    </AppStatsContextProvider>\r\n  );\r\n}\r\n\r\n// Did LeagueMaps help you win money in your fantasy league?\r\n// A modest $9 donation pays to keep LeagueMaps online for another 6 months...just in time for your draft next season\r\n\r\n// https://www.d3-graph-gallery.com/barplot.html\r\n// https://www.apollographql.com/blog/layering-graphql-on-top-of-rest-569c915083ad/\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}